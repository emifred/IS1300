
street.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d10  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000020c  08006ea0  08006ea0  00016ea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080070ac  080070ac  0002008c  2**0
                  CONTENTS
  4 .ARM          00000000  080070ac  080070ac  0002008c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080070ac  080070ac  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080070ac  080070ac  000170ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080070b0  080070b0  000170b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  080070b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001eb0  2000008c  08007140  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001f3c  08007140  00021f3c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000195b0  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000373c  00000000  00000000  0003966c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001628  00000000  00000000  0003cda8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014a0  00000000  00000000  0003e3d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000049bf  00000000  00000000  0003f870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018817  00000000  00000000  0004422f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000faeeb  00000000  00000000  0005ca46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00157931  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ec0  00000000  00000000  00157984  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000008c 	.word	0x2000008c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006e88 	.word	0x08006e88

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000090 	.word	0x20000090
 80001cc:	08006e88 	.word	0x08006e88

080001d0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80001d0:	b580      	push	{r7, lr}
 80001d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of event */
  eventHandle = osMutexNew(&event_attributes);
 80001d4:	481f      	ldr	r0, [pc, #124]	; (8000254 <MX_FREERTOS_Init+0x84>)
 80001d6:	f003 f9bf 	bl	8003558 <osMutexNew>
 80001da:	4603      	mov	r3, r0
 80001dc:	4a1e      	ldr	r2, [pc, #120]	; (8000258 <MX_FREERTOS_Init+0x88>)
 80001de:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of buttonsSem */
  buttonsSemHandle = osSemaphoreNew(1, 1, &buttonsSem_attributes);
 80001e0:	4a1e      	ldr	r2, [pc, #120]	; (800025c <MX_FREERTOS_Init+0x8c>)
 80001e2:	2101      	movs	r1, #1
 80001e4:	2001      	movs	r0, #1
 80001e6:	f003 fa3d 	bl	8003664 <osSemaphoreNew>
 80001ea:	4603      	mov	r3, r0
 80001ec:	4a1c      	ldr	r2, [pc, #112]	; (8000260 <MX_FREERTOS_Init+0x90>)
 80001ee:	6013      	str	r3, [r2, #0]

  /* creation of switchesSem */
  switchesSemHandle = osSemaphoreNew(1, 1, &switchesSem_attributes);
 80001f0:	4a1c      	ldr	r2, [pc, #112]	; (8000264 <MX_FREERTOS_Init+0x94>)
 80001f2:	2101      	movs	r1, #1
 80001f4:	2001      	movs	r0, #1
 80001f6:	f003 fa35 	bl	8003664 <osSemaphoreNew>
 80001fa:	4603      	mov	r3, r0
 80001fc:	4a1a      	ldr	r2, [pc, #104]	; (8000268 <MX_FREERTOS_Init+0x98>)
 80001fe:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000200:	4a1a      	ldr	r2, [pc, #104]	; (800026c <MX_FREERTOS_Init+0x9c>)
 8000202:	2100      	movs	r1, #0
 8000204:	481a      	ldr	r0, [pc, #104]	; (8000270 <MX_FREERTOS_Init+0xa0>)
 8000206:	f003 f915 	bl	8003434 <osThreadNew>
 800020a:	4603      	mov	r3, r0
 800020c:	4a19      	ldr	r2, [pc, #100]	; (8000274 <MX_FREERTOS_Init+0xa4>)
 800020e:	6013      	str	r3, [r2, #0]

  /* creation of GPIO_Button1 */
  GPIO_Button1Handle = osThreadNew(Button_Task1, NULL, &GPIO_Button1_attributes);
 8000210:	4a19      	ldr	r2, [pc, #100]	; (8000278 <MX_FREERTOS_Init+0xa8>)
 8000212:	2100      	movs	r1, #0
 8000214:	4819      	ldr	r0, [pc, #100]	; (800027c <MX_FREERTOS_Init+0xac>)
 8000216:	f003 f90d 	bl	8003434 <osThreadNew>
 800021a:	4603      	mov	r3, r0
 800021c:	4a18      	ldr	r2, [pc, #96]	; (8000280 <MX_FREERTOS_Init+0xb0>)
 800021e:	6013      	str	r3, [r2, #0]

  /* creation of GPIO_Switches */
  GPIO_SwitchesHandle = osThreadNew(Switches, NULL, &GPIO_Switches_attributes);
 8000220:	4a18      	ldr	r2, [pc, #96]	; (8000284 <MX_FREERTOS_Init+0xb4>)
 8000222:	2100      	movs	r1, #0
 8000224:	4818      	ldr	r0, [pc, #96]	; (8000288 <MX_FREERTOS_Init+0xb8>)
 8000226:	f003 f905 	bl	8003434 <osThreadNew>
 800022a:	4603      	mov	r3, r0
 800022c:	4a17      	ldr	r2, [pc, #92]	; (800028c <MX_FREERTOS_Init+0xbc>)
 800022e:	6013      	str	r3, [r2, #0]

  /* creation of Timer_Func */
  Timer_FuncHandle = osThreadNew(timer, NULL, &Timer_Func_attributes);
 8000230:	4a17      	ldr	r2, [pc, #92]	; (8000290 <MX_FREERTOS_Init+0xc0>)
 8000232:	2100      	movs	r1, #0
 8000234:	4817      	ldr	r0, [pc, #92]	; (8000294 <MX_FREERTOS_Init+0xc4>)
 8000236:	f003 f8fd 	bl	8003434 <osThreadNew>
 800023a:	4603      	mov	r3, r0
 800023c:	4a16      	ldr	r2, [pc, #88]	; (8000298 <MX_FREERTOS_Init+0xc8>)
 800023e:	6013      	str	r3, [r2, #0]

  /* creation of GPIO_Button2 */
  GPIO_Button2Handle = osThreadNew(Button_Task2, NULL, &GPIO_Button2_attributes);
 8000240:	4a16      	ldr	r2, [pc, #88]	; (800029c <MX_FREERTOS_Init+0xcc>)
 8000242:	2100      	movs	r1, #0
 8000244:	4816      	ldr	r0, [pc, #88]	; (80002a0 <MX_FREERTOS_Init+0xd0>)
 8000246:	f003 f8f5 	bl	8003434 <osThreadNew>
 800024a:	4603      	mov	r3, r0
 800024c:	4a15      	ldr	r2, [pc, #84]	; (80002a4 <MX_FREERTOS_Init+0xd4>)
 800024e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000250:	bf00      	nop
 8000252:	bd80      	pop	{r7, pc}
 8000254:	08006fd4 	.word	0x08006fd4
 8000258:	200000c0 	.word	0x200000c0
 800025c:	08006fe4 	.word	0x08006fe4
 8000260:	200000c4 	.word	0x200000c4
 8000264:	08006ff4 	.word	0x08006ff4
 8000268:	200000c8 	.word	0x200000c8
 800026c:	08006f20 	.word	0x08006f20
 8000270:	080002a9 	.word	0x080002a9
 8000274:	200000ac 	.word	0x200000ac
 8000278:	08006f44 	.word	0x08006f44
 800027c:	08000331 	.word	0x08000331
 8000280:	200000b0 	.word	0x200000b0
 8000284:	08006f68 	.word	0x08006f68
 8000288:	080003ad 	.word	0x080003ad
 800028c:	200000b4 	.word	0x200000b4
 8000290:	08006f8c 	.word	0x08006f8c
 8000294:	08000471 	.word	0x08000471
 8000298:	200000b8 	.word	0x200000b8
 800029c:	08006fb0 	.word	0x08006fb0
 80002a0:	08000535 	.word	0x08000535
 80002a4:	200000bc 	.word	0x200000bc

080002a8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b082      	sub	sp, #8
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartDefaultTask */
	/*!Highest priority task which cycles through the different states
	Depending on the delay in Timer-task*/
	GPIO_State = Default; /*!Set the GPIO to default, meaning no user input at initialisation*/
 80002b0:	4b1c      	ldr	r3, [pc, #112]	; (8000324 <StartDefaultTask+0x7c>)
 80002b2:	2200      	movs	r2, #0
 80002b4:	701a      	strb	r2, [r3, #0]
	/* Infinite loop */
	for (;;) {
		state = Vertical;
 80002b6:	4b1c      	ldr	r3, [pc, #112]	; (8000328 <StartDefaultTask+0x80>)
 80002b8:	2200      	movs	r2, #0
 80002ba:	701a      	strb	r2, [r3, #0]
		States(1); /*!Display the LEDS for when cars going vertically has the green light*/
 80002bc:	2001      	movs	r0, #1
 80002be:	f000 fef3 	bl	80010a8 <States>
		vTaskDelay(1); /*! Small delay to prevent loss of data to the LEDS*/
 80002c2:	2001      	movs	r0, #1
 80002c4:	f004 fde8 	bl	8004e98 <vTaskDelay>
		vTaskSuspend(defaultTaskHandle); /*! Suspend the default program to continue on to the Timer task*/
 80002c8:	4b18      	ldr	r3, [pc, #96]	; (800032c <StartDefaultTask+0x84>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	4618      	mov	r0, r3
 80002ce:	f004 fe17 	bl	8004f00 <vTaskSuspend>

		state = Yellow; /*! Switch the state to show the yellow lights*/
 80002d2:	4b15      	ldr	r3, [pc, #84]	; (8000328 <StartDefaultTask+0x80>)
 80002d4:	2202      	movs	r2, #2
 80002d6:	701a      	strb	r2, [r3, #0]
		States(3);
 80002d8:	2003      	movs	r0, #3
 80002da:	f000 fee5 	bl	80010a8 <States>
		vTaskSuspend(defaultTaskHandle);
 80002de:	4b13      	ldr	r3, [pc, #76]	; (800032c <StartDefaultTask+0x84>)
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	4618      	mov	r0, r3
 80002e4:	f004 fe0c 	bl	8004f00 <vTaskSuspend>

		state = Horizontal;
 80002e8:	4b0f      	ldr	r3, [pc, #60]	; (8000328 <StartDefaultTask+0x80>)
 80002ea:	2201      	movs	r2, #1
 80002ec:	701a      	strb	r2, [r3, #0]
		States(2);
 80002ee:	2002      	movs	r0, #2
 80002f0:	f000 feda 	bl	80010a8 <States>
		vTaskDelay(1);
 80002f4:	2001      	movs	r0, #1
 80002f6:	f004 fdcf 	bl	8004e98 <vTaskDelay>
		vTaskSuspend(defaultTaskHandle);
 80002fa:	4b0c      	ldr	r3, [pc, #48]	; (800032c <StartDefaultTask+0x84>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	4618      	mov	r0, r3
 8000300:	f004 fdfe 	bl	8004f00 <vTaskSuspend>

		state = Yellow;
 8000304:	4b08      	ldr	r3, [pc, #32]	; (8000328 <StartDefaultTask+0x80>)
 8000306:	2202      	movs	r2, #2
 8000308:	701a      	strb	r2, [r3, #0]
		States(3);
 800030a:	2003      	movs	r0, #3
 800030c:	f000 fecc 	bl	80010a8 <States>
		vTaskDelay(1);
 8000310:	2001      	movs	r0, #1
 8000312:	f004 fdc1 	bl	8004e98 <vTaskDelay>
		vTaskSuspend(defaultTaskHandle);
 8000316:	4b05      	ldr	r3, [pc, #20]	; (800032c <StartDefaultTask+0x84>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	4618      	mov	r0, r3
 800031c:	f004 fdf0 	bl	8004f00 <vTaskSuspend>
		state = Vertical;
 8000320:	e7c9      	b.n	80002b6 <StartDefaultTask+0xe>
 8000322:	bf00      	nop
 8000324:	200000a9 	.word	0x200000a9
 8000328:	200000a8 	.word	0x200000a8
 800032c:	200000ac 	.word	0x200000ac

08000330 <Button_Task1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Button_Task1 */
void Button_Task1(void *argument)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b082      	sub	sp, #8
 8000334:	af00      	add	r7, sp, #0
 8000336:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Button_Task1 */
	/* Infinite loop */
	for (;;) {
		if (Crossing_Button1() == true && state != Horizontal) /*! If Button 1 is pressed and the pedestrian light isn't already green*/
 8000338:	f000 ff64 	bl	8001204 <Crossing_Button1>
 800033c:	4603      	mov	r3, r0
 800033e:	2b00      	cmp	r3, #0
 8000340:	d027      	beq.n	8000392 <Button_Task1+0x62>
 8000342:	4b15      	ldr	r3, [pc, #84]	; (8000398 <Button_Task1+0x68>)
 8000344:	781b      	ldrb	r3, [r3, #0]
 8000346:	2b01      	cmp	r3, #1
 8000348:	d023      	beq.n	8000392 <Button_Task1+0x62>
			while (state != Horizontal) { /*! While the pedestrian crossing isn't green*/
 800034a:	e01e      	b.n	800038a <Button_Task1+0x5a>
				Flash_Led(6, 'b', 1, 1); /*! Flash the corresponding blue light*/
 800034c:	2301      	movs	r3, #1
 800034e:	2201      	movs	r2, #1
 8000350:	2162      	movs	r1, #98	; 0x62
 8000352:	2006      	movs	r0, #6
 8000354:	f000 fe74 	bl	8001040 <Flash_Led>
				vTaskDelay(pdMS_TO_TICKS(toggleFreq)); /*! Delay the task to receive a delay between blinks while letting the other tasks continue to work*/
 8000358:	4b10      	ldr	r3, [pc, #64]	; (800039c <Button_Task1+0x6c>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000360:	fb02 f303 	mul.w	r3, r2, r3
 8000364:	4a0e      	ldr	r2, [pc, #56]	; (80003a0 <Button_Task1+0x70>)
 8000366:	fba2 2303 	umull	r2, r3, r2, r3
 800036a:	099b      	lsrs	r3, r3, #6
 800036c:	4618      	mov	r0, r3
 800036e:	f004 fd93 	bl	8004e98 <vTaskDelay>
				if ((osSemaphoreAcquire(buttonsSemHandle, 1) == osOK)) /*! If the other crossing isn't in operation change the state to effect the delay*/
 8000372:	4b0c      	ldr	r3, [pc, #48]	; (80003a4 <Button_Task1+0x74>)
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	2101      	movs	r1, #1
 8000378:	4618      	mov	r0, r3
 800037a:	f003 f9fd 	bl	8003778 <osSemaphoreAcquire>
 800037e:	4603      	mov	r3, r0
 8000380:	2b00      	cmp	r3, #0
 8000382:	d102      	bne.n	800038a <Button_Task1+0x5a>
					GPIO_State = Button1;
 8000384:	4b08      	ldr	r3, [pc, #32]	; (80003a8 <Button_Task1+0x78>)
 8000386:	2201      	movs	r2, #1
 8000388:	701a      	strb	r2, [r3, #0]
			while (state != Horizontal) { /*! While the pedestrian crossing isn't green*/
 800038a:	4b03      	ldr	r3, [pc, #12]	; (8000398 <Button_Task1+0x68>)
 800038c:	781b      	ldrb	r3, [r3, #0]
 800038e:	2b01      	cmp	r3, #1
 8000390:	d1dc      	bne.n	800034c <Button_Task1+0x1c>
			}
		Blue_Clear1(); /*! Function to clear the Blue LED to avoid any lingering light*/
 8000392:	f000 fc97 	bl	8000cc4 <Blue_Clear1>
		if (Crossing_Button1() == true && state != Horizontal) /*! If Button 1 is pressed and the pedestrian light isn't already green*/
 8000396:	e7cf      	b.n	8000338 <Button_Task1+0x8>
 8000398:	200000a8 	.word	0x200000a8
 800039c:	20000000 	.word	0x20000000
 80003a0:	10624dd3 	.word	0x10624dd3
 80003a4:	200000c4 	.word	0x200000c4
 80003a8:	200000a9 	.word	0x200000a9

080003ac <Switches>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Switches */
void Switches(void *argument)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b082      	sub	sp, #8
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Switches */
	/* Infinite loop */
	for (;;) {
		if ((osSemaphoreAcquire(buttonsSemHandle, 1) == osOK)) { /*! If the buttons are not in use*/
 80003b4:	4b2b      	ldr	r3, [pc, #172]	; (8000464 <Switches+0xb8>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	2101      	movs	r1, #1
 80003ba:	4618      	mov	r0, r3
 80003bc:	f003 f9dc 	bl	8003778 <osSemaphoreAcquire>
 80003c0:	4603      	mov	r3, r0
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d1f6      	bne.n	80003b4 <Switches+0x8>
			osSemaphoreRelease(buttonsSemHandle);
 80003c6:	4b27      	ldr	r3, [pc, #156]	; (8000464 <Switches+0xb8>)
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	4618      	mov	r0, r3
 80003cc:	f003 fa26 	bl	800381c <osSemaphoreRelease>
			if (Car_Vertical() == true && Car_Horizontal() == true
 80003d0:	f000 ff28 	bl	8001224 <Car_Vertical>
 80003d4:	4603      	mov	r3, r0
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d00f      	beq.n	80003fa <Switches+0x4e>
 80003da:	f000 ff3d 	bl	8001258 <Car_Horizontal>
 80003de:	4603      	mov	r3, r0
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d00a      	beq.n	80003fa <Switches+0x4e>
					&& GPIO_State != (Button1 || Button2)) { /*! If there is a car wating in both ways, and there are no pedestrians crossing*/
 80003e4:	4b20      	ldr	r3, [pc, #128]	; (8000468 <Switches+0xbc>)
 80003e6:	781b      	ldrb	r3, [r3, #0]
 80003e8:	2b01      	cmp	r3, #1
 80003ea:	d006      	beq.n	80003fa <Switches+0x4e>
				GPIO_State = Default; /*! Change the state to default altering lights but with a new delay*/
 80003ec:	4b1e      	ldr	r3, [pc, #120]	; (8000468 <Switches+0xbc>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	701a      	strb	r2, [r3, #0]
				Waiting_Cars = true; /*! Telling the timer task that there are cars waiting in both directions.*/
 80003f2:	4b1e      	ldr	r3, [pc, #120]	; (800046c <Switches+0xc0>)
 80003f4:	2201      	movs	r2, #1
 80003f6:	701a      	strb	r2, [r3, #0]
 80003f8:	e033      	b.n	8000462 <Switches+0xb6>
			}

			else if (Car_Horizontal() == true && Car_Vertical() == false
 80003fa:	f000 ff2d 	bl	8001258 <Car_Horizontal>
 80003fe:	4603      	mov	r3, r0
 8000400:	2b00      	cmp	r3, #0
 8000402:	d00f      	beq.n	8000424 <Switches+0x78>
 8000404:	f000 ff0e 	bl	8001224 <Car_Vertical>
 8000408:	4603      	mov	r3, r0
 800040a:	f083 0301 	eor.w	r3, r3, #1
 800040e:	b2db      	uxtb	r3, r3
 8000410:	2b00      	cmp	r3, #0
 8000412:	d007      	beq.n	8000424 <Switches+0x78>
					&& GPIO_State != (Button1 || Button2)) { /*! If a car is waiting in the horizontal direction and there are no pedestrians*/
 8000414:	4b14      	ldr	r3, [pc, #80]	; (8000468 <Switches+0xbc>)
 8000416:	781b      	ldrb	r3, [r3, #0]
 8000418:	2b01      	cmp	r3, #1
 800041a:	d003      	beq.n	8000424 <Switches+0x78>
				GPIO_State = Horizontal_Car;
 800041c:	4b12      	ldr	r3, [pc, #72]	; (8000468 <Switches+0xbc>)
 800041e:	2203      	movs	r2, #3
 8000420:	701a      	strb	r2, [r3, #0]
 8000422:	e01e      	b.n	8000462 <Switches+0xb6>
			}

			else if (Car_Vertical() == true && Car_Horizontal() == false
 8000424:	f000 fefe 	bl	8001224 <Car_Vertical>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d00f      	beq.n	800044e <Switches+0xa2>
 800042e:	f000 ff13 	bl	8001258 <Car_Horizontal>
 8000432:	4603      	mov	r3, r0
 8000434:	f083 0301 	eor.w	r3, r3, #1
 8000438:	b2db      	uxtb	r3, r3
 800043a:	2b00      	cmp	r3, #0
 800043c:	d007      	beq.n	800044e <Switches+0xa2>
					&& GPIO_State != (Button1 || Button2)) { /*! If a car is waiting in the vertical direction and there are no pedestrians*/
 800043e:	4b0a      	ldr	r3, [pc, #40]	; (8000468 <Switches+0xbc>)
 8000440:	781b      	ldrb	r3, [r3, #0]
 8000442:	2b01      	cmp	r3, #1
 8000444:	d003      	beq.n	800044e <Switches+0xa2>
				GPIO_State = Vertical_Car;
 8000446:	4b08      	ldr	r3, [pc, #32]	; (8000468 <Switches+0xbc>)
 8000448:	2204      	movs	r2, #4
 800044a:	701a      	strb	r2, [r3, #0]
 800044c:	e009      	b.n	8000462 <Switches+0xb6>
			} else if (GPIO_State != (Button1 || Button2)) { /*! If there are no cars, and no pedestrians*/
 800044e:	4b06      	ldr	r3, [pc, #24]	; (8000468 <Switches+0xbc>)
 8000450:	781b      	ldrb	r3, [r3, #0]
 8000452:	2b01      	cmp	r3, #1
 8000454:	d0ae      	beq.n	80003b4 <Switches+0x8>
				GPIO_State = Default;
 8000456:	4b04      	ldr	r3, [pc, #16]	; (8000468 <Switches+0xbc>)
 8000458:	2200      	movs	r2, #0
 800045a:	701a      	strb	r2, [r3, #0]
				Waiting_Cars = false; /*! Clear waiting cars because there are none*/
 800045c:	4b03      	ldr	r3, [pc, #12]	; (800046c <Switches+0xc0>)
 800045e:	2200      	movs	r2, #0
 8000460:	701a      	strb	r2, [r3, #0]
		if ((osSemaphoreAcquire(buttonsSemHandle, 1) == osOK)) { /*! If the buttons are not in use*/
 8000462:	e7a7      	b.n	80003b4 <Switches+0x8>
 8000464:	200000c4 	.word	0x200000c4
 8000468:	200000a9 	.word	0x200000a9
 800046c:	200000aa 	.word	0x200000aa

08000470 <timer>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_timer */
void timer(void *argument)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b082      	sub	sp, #8
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN timer */
	/* Infinite loop */
	for (;;) {
		switch (GPIO_State) {
 8000478:	4b27      	ldr	r3, [pc, #156]	; (8000518 <timer+0xa8>)
 800047a:	781b      	ldrb	r3, [r3, #0]
 800047c:	2b04      	cmp	r3, #4
 800047e:	d8fb      	bhi.n	8000478 <timer+0x8>
 8000480:	a201      	add	r2, pc, #4	; (adr r2, 8000488 <timer+0x18>)
 8000482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000486:	bf00      	nop
 8000488:	0800049d 	.word	0x0800049d
 800048c:	080004d1 	.word	0x080004d1
 8000490:	080004d7 	.word	0x080004d7
 8000494:	080004dd 	.word	0x080004dd
 8000498:	080004f9 	.word	0x080004f9
		case Default: {
			if (state == Yellow) {
 800049c:	4b1f      	ldr	r3, [pc, #124]	; (800051c <timer+0xac>)
 800049e:	781b      	ldrb	r3, [r3, #0]
 80004a0:	2b02      	cmp	r3, #2
 80004a2:	d105      	bne.n	80004b0 <timer+0x40>
				Stall_Function(orangeDelay);
 80004a4:	4b1e      	ldr	r3, [pc, #120]	; (8000520 <timer+0xb0>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	4618      	mov	r0, r3
 80004aa:	f000 f881 	bl	80005b0 <Stall_Function>
			} else if (Waiting_Cars == true) {
				Stall_Function(redDelayMax);
			} else {
				Stall_Function(greenDelay);
			}
			break;
 80004ae:	e031      	b.n	8000514 <timer+0xa4>
			} else if (Waiting_Cars == true) {
 80004b0:	4b1c      	ldr	r3, [pc, #112]	; (8000524 <timer+0xb4>)
 80004b2:	781b      	ldrb	r3, [r3, #0]
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d005      	beq.n	80004c4 <timer+0x54>
				Stall_Function(redDelayMax);
 80004b8:	4b1b      	ldr	r3, [pc, #108]	; (8000528 <timer+0xb8>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	4618      	mov	r0, r3
 80004be:	f000 f877 	bl	80005b0 <Stall_Function>
			break;
 80004c2:	e027      	b.n	8000514 <timer+0xa4>
				Stall_Function(greenDelay);
 80004c4:	4b19      	ldr	r3, [pc, #100]	; (800052c <timer+0xbc>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	4618      	mov	r0, r3
 80004ca:	f000 f871 	bl	80005b0 <Stall_Function>
			break;
 80004ce:	e021      	b.n	8000514 <timer+0xa4>
		}
		case Button1: { //if any of buttons been pressed
			Button1_TimerHandler();
 80004d0:	f000 f88c 	bl	80005ec <Button1_TimerHandler>

			break;
 80004d4:	e01e      	b.n	8000514 <timer+0xa4>
		}
		case Button2: { //if any of buttons been pressed
			Button2_TimerHandler();
 80004d6:	f000 f8e1 	bl	800069c <Button2_TimerHandler>
			break;
 80004da:	e01b      	b.n	8000514 <timer+0xa4>
		}
		case Horizontal_Car: {
			if (state == Horizontal) {
 80004dc:	4b0f      	ldr	r3, [pc, #60]	; (800051c <timer+0xac>)
 80004de:	781b      	ldrb	r3, [r3, #0]
 80004e0:	2b01      	cmp	r3, #1
 80004e2:	d103      	bne.n	80004ec <timer+0x7c>
				vTaskDelay(10);
 80004e4:	200a      	movs	r0, #10
 80004e6:	f004 fcd7 	bl	8004e98 <vTaskDelay>
			} else {
				vTaskResume(defaultTaskHandle);

			}
			break;
 80004ea:	e013      	b.n	8000514 <timer+0xa4>
				vTaskResume(defaultTaskHandle);
 80004ec:	4b10      	ldr	r3, [pc, #64]	; (8000530 <timer+0xc0>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4618      	mov	r0, r3
 80004f2:	f004 fdad 	bl	8005050 <vTaskResume>
			break;
 80004f6:	e00d      	b.n	8000514 <timer+0xa4>
		}
		case Vertical_Car: {
			if (state == Vertical) {
 80004f8:	4b08      	ldr	r3, [pc, #32]	; (800051c <timer+0xac>)
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d103      	bne.n	8000508 <timer+0x98>
				vTaskDelay(10);
 8000500:	200a      	movs	r0, #10
 8000502:	f004 fcc9 	bl	8004e98 <vTaskDelay>
			} else {
				vTaskResume(defaultTaskHandle);

			}

			break;
 8000506:	e004      	b.n	8000512 <timer+0xa2>
				vTaskResume(defaultTaskHandle);
 8000508:	4b09      	ldr	r3, [pc, #36]	; (8000530 <timer+0xc0>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4618      	mov	r0, r3
 800050e:	f004 fd9f 	bl	8005050 <vTaskResume>
			break;
 8000512:	bf00      	nop
		switch (GPIO_State) {
 8000514:	e7b0      	b.n	8000478 <timer+0x8>
 8000516:	bf00      	nop
 8000518:	200000a9 	.word	0x200000a9
 800051c:	200000a8 	.word	0x200000a8
 8000520:	2000000c 	.word	0x2000000c
 8000524:	200000aa 	.word	0x200000aa
 8000528:	20000014 	.word	0x20000014
 800052c:	20000010 	.word	0x20000010
 8000530:	200000ac 	.word	0x200000ac

08000534 <Button_Task2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Button_Task2 */
void Button_Task2(void *argument)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Button_Task2 */
	/* Infinite loop */
	for (;;) {
		if (Crossing_Button2() == true && state != Vertical) {
 800053c:	f000 fe52 	bl	80011e4 <Crossing_Button2>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d0fa      	beq.n	800053c <Button_Task2+0x8>
 8000546:	4b15      	ldr	r3, [pc, #84]	; (800059c <Button_Task2+0x68>)
 8000548:	781b      	ldrb	r3, [r3, #0]
 800054a:	2b00      	cmp	r3, #0
 800054c:	d0f6      	beq.n	800053c <Button_Task2+0x8>
			while (state != Vertical) {
 800054e:	e01e      	b.n	800058e <Button_Task2+0x5a>
				Flash_Led(5, 'b', 1, 1);
 8000550:	2301      	movs	r3, #1
 8000552:	2201      	movs	r2, #1
 8000554:	2162      	movs	r1, #98	; 0x62
 8000556:	2005      	movs	r0, #5
 8000558:	f000 fd72 	bl	8001040 <Flash_Led>
				vTaskDelay(pdMS_TO_TICKS(toggleFreq));
 800055c:	4b10      	ldr	r3, [pc, #64]	; (80005a0 <Button_Task2+0x6c>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000564:	fb02 f303 	mul.w	r3, r2, r3
 8000568:	4a0e      	ldr	r2, [pc, #56]	; (80005a4 <Button_Task2+0x70>)
 800056a:	fba2 2303 	umull	r2, r3, r2, r3
 800056e:	099b      	lsrs	r3, r3, #6
 8000570:	4618      	mov	r0, r3
 8000572:	f004 fc91 	bl	8004e98 <vTaskDelay>
				if ((osSemaphoreAcquire(buttonsSemHandle, 1) == osOK))
 8000576:	4b0c      	ldr	r3, [pc, #48]	; (80005a8 <Button_Task2+0x74>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	2101      	movs	r1, #1
 800057c:	4618      	mov	r0, r3
 800057e:	f003 f8fb 	bl	8003778 <osSemaphoreAcquire>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	d102      	bne.n	800058e <Button_Task2+0x5a>
					GPIO_State = Button2;
 8000588:	4b08      	ldr	r3, [pc, #32]	; (80005ac <Button_Task2+0x78>)
 800058a:	2202      	movs	r2, #2
 800058c:	701a      	strb	r2, [r3, #0]
			while (state != Vertical) {
 800058e:	4b03      	ldr	r3, [pc, #12]	; (800059c <Button_Task2+0x68>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	2b00      	cmp	r3, #0
 8000594:	d1dc      	bne.n	8000550 <Button_Task2+0x1c>
			}
			Blue_Clear2();
 8000596:	f000 fba5 	bl	8000ce4 <Blue_Clear2>
		if (Crossing_Button2() == true && state != Vertical) {
 800059a:	e7cf      	b.n	800053c <Button_Task2+0x8>
 800059c:	200000a8 	.word	0x200000a8
 80005a0:	20000000 	.word	0x20000000
 80005a4:	10624dd3 	.word	0x10624dd3
 80005a8:	200000c4 	.word	0x200000c4
 80005ac:	200000a9 	.word	0x200000a9

080005b0 <Stall_Function>:
/**
* @brief Function for delaying Timer task and starting the main task
* @param Delay time stated in miliseconds
* @retval None
*/
void Stall_Function(uint32_t delay) {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
	vTaskDelay(pdMS_TO_TICKS(delay));
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005be:	fb02 f303 	mul.w	r3, r2, r3
 80005c2:	4a08      	ldr	r2, [pc, #32]	; (80005e4 <Stall_Function+0x34>)
 80005c4:	fba2 2303 	umull	r2, r3, r2, r3
 80005c8:	099b      	lsrs	r3, r3, #6
 80005ca:	4618      	mov	r0, r3
 80005cc:	f004 fc64 	bl	8004e98 <vTaskDelay>
	vTaskResume(defaultTaskHandle);
 80005d0:	4b05      	ldr	r3, [pc, #20]	; (80005e8 <Stall_Function+0x38>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4618      	mov	r0, r3
 80005d6:	f004 fd3b 	bl	8005050 <vTaskResume>
}
 80005da:	bf00      	nop
 80005dc:	3708      	adds	r7, #8
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	10624dd3 	.word	0x10624dd3
 80005e8:	200000ac 	.word	0x200000ac

080005ec <Button1_TimerHandler>:
/**
* @brief Function handeling delays when button 1 has been pressed
* @param argument: Not used
* @retval None
*/
void Button1_TimerHandler(void) {
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
	if (state == Yellow) { //if the button was pressed when there was a orange light
 80005f0:	4b23      	ldr	r3, [pc, #140]	; (8000680 <Button1_TimerHandler+0x94>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b02      	cmp	r3, #2
 80005f6:	d105      	bne.n	8000604 <Button1_TimerHandler+0x18>
		Stall_Function(orangeDelay);
 80005f8:	4b22      	ldr	r3, [pc, #136]	; (8000684 <Button1_TimerHandler+0x98>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4618      	mov	r0, r3
 80005fe:	f7ff ffd7 	bl	80005b0 <Stall_Function>
		Stall_Function(orangeDelay);
		vTaskDelay(pdMS_TO_TICKS(walkingDelay));
		osSemaphoreRelease(buttonsSemHandle);
		GPIO_State = Default;
	}
}
 8000602:	e03b      	b.n	800067c <Button1_TimerHandler+0x90>
	} else if (state == Horizontal) {
 8000604:	4b1e      	ldr	r3, [pc, #120]	; (8000680 <Button1_TimerHandler+0x94>)
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	2b01      	cmp	r3, #1
 800060a:	d115      	bne.n	8000638 <Button1_TimerHandler+0x4c>
		vTaskDelay(pdMS_TO_TICKS(walkingDelay));
 800060c:	4b1e      	ldr	r3, [pc, #120]	; (8000688 <Button1_TimerHandler+0x9c>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000614:	fb02 f303 	mul.w	r3, r2, r3
 8000618:	4a1c      	ldr	r2, [pc, #112]	; (800068c <Button1_TimerHandler+0xa0>)
 800061a:	fba2 2303 	umull	r2, r3, r2, r3
 800061e:	099b      	lsrs	r3, r3, #6
 8000620:	4618      	mov	r0, r3
 8000622:	f004 fc39 	bl	8004e98 <vTaskDelay>
		osSemaphoreRelease(buttonsSemHandle);
 8000626:	4b1a      	ldr	r3, [pc, #104]	; (8000690 <Button1_TimerHandler+0xa4>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4618      	mov	r0, r3
 800062c:	f003 f8f6 	bl	800381c <osSemaphoreRelease>
		GPIO_State = Default;
 8000630:	4b18      	ldr	r3, [pc, #96]	; (8000694 <Button1_TimerHandler+0xa8>)
 8000632:	2200      	movs	r2, #0
 8000634:	701a      	strb	r2, [r3, #0]
}
 8000636:	e021      	b.n	800067c <Button1_TimerHandler+0x90>
		Stall_Function(pedestrianDelay - orangeDelay);
 8000638:	4b17      	ldr	r3, [pc, #92]	; (8000698 <Button1_TimerHandler+0xac>)
 800063a:	681a      	ldr	r2, [r3, #0]
 800063c:	4b11      	ldr	r3, [pc, #68]	; (8000684 <Button1_TimerHandler+0x98>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	1ad3      	subs	r3, r2, r3
 8000642:	4618      	mov	r0, r3
 8000644:	f7ff ffb4 	bl	80005b0 <Stall_Function>
		Stall_Function(orangeDelay);
 8000648:	4b0e      	ldr	r3, [pc, #56]	; (8000684 <Button1_TimerHandler+0x98>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4618      	mov	r0, r3
 800064e:	f7ff ffaf 	bl	80005b0 <Stall_Function>
		vTaskDelay(pdMS_TO_TICKS(walkingDelay));
 8000652:	4b0d      	ldr	r3, [pc, #52]	; (8000688 <Button1_TimerHandler+0x9c>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800065a:	fb02 f303 	mul.w	r3, r2, r3
 800065e:	4a0b      	ldr	r2, [pc, #44]	; (800068c <Button1_TimerHandler+0xa0>)
 8000660:	fba2 2303 	umull	r2, r3, r2, r3
 8000664:	099b      	lsrs	r3, r3, #6
 8000666:	4618      	mov	r0, r3
 8000668:	f004 fc16 	bl	8004e98 <vTaskDelay>
		osSemaphoreRelease(buttonsSemHandle);
 800066c:	4b08      	ldr	r3, [pc, #32]	; (8000690 <Button1_TimerHandler+0xa4>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4618      	mov	r0, r3
 8000672:	f003 f8d3 	bl	800381c <osSemaphoreRelease>
		GPIO_State = Default;
 8000676:	4b07      	ldr	r3, [pc, #28]	; (8000694 <Button1_TimerHandler+0xa8>)
 8000678:	2200      	movs	r2, #0
 800067a:	701a      	strb	r2, [r3, #0]
}
 800067c:	bf00      	nop
 800067e:	bd80      	pop	{r7, pc}
 8000680:	200000a8 	.word	0x200000a8
 8000684:	2000000c 	.word	0x2000000c
 8000688:	20000008 	.word	0x20000008
 800068c:	10624dd3 	.word	0x10624dd3
 8000690:	200000c4 	.word	0x200000c4
 8000694:	200000a9 	.word	0x200000a9
 8000698:	20000004 	.word	0x20000004

0800069c <Button2_TimerHandler>:
/**
* @brief Function handling delays when button 2 has been pressed
* @param argument: Not used
* @retval None
*/
void Button2_TimerHandler(void) {
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
	if (state == Yellow) { //if the button was pressed when there was a orange light
 80006a0:	4b23      	ldr	r3, [pc, #140]	; (8000730 <Button2_TimerHandler+0x94>)
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	2b02      	cmp	r3, #2
 80006a6:	d105      	bne.n	80006b4 <Button2_TimerHandler+0x18>
		Stall_Function(orangeDelay);
 80006a8:	4b22      	ldr	r3, [pc, #136]	; (8000734 <Button2_TimerHandler+0x98>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4618      	mov	r0, r3
 80006ae:	f7ff ff7f 	bl	80005b0 <Stall_Function>
		Stall_Function(orangeDelay);
		vTaskDelay(pdMS_TO_TICKS(walkingDelay));
		osSemaphoreRelease(buttonsSemHandle);
		GPIO_State = Default;
	}
}
 80006b2:	e03b      	b.n	800072c <Button2_TimerHandler+0x90>
	} else if (state == Vertical) {
 80006b4:	4b1e      	ldr	r3, [pc, #120]	; (8000730 <Button2_TimerHandler+0x94>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d115      	bne.n	80006e8 <Button2_TimerHandler+0x4c>
		vTaskDelay(pdMS_TO_TICKS(walkingDelay));
 80006bc:	4b1e      	ldr	r3, [pc, #120]	; (8000738 <Button2_TimerHandler+0x9c>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80006c4:	fb02 f303 	mul.w	r3, r2, r3
 80006c8:	4a1c      	ldr	r2, [pc, #112]	; (800073c <Button2_TimerHandler+0xa0>)
 80006ca:	fba2 2303 	umull	r2, r3, r2, r3
 80006ce:	099b      	lsrs	r3, r3, #6
 80006d0:	4618      	mov	r0, r3
 80006d2:	f004 fbe1 	bl	8004e98 <vTaskDelay>
		osSemaphoreRelease(buttonsSemHandle);
 80006d6:	4b1a      	ldr	r3, [pc, #104]	; (8000740 <Button2_TimerHandler+0xa4>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	4618      	mov	r0, r3
 80006dc:	f003 f89e 	bl	800381c <osSemaphoreRelease>
		GPIO_State = Default;
 80006e0:	4b18      	ldr	r3, [pc, #96]	; (8000744 <Button2_TimerHandler+0xa8>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	701a      	strb	r2, [r3, #0]
}
 80006e6:	e021      	b.n	800072c <Button2_TimerHandler+0x90>
		Stall_Function(pedestrianDelay - orangeDelay);
 80006e8:	4b17      	ldr	r3, [pc, #92]	; (8000748 <Button2_TimerHandler+0xac>)
 80006ea:	681a      	ldr	r2, [r3, #0]
 80006ec:	4b11      	ldr	r3, [pc, #68]	; (8000734 <Button2_TimerHandler+0x98>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	1ad3      	subs	r3, r2, r3
 80006f2:	4618      	mov	r0, r3
 80006f4:	f7ff ff5c 	bl	80005b0 <Stall_Function>
		Stall_Function(orangeDelay);
 80006f8:	4b0e      	ldr	r3, [pc, #56]	; (8000734 <Button2_TimerHandler+0x98>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4618      	mov	r0, r3
 80006fe:	f7ff ff57 	bl	80005b0 <Stall_Function>
		vTaskDelay(pdMS_TO_TICKS(walkingDelay));
 8000702:	4b0d      	ldr	r3, [pc, #52]	; (8000738 <Button2_TimerHandler+0x9c>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800070a:	fb02 f303 	mul.w	r3, r2, r3
 800070e:	4a0b      	ldr	r2, [pc, #44]	; (800073c <Button2_TimerHandler+0xa0>)
 8000710:	fba2 2303 	umull	r2, r3, r2, r3
 8000714:	099b      	lsrs	r3, r3, #6
 8000716:	4618      	mov	r0, r3
 8000718:	f004 fbbe 	bl	8004e98 <vTaskDelay>
		osSemaphoreRelease(buttonsSemHandle);
 800071c:	4b08      	ldr	r3, [pc, #32]	; (8000740 <Button2_TimerHandler+0xa4>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4618      	mov	r0, r3
 8000722:	f003 f87b 	bl	800381c <osSemaphoreRelease>
		GPIO_State = Default;
 8000726:	4b07      	ldr	r3, [pc, #28]	; (8000744 <Button2_TimerHandler+0xa8>)
 8000728:	2200      	movs	r2, #0
 800072a:	701a      	strb	r2, [r3, #0]
}
 800072c:	bf00      	nop
 800072e:	bd80      	pop	{r7, pc}
 8000730:	200000a8 	.word	0x200000a8
 8000734:	2000000c 	.word	0x2000000c
 8000738:	20000008 	.word	0x20000008
 800073c:	10624dd3 	.word	0x10624dd3
 8000740:	200000c4 	.word	0x200000c4
 8000744:	200000a9 	.word	0x200000a9
 8000748:	20000004 	.word	0x20000004

0800074c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b08a      	sub	sp, #40	; 0x28
 8000750:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000752:	f107 0314 	add.w	r3, r7, #20
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	605a      	str	r2, [r3, #4]
 800075c:	609a      	str	r2, [r3, #8]
 800075e:	60da      	str	r2, [r3, #12]
 8000760:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000762:	4b5a      	ldr	r3, [pc, #360]	; (80008cc <MX_GPIO_Init+0x180>)
 8000764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000766:	4a59      	ldr	r2, [pc, #356]	; (80008cc <MX_GPIO_Init+0x180>)
 8000768:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800076c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800076e:	4b57      	ldr	r3, [pc, #348]	; (80008cc <MX_GPIO_Init+0x180>)
 8000770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000776:	613b      	str	r3, [r7, #16]
 8000778:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800077a:	4b54      	ldr	r3, [pc, #336]	; (80008cc <MX_GPIO_Init+0x180>)
 800077c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077e:	4a53      	ldr	r2, [pc, #332]	; (80008cc <MX_GPIO_Init+0x180>)
 8000780:	f043 0304 	orr.w	r3, r3, #4
 8000784:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000786:	4b51      	ldr	r3, [pc, #324]	; (80008cc <MX_GPIO_Init+0x180>)
 8000788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078a:	f003 0304 	and.w	r3, r3, #4
 800078e:	60fb      	str	r3, [r7, #12]
 8000790:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000792:	4b4e      	ldr	r3, [pc, #312]	; (80008cc <MX_GPIO_Init+0x180>)
 8000794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000796:	4a4d      	ldr	r2, [pc, #308]	; (80008cc <MX_GPIO_Init+0x180>)
 8000798:	f043 0302 	orr.w	r3, r3, #2
 800079c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800079e:	4b4b      	ldr	r3, [pc, #300]	; (80008cc <MX_GPIO_Init+0x180>)
 80007a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a2:	f003 0302 	and.w	r3, r3, #2
 80007a6:	60bb      	str	r3, [r7, #8]
 80007a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007aa:	4b48      	ldr	r3, [pc, #288]	; (80008cc <MX_GPIO_Init+0x180>)
 80007ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ae:	4a47      	ldr	r2, [pc, #284]	; (80008cc <MX_GPIO_Init+0x180>)
 80007b0:	f043 0301 	orr.w	r3, r3, #1
 80007b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007b6:	4b45      	ldr	r3, [pc, #276]	; (80008cc <MX_GPIO_Init+0x180>)
 80007b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ba:	f003 0301 	and.w	r3, r3, #1
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STCP_GPIO_Port, STCP_Pin, GPIO_PIN_RESET);
 80007c2:	2200      	movs	r2, #0
 80007c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007c8:	4841      	ldr	r0, [pc, #260]	; (80008d0 <MX_GPIO_Init+0x184>)
 80007ca:	f001 f8c5 	bl	8001958 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Enable_GPIO_Port, Enable_Pin, GPIO_PIN_RESET);
 80007ce:	2200      	movs	r2, #0
 80007d0:	2180      	movs	r1, #128	; 0x80
 80007d2:	4840      	ldr	r0, [pc, #256]	; (80008d4 <MX_GPIO_Init+0x188>)
 80007d4:	f001 f8c0 	bl	8001958 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Reset_GPIO_Port, Reset_Pin, GPIO_PIN_RESET);
 80007d8:	2200      	movs	r2, #0
 80007da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007e2:	f001 f8b9 	bl	8001958 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TL1_Car_Pin;
 80007e6:	2310      	movs	r3, #16
 80007e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ea:	2300      	movs	r3, #0
 80007ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ee:	2300      	movs	r3, #0
 80007f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TL1_Car_GPIO_Port, &GPIO_InitStruct);
 80007f2:	f107 0314 	add.w	r3, r7, #20
 80007f6:	4619      	mov	r1, r3
 80007f8:	4836      	ldr	r0, [pc, #216]	; (80008d4 <MX_GPIO_Init+0x188>)
 80007fa:	f000 feeb 	bl	80015d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STCP_Pin;
 80007fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000802:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000804:	2301      	movs	r3, #1
 8000806:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000808:	2300      	movs	r3, #0
 800080a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080c:	2300      	movs	r3, #0
 800080e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(STCP_GPIO_Port, &GPIO_InitStruct);
 8000810:	f107 0314 	add.w	r3, r7, #20
 8000814:	4619      	mov	r1, r3
 8000816:	482e      	ldr	r0, [pc, #184]	; (80008d0 <MX_GPIO_Init+0x184>)
 8000818:	f000 fedc 	bl	80015d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = TL2_Car_Pin|TL3_Car_Pin;
 800081c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000820:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000822:	2300      	movs	r3, #0
 8000824:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000826:	2300      	movs	r3, #0
 8000828:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800082a:	f107 0314 	add.w	r3, r7, #20
 800082e:	4619      	mov	r1, r3
 8000830:	4827      	ldr	r0, [pc, #156]	; (80008d0 <MX_GPIO_Init+0x184>)
 8000832:	f000 fecf 	bl	80015d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Enable_Pin;
 8000836:	2380      	movs	r3, #128	; 0x80
 8000838:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083a:	2301      	movs	r3, #1
 800083c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083e:	2300      	movs	r3, #0
 8000840:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000842:	2300      	movs	r3, #0
 8000844:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Enable_GPIO_Port, &GPIO_InitStruct);
 8000846:	f107 0314 	add.w	r3, r7, #20
 800084a:	4619      	mov	r1, r3
 800084c:	4821      	ldr	r0, [pc, #132]	; (80008d4 <MX_GPIO_Init+0x188>)
 800084e:	f000 fec1 	bl	80015d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Reset_Pin;
 8000852:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000856:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000858:	2301      	movs	r3, #1
 800085a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085c:	2300      	movs	r3, #0
 800085e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000860:	2300      	movs	r3, #0
 8000862:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Reset_GPIO_Port, &GPIO_InitStruct);
 8000864:	f107 0314 	add.w	r3, r7, #20
 8000868:	4619      	mov	r1, r3
 800086a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800086e:	f000 feb1 	bl	80015d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TL4_Car_Pin;
 8000872:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000876:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000878:	2300      	movs	r3, #0
 800087a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TL4_Car_GPIO_Port, &GPIO_InitStruct);
 8000880:	f107 0314 	add.w	r3, r7, #20
 8000884:	4619      	mov	r1, r3
 8000886:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800088a:	f000 fea3 	bl	80015d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PL1_Switch_Pin;
 800088e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000892:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000894:	2300      	movs	r3, #0
 8000896:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000898:	2301      	movs	r3, #1
 800089a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PL1_Switch_GPIO_Port, &GPIO_InitStruct);
 800089c:	f107 0314 	add.w	r3, r7, #20
 80008a0:	4619      	mov	r1, r3
 80008a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008a6:	f000 fe95 	bl	80015d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PL2_Switch_Pin;
 80008aa:	2380      	movs	r3, #128	; 0x80
 80008ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ae:	2300      	movs	r3, #0
 80008b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008b2:	2301      	movs	r3, #1
 80008b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PL2_Switch_GPIO_Port, &GPIO_InitStruct);
 80008b6:	f107 0314 	add.w	r3, r7, #20
 80008ba:	4619      	mov	r1, r3
 80008bc:	4804      	ldr	r0, [pc, #16]	; (80008d0 <MX_GPIO_Init+0x184>)
 80008be:	f000 fe89 	bl	80015d4 <HAL_GPIO_Init>

}
 80008c2:	bf00      	nop
 80008c4:	3728      	adds	r7, #40	; 0x28
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	40021000 	.word	0x40021000
 80008d0:	48000400 	.word	0x48000400
 80008d4:	48000800 	.word	0x48000800

080008d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008dc:	f000 fd34 	bl	8001348 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008e0:	f000 f822 	bl	8000928 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008e4:	f7ff ff32 	bl	800074c <MX_GPIO_Init>
  MX_SPI3_Init();
 80008e8:	f000 f888 	bl	80009fc <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(Reset_GPIO_Port, Reset_Pin, GPIO_PIN_SET);
 80008ec:	2201      	movs	r2, #1
 80008ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008f6:	f001 f82f 	bl	8001958 <HAL_GPIO_WritePin>
    //Set Enable active low
  HAL_GPIO_WritePin(Enable_GPIO_Port, Enable_Pin, GPIO_PIN_RESET);
 80008fa:	2200      	movs	r2, #0
 80008fc:	2180      	movs	r1, #128	; 0x80
 80008fe:	4809      	ldr	r0, [pc, #36]	; (8000924 <main+0x4c>)
 8000900:	f001 f82a 	bl	8001958 <HAL_GPIO_WritePin>
#ifdef RUN_TEST_PROGRAM
  	  Test_program();
#else
  	  Led_Clear();
 8000904:	f000 f9d0 	bl	8000ca8 <Led_Clear>
  	 osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000908:	f002 fd4a 	bl	80033a0 <osKernelInitialize>
  	  MX_FREERTOS_Init();
 800090c:	f7ff fc60 	bl	80001d0 <MX_FREERTOS_Init>

  	  /* Start scheduler */
  	  osKernelStart();
 8000910:	f002 fd6a 	bl	80033e8 <osKernelStart>
#endif
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000914:	f002 fd44 	bl	80033a0 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000918:	f7ff fc5a 	bl	80001d0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800091c:	f002 fd64 	bl	80033e8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000920:	e7fe      	b.n	8000920 <main+0x48>
 8000922:	bf00      	nop
 8000924:	48000800 	.word	0x48000800

08000928 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b096      	sub	sp, #88	; 0x58
 800092c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800092e:	f107 0314 	add.w	r3, r7, #20
 8000932:	2244      	movs	r2, #68	; 0x44
 8000934:	2100      	movs	r1, #0
 8000936:	4618      	mov	r0, r3
 8000938:	f006 f9dc 	bl	8006cf4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800093c:	463b      	mov	r3, r7
 800093e:	2200      	movs	r2, #0
 8000940:	601a      	str	r2, [r3, #0]
 8000942:	605a      	str	r2, [r3, #4]
 8000944:	609a      	str	r2, [r3, #8]
 8000946:	60da      	str	r2, [r3, #12]
 8000948:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800094a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800094e:	f001 f829 	bl	80019a4 <HAL_PWREx_ControlVoltageScaling>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000958:	f000 f84a 	bl	80009f0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800095c:	2302      	movs	r3, #2
 800095e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000960:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000964:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000966:	2310      	movs	r3, #16
 8000968:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800096a:	2302      	movs	r3, #2
 800096c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800096e:	2302      	movs	r3, #2
 8000970:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000972:	2301      	movs	r3, #1
 8000974:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000976:	230a      	movs	r3, #10
 8000978:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800097a:	2307      	movs	r3, #7
 800097c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800097e:	2302      	movs	r3, #2
 8000980:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000982:	2302      	movs	r3, #2
 8000984:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000986:	f107 0314 	add.w	r3, r7, #20
 800098a:	4618      	mov	r0, r3
 800098c:	f001 f860 	bl	8001a50 <HAL_RCC_OscConfig>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000996:	f000 f82b 	bl	80009f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800099a:	230f      	movs	r3, #15
 800099c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800099e:	2303      	movs	r3, #3
 80009a0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009a2:	2300      	movs	r3, #0
 80009a4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009a6:	2300      	movs	r3, #0
 80009a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009aa:	2300      	movs	r3, #0
 80009ac:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80009ae:	463b      	mov	r3, r7
 80009b0:	2104      	movs	r1, #4
 80009b2:	4618      	mov	r0, r3
 80009b4:	f001 fc28 	bl	8002208 <HAL_RCC_ClockConfig>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80009be:	f000 f817 	bl	80009f0 <Error_Handler>
  }
}
 80009c2:	bf00      	nop
 80009c4:	3758      	adds	r7, #88	; 0x58
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
	...

080009cc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a04      	ldr	r2, [pc, #16]	; (80009ec <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d101      	bne.n	80009e2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009de:	f000 fcd3 	bl	8001388 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009e2:	bf00      	nop
 80009e4:	3708      	adds	r7, #8
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40012c00 	.word	0x40012c00

080009f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009f4:	b672      	cpsid	i
}
 80009f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009f8:	e7fe      	b.n	80009f8 <Error_Handler+0x8>
	...

080009fc <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8000a00:	4b1b      	ldr	r3, [pc, #108]	; (8000a70 <MX_SPI3_Init+0x74>)
 8000a02:	4a1c      	ldr	r2, [pc, #112]	; (8000a74 <MX_SPI3_Init+0x78>)
 8000a04:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000a06:	4b1a      	ldr	r3, [pc, #104]	; (8000a70 <MX_SPI3_Init+0x74>)
 8000a08:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a0c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_1LINE;
 8000a0e:	4b18      	ldr	r3, [pc, #96]	; (8000a70 <MX_SPI3_Init+0x74>)
 8000a10:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000a14:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a16:	4b16      	ldr	r3, [pc, #88]	; (8000a70 <MX_SPI3_Init+0x74>)
 8000a18:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000a1c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a1e:	4b14      	ldr	r3, [pc, #80]	; (8000a70 <MX_SPI3_Init+0x74>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a24:	4b12      	ldr	r3, [pc, #72]	; (8000a70 <MX_SPI3_Init+0x74>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000a2a:	4b11      	ldr	r3, [pc, #68]	; (8000a70 <MX_SPI3_Init+0x74>)
 8000a2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a30:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000a32:	4b0f      	ldr	r3, [pc, #60]	; (8000a70 <MX_SPI3_Init+0x74>)
 8000a34:	2230      	movs	r2, #48	; 0x30
 8000a36:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a38:	4b0d      	ldr	r3, [pc, #52]	; (8000a70 <MX_SPI3_Init+0x74>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a3e:	4b0c      	ldr	r3, [pc, #48]	; (8000a70 <MX_SPI3_Init+0x74>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a44:	4b0a      	ldr	r3, [pc, #40]	; (8000a70 <MX_SPI3_Init+0x74>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000a4a:	4b09      	ldr	r3, [pc, #36]	; (8000a70 <MX_SPI3_Init+0x74>)
 8000a4c:	2207      	movs	r2, #7
 8000a4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a50:	4b07      	ldr	r3, [pc, #28]	; (8000a70 <MX_SPI3_Init+0x74>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a56:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <MX_SPI3_Init+0x74>)
 8000a58:	2208      	movs	r2, #8
 8000a5a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000a5c:	4804      	ldr	r0, [pc, #16]	; (8000a70 <MX_SPI3_Init+0x74>)
 8000a5e:	f001 fe13 	bl	8002688 <HAL_SPI_Init>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_SPI3_Init+0x70>
  {
    Error_Handler();
 8000a68:	f7ff ffc2 	bl	80009f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000a6c:	bf00      	nop
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	200000cc 	.word	0x200000cc
 8000a74:	40003c00 	.word	0x40003c00

08000a78 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b08a      	sub	sp, #40	; 0x28
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a80:	f107 0314 	add.w	r3, r7, #20
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	605a      	str	r2, [r3, #4]
 8000a8a:	609a      	str	r2, [r3, #8]
 8000a8c:	60da      	str	r2, [r3, #12]
 8000a8e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a25      	ldr	r2, [pc, #148]	; (8000b2c <HAL_SPI_MspInit+0xb4>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d144      	bne.n	8000b24 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000a9a:	4b25      	ldr	r3, [pc, #148]	; (8000b30 <HAL_SPI_MspInit+0xb8>)
 8000a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a9e:	4a24      	ldr	r2, [pc, #144]	; (8000b30 <HAL_SPI_MspInit+0xb8>)
 8000aa0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000aa4:	6593      	str	r3, [r2, #88]	; 0x58
 8000aa6:	4b22      	ldr	r3, [pc, #136]	; (8000b30 <HAL_SPI_MspInit+0xb8>)
 8000aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aaa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000aae:	613b      	str	r3, [r7, #16]
 8000ab0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab2:	4b1f      	ldr	r3, [pc, #124]	; (8000b30 <HAL_SPI_MspInit+0xb8>)
 8000ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab6:	4a1e      	ldr	r2, [pc, #120]	; (8000b30 <HAL_SPI_MspInit+0xb8>)
 8000ab8:	f043 0304 	orr.w	r3, r3, #4
 8000abc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000abe:	4b1c      	ldr	r3, [pc, #112]	; (8000b30 <HAL_SPI_MspInit+0xb8>)
 8000ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac2:	f003 0304 	and.w	r3, r3, #4
 8000ac6:	60fb      	str	r3, [r7, #12]
 8000ac8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aca:	4b19      	ldr	r3, [pc, #100]	; (8000b30 <HAL_SPI_MspInit+0xb8>)
 8000acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ace:	4a18      	ldr	r2, [pc, #96]	; (8000b30 <HAL_SPI_MspInit+0xb8>)
 8000ad0:	f043 0302 	orr.w	r3, r3, #2
 8000ad4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ad6:	4b16      	ldr	r3, [pc, #88]	; (8000b30 <HAL_SPI_MspInit+0xb8>)
 8000ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ada:	f003 0302 	and.w	r3, r3, #2
 8000ade:	60bb      	str	r3, [r7, #8]
 8000ae0:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = SCHP_Pin;
 8000ae2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ae6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aec:	2300      	movs	r3, #0
 8000aee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af0:	2303      	movs	r3, #3
 8000af2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000af4:	2306      	movs	r3, #6
 8000af6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SCHP_GPIO_Port, &GPIO_InitStruct);
 8000af8:	f107 0314 	add.w	r3, r7, #20
 8000afc:	4619      	mov	r1, r3
 8000afe:	480d      	ldr	r0, [pc, #52]	; (8000b34 <HAL_SPI_MspInit+0xbc>)
 8000b00:	f000 fd68 	bl	80015d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000b04:	2320      	movs	r3, #32
 8000b06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b10:	2303      	movs	r3, #3
 8000b12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b14:	2306      	movs	r3, #6
 8000b16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b18:	f107 0314 	add.w	r3, r7, #20
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	4806      	ldr	r0, [pc, #24]	; (8000b38 <HAL_SPI_MspInit+0xc0>)
 8000b20:	f000 fd58 	bl	80015d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000b24:	bf00      	nop
 8000b26:	3728      	adds	r7, #40	; 0x28
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	40003c00 	.word	0x40003c00
 8000b30:	40021000 	.word	0x40021000
 8000b34:	48000800 	.word	0x48000800
 8000b38:	48000400 	.word	0x48000400

08000b3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b42:	4b11      	ldr	r3, [pc, #68]	; (8000b88 <HAL_MspInit+0x4c>)
 8000b44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b46:	4a10      	ldr	r2, [pc, #64]	; (8000b88 <HAL_MspInit+0x4c>)
 8000b48:	f043 0301 	orr.w	r3, r3, #1
 8000b4c:	6613      	str	r3, [r2, #96]	; 0x60
 8000b4e:	4b0e      	ldr	r3, [pc, #56]	; (8000b88 <HAL_MspInit+0x4c>)
 8000b50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b52:	f003 0301 	and.w	r3, r3, #1
 8000b56:	607b      	str	r3, [r7, #4]
 8000b58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b5a:	4b0b      	ldr	r3, [pc, #44]	; (8000b88 <HAL_MspInit+0x4c>)
 8000b5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b5e:	4a0a      	ldr	r2, [pc, #40]	; (8000b88 <HAL_MspInit+0x4c>)
 8000b60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b64:	6593      	str	r3, [r2, #88]	; 0x58
 8000b66:	4b08      	ldr	r3, [pc, #32]	; (8000b88 <HAL_MspInit+0x4c>)
 8000b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b6e:	603b      	str	r3, [r7, #0]
 8000b70:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b72:	2200      	movs	r2, #0
 8000b74:	210f      	movs	r1, #15
 8000b76:	f06f 0001 	mvn.w	r0, #1
 8000b7a:	f000 fd01 	bl	8001580 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b7e:	bf00      	nop
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40021000 	.word	0x40021000

08000b8c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b08c      	sub	sp, #48	; 0x30
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000b94:	2300      	movs	r3, #0
 8000b96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000b9a:	4b2e      	ldr	r3, [pc, #184]	; (8000c54 <HAL_InitTick+0xc8>)
 8000b9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b9e:	4a2d      	ldr	r2, [pc, #180]	; (8000c54 <HAL_InitTick+0xc8>)
 8000ba0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ba4:	6613      	str	r3, [r2, #96]	; 0x60
 8000ba6:	4b2b      	ldr	r3, [pc, #172]	; (8000c54 <HAL_InitTick+0xc8>)
 8000ba8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000baa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000bae:	60bb      	str	r3, [r7, #8]
 8000bb0:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bb2:	f107 020c 	add.w	r2, r7, #12
 8000bb6:	f107 0310 	add.w	r3, r7, #16
 8000bba:	4611      	mov	r1, r2
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f001 fcd1 	bl	8002564 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000bc2:	f001 fcb9 	bl	8002538 <HAL_RCC_GetPCLK2Freq>
 8000bc6:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bca:	4a23      	ldr	r2, [pc, #140]	; (8000c58 <HAL_InitTick+0xcc>)
 8000bcc:	fba2 2303 	umull	r2, r3, r2, r3
 8000bd0:	0c9b      	lsrs	r3, r3, #18
 8000bd2:	3b01      	subs	r3, #1
 8000bd4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000bd6:	4b21      	ldr	r3, [pc, #132]	; (8000c5c <HAL_InitTick+0xd0>)
 8000bd8:	4a21      	ldr	r2, [pc, #132]	; (8000c60 <HAL_InitTick+0xd4>)
 8000bda:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000bdc:	4b1f      	ldr	r3, [pc, #124]	; (8000c5c <HAL_InitTick+0xd0>)
 8000bde:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000be2:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000be4:	4a1d      	ldr	r2, [pc, #116]	; (8000c5c <HAL_InitTick+0xd0>)
 8000be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000be8:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000bea:	4b1c      	ldr	r3, [pc, #112]	; (8000c5c <HAL_InitTick+0xd0>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bf0:	4b1a      	ldr	r3, [pc, #104]	; (8000c5c <HAL_InitTick+0xd0>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bf6:	4b19      	ldr	r3, [pc, #100]	; (8000c5c <HAL_InitTick+0xd0>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000bfc:	4817      	ldr	r0, [pc, #92]	; (8000c5c <HAL_InitTick+0xd0>)
 8000bfe:	f002 f8b9 	bl	8002d74 <HAL_TIM_Base_Init>
 8000c02:	4603      	mov	r3, r0
 8000c04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000c08:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d11b      	bne.n	8000c48 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000c10:	4812      	ldr	r0, [pc, #72]	; (8000c5c <HAL_InitTick+0xd0>)
 8000c12:	f002 f911 	bl	8002e38 <HAL_TIM_Base_Start_IT>
 8000c16:	4603      	mov	r3, r0
 8000c18:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000c1c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d111      	bne.n	8000c48 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000c24:	2019      	movs	r0, #25
 8000c26:	f000 fcc7 	bl	80015b8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	2b0f      	cmp	r3, #15
 8000c2e:	d808      	bhi.n	8000c42 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8000c30:	2200      	movs	r2, #0
 8000c32:	6879      	ldr	r1, [r7, #4]
 8000c34:	2019      	movs	r0, #25
 8000c36:	f000 fca3 	bl	8001580 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c3a:	4a0a      	ldr	r2, [pc, #40]	; (8000c64 <HAL_InitTick+0xd8>)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	6013      	str	r3, [r2, #0]
 8000c40:	e002      	b.n	8000c48 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8000c42:	2301      	movs	r3, #1
 8000c44:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000c48:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	3730      	adds	r7, #48	; 0x30
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	40021000 	.word	0x40021000
 8000c58:	431bde83 	.word	0x431bde83
 8000c5c:	20000130 	.word	0x20000130
 8000c60:	40012c00 	.word	0x40012c00
 8000c64:	2000001c 	.word	0x2000001c

08000c68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c6c:	e7fe      	b.n	8000c6c <NMI_Handler+0x4>

08000c6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c6e:	b480      	push	{r7}
 8000c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c72:	e7fe      	b.n	8000c72 <HardFault_Handler+0x4>

08000c74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c78:	e7fe      	b.n	8000c78 <MemManage_Handler+0x4>

08000c7a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c7a:	b480      	push	{r7}
 8000c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c7e:	e7fe      	b.n	8000c7e <BusFault_Handler+0x4>

08000c80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c84:	e7fe      	b.n	8000c84 <UsageFault_Handler+0x4>

08000c86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c86:	b480      	push	{r7}
 8000c88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr

08000c94 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c98:	4802      	ldr	r0, [pc, #8]	; (8000ca4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000c9a:	f002 f93d 	bl	8002f18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	20000130 	.word	0x20000130

08000ca8 <Led_Clear>:
#include "spi.h"


uint32_t led[] = {0b000000000000000000000000000000000};

void Led_Clear(void){
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
	led[0] = 0x00000000;
 8000cac:	4b04      	ldr	r3, [pc, #16]	; (8000cc0 <Led_Clear+0x18>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	601a      	str	r2, [r3, #0]
	sendSPIdata(&led[0], 3);
 8000cb2:	2103      	movs	r1, #3
 8000cb4:	4802      	ldr	r0, [pc, #8]	; (8000cc0 <Led_Clear+0x18>)
 8000cb6:	f000 fae9 	bl	800128c <sendSPIdata>
}
 8000cba:	bf00      	nop
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	2000017c 	.word	0x2000017c

08000cc4 <Blue_Clear1>:

void Blue_Clear1(void){
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
	led[0]&= ~(1 << 13);
 8000cc8:	4b05      	ldr	r3, [pc, #20]	; (8000ce0 <Blue_Clear1+0x1c>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000cd0:	4a03      	ldr	r2, [pc, #12]	; (8000ce0 <Blue_Clear1+0x1c>)
 8000cd2:	6013      	str	r3, [r2, #0]
	sendSPIdata(&led[0], 3);
 8000cd4:	2103      	movs	r1, #3
 8000cd6:	4802      	ldr	r0, [pc, #8]	; (8000ce0 <Blue_Clear1+0x1c>)
 8000cd8:	f000 fad8 	bl	800128c <sendSPIdata>
	return;
 8000cdc:	bf00      	nop
}
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	2000017c 	.word	0x2000017c

08000ce4 <Blue_Clear2>:
void Blue_Clear2(void){
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
	led[0]&= ~(1 << 21);
 8000ce8:	4b05      	ldr	r3, [pc, #20]	; (8000d00 <Blue_Clear2+0x1c>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000cf0:	4a03      	ldr	r2, [pc, #12]	; (8000d00 <Blue_Clear2+0x1c>)
 8000cf2:	6013      	str	r3, [r2, #0]
	sendSPIdata(&led[0], 3);
 8000cf4:	2103      	movs	r1, #3
 8000cf6:	4802      	ldr	r0, [pc, #8]	; (8000d00 <Blue_Clear2+0x1c>)
 8000cf8:	f000 fac8 	bl	800128c <sendSPIdata>
	return;
 8000cfc:	bf00      	nop
}
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	2000017c 	.word	0x2000017c

08000d04 <Led_Toggle>:

void Led_Toggle(uint8_t n, char state){
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	460a      	mov	r2, r1
 8000d0e:	71fb      	strb	r3, [r7, #7]
 8000d10:	4613      	mov	r3, r2
 8000d12:	71bb      	strb	r3, [r7, #6]

	switch(n){
 8000d14:	79fb      	ldrb	r3, [r7, #7]
 8000d16:	3b01      	subs	r3, #1
 8000d18:	2b05      	cmp	r3, #5
 8000d1a:	f200 8189 	bhi.w	8001030 <Led_Toggle+0x32c>
 8000d1e:	a201      	add	r2, pc, #4	; (adr r2, 8000d24 <Led_Toggle+0x20>)
 8000d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d24:	08000edb 	.word	0x08000edb
 8000d28:	08000e51 	.word	0x08000e51
 8000d2c:	08000d3d 	.word	0x08000d3d
 8000d30:	08000dc7 	.word	0x08000dc7
 8000d34:	08000fc3 	.word	0x08000fc3
 8000d38:	08000f65 	.word	0x08000f65
		case 3:
			switch(state){
 8000d3c:	79bb      	ldrb	r3, [r7, #6]
 8000d3e:	2b79      	cmp	r3, #121	; 0x79
 8000d40:	d01a      	beq.n	8000d78 <Led_Toggle+0x74>
 8000d42:	2b79      	cmp	r3, #121	; 0x79
 8000d44:	f300 8169 	bgt.w	800101a <Led_Toggle+0x316>
 8000d48:	2b67      	cmp	r3, #103	; 0x67
 8000d4a:	d002      	beq.n	8000d52 <Led_Toggle+0x4e>
 8000d4c:	2b72      	cmp	r3, #114	; 0x72
 8000d4e:	d026      	beq.n	8000d9e <Led_Toggle+0x9a>
				led[0]^= 1 << 0;
				led[0]&= ~(1 << 2);
				led[0]&= ~(1 << 1);
				break;
			}
			break;
 8000d50:	e163      	b.n	800101a <Led_Toggle+0x316>
				led[0]^= 1 << 2;
 8000d52:	4b90      	ldr	r3, [pc, #576]	; (8000f94 <Led_Toggle+0x290>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f083 0304 	eor.w	r3, r3, #4
 8000d5a:	4a8e      	ldr	r2, [pc, #568]	; (8000f94 <Led_Toggle+0x290>)
 8000d5c:	6013      	str	r3, [r2, #0]
				led[0]&= ~(1 << 1);
 8000d5e:	4b8d      	ldr	r3, [pc, #564]	; (8000f94 <Led_Toggle+0x290>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f023 0302 	bic.w	r3, r3, #2
 8000d66:	4a8b      	ldr	r2, [pc, #556]	; (8000f94 <Led_Toggle+0x290>)
 8000d68:	6013      	str	r3, [r2, #0]
				led[0]&= ~(1 << 0);
 8000d6a:	4b8a      	ldr	r3, [pc, #552]	; (8000f94 <Led_Toggle+0x290>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f023 0301 	bic.w	r3, r3, #1
 8000d72:	4a88      	ldr	r2, [pc, #544]	; (8000f94 <Led_Toggle+0x290>)
 8000d74:	6013      	str	r3, [r2, #0]
				break;
 8000d76:	e025      	b.n	8000dc4 <Led_Toggle+0xc0>
				led[0]^= 1 << 1;
 8000d78:	4b86      	ldr	r3, [pc, #536]	; (8000f94 <Led_Toggle+0x290>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f083 0302 	eor.w	r3, r3, #2
 8000d80:	4a84      	ldr	r2, [pc, #528]	; (8000f94 <Led_Toggle+0x290>)
 8000d82:	6013      	str	r3, [r2, #0]
				led[0]&= ~(1 << 2);
 8000d84:	4b83      	ldr	r3, [pc, #524]	; (8000f94 <Led_Toggle+0x290>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f023 0304 	bic.w	r3, r3, #4
 8000d8c:	4a81      	ldr	r2, [pc, #516]	; (8000f94 <Led_Toggle+0x290>)
 8000d8e:	6013      	str	r3, [r2, #0]
				led[0]&= ~(1 << 0);
 8000d90:	4b80      	ldr	r3, [pc, #512]	; (8000f94 <Led_Toggle+0x290>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f023 0301 	bic.w	r3, r3, #1
 8000d98:	4a7e      	ldr	r2, [pc, #504]	; (8000f94 <Led_Toggle+0x290>)
 8000d9a:	6013      	str	r3, [r2, #0]
				break;
 8000d9c:	e012      	b.n	8000dc4 <Led_Toggle+0xc0>
				led[0]^= 1 << 0;
 8000d9e:	4b7d      	ldr	r3, [pc, #500]	; (8000f94 <Led_Toggle+0x290>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f083 0301 	eor.w	r3, r3, #1
 8000da6:	4a7b      	ldr	r2, [pc, #492]	; (8000f94 <Led_Toggle+0x290>)
 8000da8:	6013      	str	r3, [r2, #0]
				led[0]&= ~(1 << 2);
 8000daa:	4b7a      	ldr	r3, [pc, #488]	; (8000f94 <Led_Toggle+0x290>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f023 0304 	bic.w	r3, r3, #4
 8000db2:	4a78      	ldr	r2, [pc, #480]	; (8000f94 <Led_Toggle+0x290>)
 8000db4:	6013      	str	r3, [r2, #0]
				led[0]&= ~(1 << 1);
 8000db6:	4b77      	ldr	r3, [pc, #476]	; (8000f94 <Led_Toggle+0x290>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f023 0302 	bic.w	r3, r3, #2
 8000dbe:	4a75      	ldr	r2, [pc, #468]	; (8000f94 <Led_Toggle+0x290>)
 8000dc0:	6013      	str	r3, [r2, #0]
				break;
 8000dc2:	bf00      	nop
			break;
 8000dc4:	e129      	b.n	800101a <Led_Toggle+0x316>
		case 4:
				switch(state){
 8000dc6:	79bb      	ldrb	r3, [r7, #6]
 8000dc8:	2b79      	cmp	r3, #121	; 0x79
 8000dca:	d01a      	beq.n	8000e02 <Led_Toggle+0xfe>
 8000dcc:	2b79      	cmp	r3, #121	; 0x79
 8000dce:	f300 8126 	bgt.w	800101e <Led_Toggle+0x31a>
 8000dd2:	2b67      	cmp	r3, #103	; 0x67
 8000dd4:	d002      	beq.n	8000ddc <Led_Toggle+0xd8>
 8000dd6:	2b72      	cmp	r3, #114	; 0x72
 8000dd8:	d026      	beq.n	8000e28 <Led_Toggle+0x124>
					led[0]^= 1 << 3;
					led[0]&= ~(1 << 5);
					led[0]&= ~(1 << 4);
					break;
				}
		break;
 8000dda:	e120      	b.n	800101e <Led_Toggle+0x31a>
					led[0]^= 1 << 5;
 8000ddc:	4b6d      	ldr	r3, [pc, #436]	; (8000f94 <Led_Toggle+0x290>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f083 0320 	eor.w	r3, r3, #32
 8000de4:	4a6b      	ldr	r2, [pc, #428]	; (8000f94 <Led_Toggle+0x290>)
 8000de6:	6013      	str	r3, [r2, #0]
					led[0]&= ~(1 << 4);
 8000de8:	4b6a      	ldr	r3, [pc, #424]	; (8000f94 <Led_Toggle+0x290>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f023 0310 	bic.w	r3, r3, #16
 8000df0:	4a68      	ldr	r2, [pc, #416]	; (8000f94 <Led_Toggle+0x290>)
 8000df2:	6013      	str	r3, [r2, #0]
					led[0]&= ~(1 << 3);
 8000df4:	4b67      	ldr	r3, [pc, #412]	; (8000f94 <Led_Toggle+0x290>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f023 0308 	bic.w	r3, r3, #8
 8000dfc:	4a65      	ldr	r2, [pc, #404]	; (8000f94 <Led_Toggle+0x290>)
 8000dfe:	6013      	str	r3, [r2, #0]
					break;
 8000e00:	e025      	b.n	8000e4e <Led_Toggle+0x14a>
					led[0]^= 1 << 4;
 8000e02:	4b64      	ldr	r3, [pc, #400]	; (8000f94 <Led_Toggle+0x290>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f083 0310 	eor.w	r3, r3, #16
 8000e0a:	4a62      	ldr	r2, [pc, #392]	; (8000f94 <Led_Toggle+0x290>)
 8000e0c:	6013      	str	r3, [r2, #0]
					led[0]&= ~(1 << 5);
 8000e0e:	4b61      	ldr	r3, [pc, #388]	; (8000f94 <Led_Toggle+0x290>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f023 0320 	bic.w	r3, r3, #32
 8000e16:	4a5f      	ldr	r2, [pc, #380]	; (8000f94 <Led_Toggle+0x290>)
 8000e18:	6013      	str	r3, [r2, #0]
					led[0]&= ~(1 << 3);
 8000e1a:	4b5e      	ldr	r3, [pc, #376]	; (8000f94 <Led_Toggle+0x290>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f023 0308 	bic.w	r3, r3, #8
 8000e22:	4a5c      	ldr	r2, [pc, #368]	; (8000f94 <Led_Toggle+0x290>)
 8000e24:	6013      	str	r3, [r2, #0]
					break;
 8000e26:	e012      	b.n	8000e4e <Led_Toggle+0x14a>
					led[0]^= 1 << 3;
 8000e28:	4b5a      	ldr	r3, [pc, #360]	; (8000f94 <Led_Toggle+0x290>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f083 0308 	eor.w	r3, r3, #8
 8000e30:	4a58      	ldr	r2, [pc, #352]	; (8000f94 <Led_Toggle+0x290>)
 8000e32:	6013      	str	r3, [r2, #0]
					led[0]&= ~(1 << 5);
 8000e34:	4b57      	ldr	r3, [pc, #348]	; (8000f94 <Led_Toggle+0x290>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f023 0320 	bic.w	r3, r3, #32
 8000e3c:	4a55      	ldr	r2, [pc, #340]	; (8000f94 <Led_Toggle+0x290>)
 8000e3e:	6013      	str	r3, [r2, #0]
					led[0]&= ~(1 << 4);
 8000e40:	4b54      	ldr	r3, [pc, #336]	; (8000f94 <Led_Toggle+0x290>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f023 0310 	bic.w	r3, r3, #16
 8000e48:	4a52      	ldr	r2, [pc, #328]	; (8000f94 <Led_Toggle+0x290>)
 8000e4a:	6013      	str	r3, [r2, #0]
					break;
 8000e4c:	bf00      	nop
		break;
 8000e4e:	e0e6      	b.n	800101e <Led_Toggle+0x31a>
		case 2:
			switch(state){
 8000e50:	79bb      	ldrb	r3, [r7, #6]
 8000e52:	2b79      	cmp	r3, #121	; 0x79
 8000e54:	d01a      	beq.n	8000e8c <Led_Toggle+0x188>
 8000e56:	2b79      	cmp	r3, #121	; 0x79
 8000e58:	f300 80e3 	bgt.w	8001022 <Led_Toggle+0x31e>
 8000e5c:	2b67      	cmp	r3, #103	; 0x67
 8000e5e:	d002      	beq.n	8000e66 <Led_Toggle+0x162>
 8000e60:	2b72      	cmp	r3, #114	; 0x72
 8000e62:	d026      	beq.n	8000eb2 <Led_Toggle+0x1ae>
				led[0]^= 1 << 8;
				led[0]&= ~(1 << 10);
				led[0]&= ~(1 << 9);
				break;
			}
		break;
 8000e64:	e0dd      	b.n	8001022 <Led_Toggle+0x31e>
				led[0]^= 1 << 10;
 8000e66:	4b4b      	ldr	r3, [pc, #300]	; (8000f94 <Led_Toggle+0x290>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f483 6380 	eor.w	r3, r3, #1024	; 0x400
 8000e6e:	4a49      	ldr	r2, [pc, #292]	; (8000f94 <Led_Toggle+0x290>)
 8000e70:	6013      	str	r3, [r2, #0]
				led[0]&= ~(1 << 9);
 8000e72:	4b48      	ldr	r3, [pc, #288]	; (8000f94 <Led_Toggle+0x290>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000e7a:	4a46      	ldr	r2, [pc, #280]	; (8000f94 <Led_Toggle+0x290>)
 8000e7c:	6013      	str	r3, [r2, #0]
				led[0]&= ~(1 << 8);
 8000e7e:	4b45      	ldr	r3, [pc, #276]	; (8000f94 <Led_Toggle+0x290>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000e86:	4a43      	ldr	r2, [pc, #268]	; (8000f94 <Led_Toggle+0x290>)
 8000e88:	6013      	str	r3, [r2, #0]
				break;
 8000e8a:	e025      	b.n	8000ed8 <Led_Toggle+0x1d4>
				led[0]^= 1 << 9;
 8000e8c:	4b41      	ldr	r3, [pc, #260]	; (8000f94 <Led_Toggle+0x290>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f483 7300 	eor.w	r3, r3, #512	; 0x200
 8000e94:	4a3f      	ldr	r2, [pc, #252]	; (8000f94 <Led_Toggle+0x290>)
 8000e96:	6013      	str	r3, [r2, #0]
				led[0]&= ~(1 << 8);
 8000e98:	4b3e      	ldr	r3, [pc, #248]	; (8000f94 <Led_Toggle+0x290>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000ea0:	4a3c      	ldr	r2, [pc, #240]	; (8000f94 <Led_Toggle+0x290>)
 8000ea2:	6013      	str	r3, [r2, #0]
				led[0]&= ~(1 << 10);
 8000ea4:	4b3b      	ldr	r3, [pc, #236]	; (8000f94 <Led_Toggle+0x290>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000eac:	4a39      	ldr	r2, [pc, #228]	; (8000f94 <Led_Toggle+0x290>)
 8000eae:	6013      	str	r3, [r2, #0]
				break;
 8000eb0:	e012      	b.n	8000ed8 <Led_Toggle+0x1d4>
				led[0]^= 1 << 8;
 8000eb2:	4b38      	ldr	r3, [pc, #224]	; (8000f94 <Led_Toggle+0x290>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f483 7380 	eor.w	r3, r3, #256	; 0x100
 8000eba:	4a36      	ldr	r2, [pc, #216]	; (8000f94 <Led_Toggle+0x290>)
 8000ebc:	6013      	str	r3, [r2, #0]
				led[0]&= ~(1 << 10);
 8000ebe:	4b35      	ldr	r3, [pc, #212]	; (8000f94 <Led_Toggle+0x290>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000ec6:	4a33      	ldr	r2, [pc, #204]	; (8000f94 <Led_Toggle+0x290>)
 8000ec8:	6013      	str	r3, [r2, #0]
				led[0]&= ~(1 << 9);
 8000eca:	4b32      	ldr	r3, [pc, #200]	; (8000f94 <Led_Toggle+0x290>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000ed2:	4a30      	ldr	r2, [pc, #192]	; (8000f94 <Led_Toggle+0x290>)
 8000ed4:	6013      	str	r3, [r2, #0]
				break;
 8000ed6:	bf00      	nop
		break;
 8000ed8:	e0a3      	b.n	8001022 <Led_Toggle+0x31e>
		case 1:
			switch(state){
 8000eda:	79bb      	ldrb	r3, [r7, #6]
 8000edc:	2b79      	cmp	r3, #121	; 0x79
 8000ede:	d01a      	beq.n	8000f16 <Led_Toggle+0x212>
 8000ee0:	2b79      	cmp	r3, #121	; 0x79
 8000ee2:	f300 80a0 	bgt.w	8001026 <Led_Toggle+0x322>
 8000ee6:	2b67      	cmp	r3, #103	; 0x67
 8000ee8:	d002      	beq.n	8000ef0 <Led_Toggle+0x1ec>
 8000eea:	2b72      	cmp	r3, #114	; 0x72
 8000eec:	d026      	beq.n	8000f3c <Led_Toggle+0x238>
				led[0]^= 1 << 16;
				led[0]&= ~(1 << 17);
				led[0]&= ~(1 << 18);
				break;
			}
		break;
 8000eee:	e09a      	b.n	8001026 <Led_Toggle+0x322>
				led[0]^= 1 << 18;
 8000ef0:	4b28      	ldr	r3, [pc, #160]	; (8000f94 <Led_Toggle+0x290>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f483 2380 	eor.w	r3, r3, #262144	; 0x40000
 8000ef8:	4a26      	ldr	r2, [pc, #152]	; (8000f94 <Led_Toggle+0x290>)
 8000efa:	6013      	str	r3, [r2, #0]
				led[0]&= ~(1 << 17);
 8000efc:	4b25      	ldr	r3, [pc, #148]	; (8000f94 <Led_Toggle+0x290>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000f04:	4a23      	ldr	r2, [pc, #140]	; (8000f94 <Led_Toggle+0x290>)
 8000f06:	6013      	str	r3, [r2, #0]
				led[0]&= ~(1 << 16);
 8000f08:	4b22      	ldr	r3, [pc, #136]	; (8000f94 <Led_Toggle+0x290>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f10:	4a20      	ldr	r2, [pc, #128]	; (8000f94 <Led_Toggle+0x290>)
 8000f12:	6013      	str	r3, [r2, #0]
				break;
 8000f14:	e025      	b.n	8000f62 <Led_Toggle+0x25e>
				led[0]^= 1 << 17;
 8000f16:	4b1f      	ldr	r3, [pc, #124]	; (8000f94 <Led_Toggle+0x290>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f483 3300 	eor.w	r3, r3, #131072	; 0x20000
 8000f1e:	4a1d      	ldr	r2, [pc, #116]	; (8000f94 <Led_Toggle+0x290>)
 8000f20:	6013      	str	r3, [r2, #0]
				led[0]&= ~(1 << 16);
 8000f22:	4b1c      	ldr	r3, [pc, #112]	; (8000f94 <Led_Toggle+0x290>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f2a:	4a1a      	ldr	r2, [pc, #104]	; (8000f94 <Led_Toggle+0x290>)
 8000f2c:	6013      	str	r3, [r2, #0]
				led[0]&= ~(1 << 18);
 8000f2e:	4b19      	ldr	r3, [pc, #100]	; (8000f94 <Led_Toggle+0x290>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f36:	4a17      	ldr	r2, [pc, #92]	; (8000f94 <Led_Toggle+0x290>)
 8000f38:	6013      	str	r3, [r2, #0]
				break;
 8000f3a:	e012      	b.n	8000f62 <Led_Toggle+0x25e>
				led[0]^= 1 << 16;
 8000f3c:	4b15      	ldr	r3, [pc, #84]	; (8000f94 <Led_Toggle+0x290>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f483 3380 	eor.w	r3, r3, #65536	; 0x10000
 8000f44:	4a13      	ldr	r2, [pc, #76]	; (8000f94 <Led_Toggle+0x290>)
 8000f46:	6013      	str	r3, [r2, #0]
				led[0]&= ~(1 << 17);
 8000f48:	4b12      	ldr	r3, [pc, #72]	; (8000f94 <Led_Toggle+0x290>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000f50:	4a10      	ldr	r2, [pc, #64]	; (8000f94 <Led_Toggle+0x290>)
 8000f52:	6013      	str	r3, [r2, #0]
				led[0]&= ~(1 << 18);
 8000f54:	4b0f      	ldr	r3, [pc, #60]	; (8000f94 <Led_Toggle+0x290>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f5c:	4a0d      	ldr	r2, [pc, #52]	; (8000f94 <Led_Toggle+0x290>)
 8000f5e:	6013      	str	r3, [r2, #0]
				break;
 8000f60:	bf00      	nop
		break;
 8000f62:	e060      	b.n	8001026 <Led_Toggle+0x322>
		case 6:
			switch(state){
 8000f64:	79bb      	ldrb	r3, [r7, #6]
 8000f66:	2b72      	cmp	r3, #114	; 0x72
 8000f68:	d006      	beq.n	8000f78 <Led_Toggle+0x274>
 8000f6a:	2b72      	cmp	r3, #114	; 0x72
 8000f6c:	dc5d      	bgt.n	800102a <Led_Toggle+0x326>
 8000f6e:	2b62      	cmp	r3, #98	; 0x62
 8000f70:	d01f      	beq.n	8000fb2 <Led_Toggle+0x2ae>
 8000f72:	2b67      	cmp	r3, #103	; 0x67
 8000f74:	d010      	beq.n	8000f98 <Led_Toggle+0x294>
				led[0]&= ~(1 << 11);
				break;
			case 'b':
				led[0]^= 1 << 13;
			}
			break;
 8000f76:	e058      	b.n	800102a <Led_Toggle+0x326>
				led[0]^= 1 << 11;
 8000f78:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <Led_Toggle+0x290>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f483 6300 	eor.w	r3, r3, #2048	; 0x800
 8000f80:	4a04      	ldr	r2, [pc, #16]	; (8000f94 <Led_Toggle+0x290>)
 8000f82:	6013      	str	r3, [r2, #0]
				led[0]&= ~(1 << 12);
 8000f84:	4b03      	ldr	r3, [pc, #12]	; (8000f94 <Led_Toggle+0x290>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000f8c:	4a01      	ldr	r2, [pc, #4]	; (8000f94 <Led_Toggle+0x290>)
 8000f8e:	6013      	str	r3, [r2, #0]
				break;
 8000f90:	e016      	b.n	8000fc0 <Led_Toggle+0x2bc>
 8000f92:	bf00      	nop
 8000f94:	2000017c 	.word	0x2000017c
				led[0]^= 1 << 12;
 8000f98:	4b28      	ldr	r3, [pc, #160]	; (800103c <Led_Toggle+0x338>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8000fa0:	4a26      	ldr	r2, [pc, #152]	; (800103c <Led_Toggle+0x338>)
 8000fa2:	6013      	str	r3, [r2, #0]
				led[0]&= ~(1 << 11);
 8000fa4:	4b25      	ldr	r3, [pc, #148]	; (800103c <Led_Toggle+0x338>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000fac:	4a23      	ldr	r2, [pc, #140]	; (800103c <Led_Toggle+0x338>)
 8000fae:	6013      	str	r3, [r2, #0]
				break;
 8000fb0:	e006      	b.n	8000fc0 <Led_Toggle+0x2bc>
				led[0]^= 1 << 13;
 8000fb2:	4b22      	ldr	r3, [pc, #136]	; (800103c <Led_Toggle+0x338>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8000fba:	4a20      	ldr	r2, [pc, #128]	; (800103c <Led_Toggle+0x338>)
 8000fbc:	6013      	str	r3, [r2, #0]
			break;
 8000fbe:	e034      	b.n	800102a <Led_Toggle+0x326>
 8000fc0:	e033      	b.n	800102a <Led_Toggle+0x326>
		case 5:
			switch(state){
 8000fc2:	79bb      	ldrb	r3, [r7, #6]
 8000fc4:	2b72      	cmp	r3, #114	; 0x72
 8000fc6:	d006      	beq.n	8000fd6 <Led_Toggle+0x2d2>
 8000fc8:	2b72      	cmp	r3, #114	; 0x72
 8000fca:	dc30      	bgt.n	800102e <Led_Toggle+0x32a>
 8000fcc:	2b62      	cmp	r3, #98	; 0x62
 8000fce:	d01c      	beq.n	800100a <Led_Toggle+0x306>
 8000fd0:	2b67      	cmp	r3, #103	; 0x67
 8000fd2:	d00d      	beq.n	8000ff0 <Led_Toggle+0x2ec>
				led[0]&= ~(1 << 19);
				break;
			case 'b':
				led[0]^= 1 << 21;
			}
			break;
 8000fd4:	e02b      	b.n	800102e <Led_Toggle+0x32a>
				led[0]^= 1 << 19;
 8000fd6:	4b19      	ldr	r3, [pc, #100]	; (800103c <Led_Toggle+0x338>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f483 2300 	eor.w	r3, r3, #524288	; 0x80000
 8000fde:	4a17      	ldr	r2, [pc, #92]	; (800103c <Led_Toggle+0x338>)
 8000fe0:	6013      	str	r3, [r2, #0]
				led[0]&= ~(1 << 20);
 8000fe2:	4b16      	ldr	r3, [pc, #88]	; (800103c <Led_Toggle+0x338>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000fea:	4a14      	ldr	r2, [pc, #80]	; (800103c <Led_Toggle+0x338>)
 8000fec:	6013      	str	r3, [r2, #0]
				break;
 8000fee:	e013      	b.n	8001018 <Led_Toggle+0x314>
				led[0]^= 1 << 20;
 8000ff0:	4b12      	ldr	r3, [pc, #72]	; (800103c <Led_Toggle+0x338>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000ff8:	4a10      	ldr	r2, [pc, #64]	; (800103c <Led_Toggle+0x338>)
 8000ffa:	6013      	str	r3, [r2, #0]
				led[0]&= ~(1 << 19);
 8000ffc:	4b0f      	ldr	r3, [pc, #60]	; (800103c <Led_Toggle+0x338>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001004:	4a0d      	ldr	r2, [pc, #52]	; (800103c <Led_Toggle+0x338>)
 8001006:	6013      	str	r3, [r2, #0]
				break;
 8001008:	e006      	b.n	8001018 <Led_Toggle+0x314>
				led[0]^= 1 << 21;
 800100a:	4b0c      	ldr	r3, [pc, #48]	; (800103c <Led_Toggle+0x338>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f483 1300 	eor.w	r3, r3, #2097152	; 0x200000
 8001012:	4a0a      	ldr	r2, [pc, #40]	; (800103c <Led_Toggle+0x338>)
 8001014:	6013      	str	r3, [r2, #0]
			break;
 8001016:	e00a      	b.n	800102e <Led_Toggle+0x32a>
 8001018:	e009      	b.n	800102e <Led_Toggle+0x32a>
			break;
 800101a:	bf00      	nop
 800101c:	e008      	b.n	8001030 <Led_Toggle+0x32c>
		break;
 800101e:	bf00      	nop
 8001020:	e006      	b.n	8001030 <Led_Toggle+0x32c>
		break;
 8001022:	bf00      	nop
 8001024:	e004      	b.n	8001030 <Led_Toggle+0x32c>
		break;
 8001026:	bf00      	nop
 8001028:	e002      	b.n	8001030 <Led_Toggle+0x32c>
			break;
 800102a:	bf00      	nop
 800102c:	e000      	b.n	8001030 <Led_Toggle+0x32c>
			break;
 800102e:	bf00      	nop
	}



}
 8001030:	bf00      	nop
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr
 800103c:	2000017c 	.word	0x2000017c

08001040 <Flash_Led>:

void Flash_Led(uint8_t n, char state, uint8_t delay, uint8_t times){
 8001040:	b590      	push	{r4, r7, lr}
 8001042:	b085      	sub	sp, #20
 8001044:	af00      	add	r7, sp, #0
 8001046:	4604      	mov	r4, r0
 8001048:	4608      	mov	r0, r1
 800104a:	4611      	mov	r1, r2
 800104c:	461a      	mov	r2, r3
 800104e:	4623      	mov	r3, r4
 8001050:	71fb      	strb	r3, [r7, #7]
 8001052:	4603      	mov	r3, r0
 8001054:	71bb      	strb	r3, [r7, #6]
 8001056:	460b      	mov	r3, r1
 8001058:	717b      	strb	r3, [r7, #5]
 800105a:	4613      	mov	r3, r2
 800105c:	713b      	strb	r3, [r7, #4]
	for(int i = 0; i <= times; i++){
 800105e:	2300      	movs	r3, #0
 8001060:	60fb      	str	r3, [r7, #12]
 8001062:	e00c      	b.n	800107e <Flash_Led+0x3e>
		Led_Toggle(n, state);
 8001064:	79ba      	ldrb	r2, [r7, #6]
 8001066:	79fb      	ldrb	r3, [r7, #7]
 8001068:	4611      	mov	r1, r2
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff fe4a 	bl	8000d04 <Led_Toggle>
		//sendSPIdata(&led[0], 3);
		HAL_Delay(delay);
 8001070:	797b      	ldrb	r3, [r7, #5]
 8001072:	4618      	mov	r0, r3
 8001074:	f000 f9a8 	bl	80013c8 <HAL_Delay>
	for(int i = 0; i <= times; i++){
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	3301      	adds	r3, #1
 800107c:	60fb      	str	r3, [r7, #12]
 800107e:	793b      	ldrb	r3, [r7, #4]
 8001080:	68fa      	ldr	r2, [r7, #12]
 8001082:	429a      	cmp	r2, r3
 8001084:	ddee      	ble.n	8001064 <Flash_Led+0x24>
	}
	Led_Toggle(n, state);
 8001086:	79ba      	ldrb	r2, [r7, #6]
 8001088:	79fb      	ldrb	r3, [r7, #7]
 800108a:	4611      	mov	r1, r2
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff fe39 	bl	8000d04 <Led_Toggle>
	sendSPIdata(&led[0], 3);
 8001092:	2103      	movs	r1, #3
 8001094:	4803      	ldr	r0, [pc, #12]	; (80010a4 <Flash_Led+0x64>)
 8001096:	f000 f8f9 	bl	800128c <sendSPIdata>

}
 800109a:	bf00      	nop
 800109c:	3714      	adds	r7, #20
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd90      	pop	{r4, r7, pc}
 80010a2:	bf00      	nop
 80010a4:	2000017c 	.word	0x2000017c

080010a8 <States>:

void States(uint8_t state){
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	71fb      	strb	r3, [r7, #7]
	switch(state){
 80010b2:	79fb      	ldrb	r3, [r7, #7]
 80010b4:	2b03      	cmp	r3, #3
 80010b6:	d061      	beq.n	800117c <States+0xd4>
 80010b8:	2b03      	cmp	r3, #3
 80010ba:	f300 808c 	bgt.w	80011d6 <States+0x12e>
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d002      	beq.n	80010c8 <States+0x20>
 80010c2:	2b02      	cmp	r3, #2
 80010c4:	d02d      	beq.n	8001122 <States+0x7a>
		sendSPIdata(&led[0], 3);

		break;
	}
	}
}
 80010c6:	e086      	b.n	80011d6 <States+0x12e>
		led[0] |= 1 << 11;
 80010c8:	4b45      	ldr	r3, [pc, #276]	; (80011e0 <States+0x138>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80010d0:	4a43      	ldr	r2, [pc, #268]	; (80011e0 <States+0x138>)
 80010d2:	6013      	str	r3, [r2, #0]
		led[0]&= ~(1 << 12);
 80010d4:	4b42      	ldr	r3, [pc, #264]	; (80011e0 <States+0x138>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80010dc:	4a40      	ldr	r2, [pc, #256]	; (80011e0 <States+0x138>)
 80010de:	6013      	str	r3, [r2, #0]
		led[0] |= 1 << 20;
 80010e0:	4b3f      	ldr	r3, [pc, #252]	; (80011e0 <States+0x138>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80010e8:	4a3d      	ldr	r2, [pc, #244]	; (80011e0 <States+0x138>)
 80010ea:	6013      	str	r3, [r2, #0]
		led[0]&= ~(1 << 19);
 80010ec:	4b3c      	ldr	r3, [pc, #240]	; (80011e0 <States+0x138>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80010f4:	4a3a      	ldr	r2, [pc, #232]	; (80011e0 <States+0x138>)
 80010f6:	6013      	str	r3, [r2, #0]
		Led_Toggle(1, 'r');
 80010f8:	2172      	movs	r1, #114	; 0x72
 80010fa:	2001      	movs	r0, #1
 80010fc:	f7ff fe02 	bl	8000d04 <Led_Toggle>
		Led_Toggle(2, 'g');
 8001100:	2167      	movs	r1, #103	; 0x67
 8001102:	2002      	movs	r0, #2
 8001104:	f7ff fdfe 	bl	8000d04 <Led_Toggle>
		Led_Toggle(3, 'r');
 8001108:	2172      	movs	r1, #114	; 0x72
 800110a:	2003      	movs	r0, #3
 800110c:	f7ff fdfa 	bl	8000d04 <Led_Toggle>
		Led_Toggle(4, 'g');
 8001110:	2167      	movs	r1, #103	; 0x67
 8001112:	2004      	movs	r0, #4
 8001114:	f7ff fdf6 	bl	8000d04 <Led_Toggle>
		sendSPIdata(&led[0], 3);
 8001118:	2103      	movs	r1, #3
 800111a:	4831      	ldr	r0, [pc, #196]	; (80011e0 <States+0x138>)
 800111c:	f000 f8b6 	bl	800128c <sendSPIdata>
	break;
 8001120:	e059      	b.n	80011d6 <States+0x12e>
		led[0] |= 1 << 19;
 8001122:	4b2f      	ldr	r3, [pc, #188]	; (80011e0 <States+0x138>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800112a:	4a2d      	ldr	r2, [pc, #180]	; (80011e0 <States+0x138>)
 800112c:	6013      	str	r3, [r2, #0]
		led[0]&= ~(1 << 20);
 800112e:	4b2c      	ldr	r3, [pc, #176]	; (80011e0 <States+0x138>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001136:	4a2a      	ldr	r2, [pc, #168]	; (80011e0 <States+0x138>)
 8001138:	6013      	str	r3, [r2, #0]
		led[0] |= 1 << 12;
 800113a:	4b29      	ldr	r3, [pc, #164]	; (80011e0 <States+0x138>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001142:	4a27      	ldr	r2, [pc, #156]	; (80011e0 <States+0x138>)
 8001144:	6013      	str	r3, [r2, #0]
		led[0]&= ~(1 << 11);
 8001146:	4b26      	ldr	r3, [pc, #152]	; (80011e0 <States+0x138>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800114e:	4a24      	ldr	r2, [pc, #144]	; (80011e0 <States+0x138>)
 8001150:	6013      	str	r3, [r2, #0]
		Led_Toggle(1, 'g');
 8001152:	2167      	movs	r1, #103	; 0x67
 8001154:	2001      	movs	r0, #1
 8001156:	f7ff fdd5 	bl	8000d04 <Led_Toggle>
		Led_Toggle(2, 'r');
 800115a:	2172      	movs	r1, #114	; 0x72
 800115c:	2002      	movs	r0, #2
 800115e:	f7ff fdd1 	bl	8000d04 <Led_Toggle>
		Led_Toggle(3, 'g');
 8001162:	2167      	movs	r1, #103	; 0x67
 8001164:	2003      	movs	r0, #3
 8001166:	f7ff fdcd 	bl	8000d04 <Led_Toggle>
		Led_Toggle(4, 'r');
 800116a:	2172      	movs	r1, #114	; 0x72
 800116c:	2004      	movs	r0, #4
 800116e:	f7ff fdc9 	bl	8000d04 <Led_Toggle>
		sendSPIdata(&led[0], 3);
 8001172:	2103      	movs	r1, #3
 8001174:	481a      	ldr	r0, [pc, #104]	; (80011e0 <States+0x138>)
 8001176:	f000 f889 	bl	800128c <sendSPIdata>
		break;
 800117a:	e02c      	b.n	80011d6 <States+0x12e>
		led[0] |= 1 << 19;
 800117c:	4b18      	ldr	r3, [pc, #96]	; (80011e0 <States+0x138>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001184:	4a16      	ldr	r2, [pc, #88]	; (80011e0 <States+0x138>)
 8001186:	6013      	str	r3, [r2, #0]
		led[0]&= ~(1 << 20);
 8001188:	4b15      	ldr	r3, [pc, #84]	; (80011e0 <States+0x138>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001190:	4a13      	ldr	r2, [pc, #76]	; (80011e0 <States+0x138>)
 8001192:	6013      	str	r3, [r2, #0]
		led[0] |= 1 << 11;
 8001194:	4b12      	ldr	r3, [pc, #72]	; (80011e0 <States+0x138>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800119c:	4a10      	ldr	r2, [pc, #64]	; (80011e0 <States+0x138>)
 800119e:	6013      	str	r3, [r2, #0]
		led[0]&= ~(1 << 12);
 80011a0:	4b0f      	ldr	r3, [pc, #60]	; (80011e0 <States+0x138>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80011a8:	4a0d      	ldr	r2, [pc, #52]	; (80011e0 <States+0x138>)
 80011aa:	6013      	str	r3, [r2, #0]
		Led_Toggle(1, 'y');
 80011ac:	2179      	movs	r1, #121	; 0x79
 80011ae:	2001      	movs	r0, #1
 80011b0:	f7ff fda8 	bl	8000d04 <Led_Toggle>
		Led_Toggle(2, 'y');
 80011b4:	2179      	movs	r1, #121	; 0x79
 80011b6:	2002      	movs	r0, #2
 80011b8:	f7ff fda4 	bl	8000d04 <Led_Toggle>
		Led_Toggle(3, 'y');
 80011bc:	2179      	movs	r1, #121	; 0x79
 80011be:	2003      	movs	r0, #3
 80011c0:	f7ff fda0 	bl	8000d04 <Led_Toggle>
		Led_Toggle(4, 'y');
 80011c4:	2179      	movs	r1, #121	; 0x79
 80011c6:	2004      	movs	r0, #4
 80011c8:	f7ff fd9c 	bl	8000d04 <Led_Toggle>
		sendSPIdata(&led[0], 3);
 80011cc:	2103      	movs	r1, #3
 80011ce:	4804      	ldr	r0, [pc, #16]	; (80011e0 <States+0x138>)
 80011d0:	f000 f85c 	bl	800128c <sendSPIdata>
		break;
 80011d4:	bf00      	nop
}
 80011d6:	bf00      	nop
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	2000017c 	.word	0x2000017c

080011e4 <Crossing_Button2>:


bool Crossing_Button2(void){
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
	if ((HAL_GPIO_ReadPin(PL1_Switch_GPIO_Port, PL1_Switch_Pin)) == 0){
 80011e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011f0:	f000 fb9a 	bl	8001928 <HAL_GPIO_ReadPin>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d101      	bne.n	80011fe <Crossing_Button2+0x1a>
		return true;
 80011fa:	2301      	movs	r3, #1
 80011fc:	e000      	b.n	8001200 <Crossing_Button2+0x1c>
	}
	else
		return false;
 80011fe:	2300      	movs	r3, #0
}
 8001200:	4618      	mov	r0, r3
 8001202:	bd80      	pop	{r7, pc}

08001204 <Crossing_Button1>:

bool Crossing_Button1(void){
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
	if ((HAL_GPIO_ReadPin(PL2_Switch_GPIO_Port, PL2_Switch_Pin)) == 0){
 8001208:	2180      	movs	r1, #128	; 0x80
 800120a:	4805      	ldr	r0, [pc, #20]	; (8001220 <Crossing_Button1+0x1c>)
 800120c:	f000 fb8c 	bl	8001928 <HAL_GPIO_ReadPin>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d101      	bne.n	800121a <Crossing_Button1+0x16>
		return true;
 8001216:	2301      	movs	r3, #1
 8001218:	e000      	b.n	800121c <Crossing_Button1+0x18>
	}
	else
		return false;
 800121a:	2300      	movs	r3, #0
}
 800121c:	4618      	mov	r0, r3
 800121e:	bd80      	pop	{r7, pc}
 8001220:	48000400 	.word	0x48000400

08001224 <Car_Vertical>:

bool Car_Vertical(void){
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
	if ((HAL_GPIO_ReadPin(TL2_Car_GPIO_Port, TL2_Car_Pin)) == 0 || (HAL_GPIO_ReadPin(TL4_Car_GPIO_Port, TL4_Car_Pin)) == 0){
 8001228:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800122c:	4809      	ldr	r0, [pc, #36]	; (8001254 <Car_Vertical+0x30>)
 800122e:	f000 fb7b 	bl	8001928 <HAL_GPIO_ReadPin>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d008      	beq.n	800124a <Car_Vertical+0x26>
 8001238:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800123c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001240:	f000 fb72 	bl	8001928 <HAL_GPIO_ReadPin>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d101      	bne.n	800124e <Car_Vertical+0x2a>
		return true;
 800124a:	2301      	movs	r3, #1
 800124c:	e000      	b.n	8001250 <Car_Vertical+0x2c>
	}
	else
		return false;
 800124e:	2300      	movs	r3, #0
}
 8001250:	4618      	mov	r0, r3
 8001252:	bd80      	pop	{r7, pc}
 8001254:	48000400 	.word	0x48000400

08001258 <Car_Horizontal>:
bool Car_Horizontal(void){
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
	if ((HAL_GPIO_ReadPin(TL1_Car_GPIO_Port, TL1_Car_Pin)) == 0 || (HAL_GPIO_ReadPin(TL3_Car_GPIO_Port, TL3_Car_Pin)) == 0){
 800125c:	2110      	movs	r1, #16
 800125e:	4809      	ldr	r0, [pc, #36]	; (8001284 <Car_Horizontal+0x2c>)
 8001260:	f000 fb62 	bl	8001928 <HAL_GPIO_ReadPin>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d007      	beq.n	800127a <Car_Horizontal+0x22>
 800126a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800126e:	4806      	ldr	r0, [pc, #24]	; (8001288 <Car_Horizontal+0x30>)
 8001270:	f000 fb5a 	bl	8001928 <HAL_GPIO_ReadPin>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d101      	bne.n	800127e <Car_Horizontal+0x26>
		return true;
 800127a:	2301      	movs	r3, #1
 800127c:	e000      	b.n	8001280 <Car_Horizontal+0x28>
	}
	else
		return false;
 800127e:	2300      	movs	r3, #0
}
 8001280:	4618      	mov	r0, r3
 8001282:	bd80      	pop	{r7, pc}
 8001284:	48000800 	.word	0x48000800
 8001288:	48000400 	.word	0x48000400

0800128c <sendSPIdata>:

void sendSPIdata(uint8_t data[], uint8_t byteSize){
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	460b      	mov	r3, r1
 8001296:	70fb      	strb	r3, [r7, #3]

	HAL_SPI_Transmit(&hspi3, &data[0], byteSize, 100);
 8001298:	78fb      	ldrb	r3, [r7, #3]
 800129a:	b29a      	uxth	r2, r3
 800129c:	2364      	movs	r3, #100	; 0x64
 800129e:	6879      	ldr	r1, [r7, #4]
 80012a0:	4809      	ldr	r0, [pc, #36]	; (80012c8 <sendSPIdata+0x3c>)
 80012a2:	f001 fa94 	bl	80027ce <HAL_SPI_Transmit>



	HAL_GPIO_WritePin(STCP_GPIO_Port, STCP_Pin, GPIO_PIN_SET);
 80012a6:	2201      	movs	r2, #1
 80012a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012ac:	4807      	ldr	r0, [pc, #28]	; (80012cc <sendSPIdata+0x40>)
 80012ae:	f000 fb53 	bl	8001958 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STCP_GPIO_Port, STCP_Pin, GPIO_PIN_RESET);
 80012b2:	2200      	movs	r2, #0
 80012b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012b8:	4804      	ldr	r0, [pc, #16]	; (80012cc <sendSPIdata+0x40>)
 80012ba:	f000 fb4d 	bl	8001958 <HAL_GPIO_WritePin>

}
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	200000cc 	.word	0x200000cc
 80012cc:	48000400 	.word	0x48000400

080012d0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80012d4:	4b06      	ldr	r3, [pc, #24]	; (80012f0 <SystemInit+0x20>)
 80012d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012da:	4a05      	ldr	r2, [pc, #20]	; (80012f0 <SystemInit+0x20>)
 80012dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80012e4:	bf00      	nop
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	e000ed00 	.word	0xe000ed00

080012f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80012f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800132c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80012f8:	f7ff ffea 	bl	80012d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012fc:	480c      	ldr	r0, [pc, #48]	; (8001330 <LoopForever+0x6>)
  ldr r1, =_edata
 80012fe:	490d      	ldr	r1, [pc, #52]	; (8001334 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001300:	4a0d      	ldr	r2, [pc, #52]	; (8001338 <LoopForever+0xe>)
  movs r3, #0
 8001302:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001304:	e002      	b.n	800130c <LoopCopyDataInit>

08001306 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001306:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001308:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800130a:	3304      	adds	r3, #4

0800130c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800130c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800130e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001310:	d3f9      	bcc.n	8001306 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001312:	4a0a      	ldr	r2, [pc, #40]	; (800133c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001314:	4c0a      	ldr	r4, [pc, #40]	; (8001340 <LoopForever+0x16>)
  movs r3, #0
 8001316:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001318:	e001      	b.n	800131e <LoopFillZerobss>

0800131a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800131a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800131c:	3204      	adds	r2, #4

0800131e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800131e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001320:	d3fb      	bcc.n	800131a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001322:	f005 fcb3 	bl	8006c8c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001326:	f7ff fad7 	bl	80008d8 <main>

0800132a <LoopForever>:

LoopForever:
    b LoopForever
 800132a:	e7fe      	b.n	800132a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800132c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001330:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001334:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8001338:	080070b4 	.word	0x080070b4
  ldr r2, =_sbss
 800133c:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8001340:	20001f3c 	.word	0x20001f3c

08001344 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001344:	e7fe      	b.n	8001344 <ADC1_2_IRQHandler>
	...

08001348 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800134e:	2300      	movs	r3, #0
 8001350:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001352:	4b0c      	ldr	r3, [pc, #48]	; (8001384 <HAL_Init+0x3c>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a0b      	ldr	r2, [pc, #44]	; (8001384 <HAL_Init+0x3c>)
 8001358:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800135c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800135e:	2003      	movs	r0, #3
 8001360:	f000 f903 	bl	800156a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001364:	200f      	movs	r0, #15
 8001366:	f7ff fc11 	bl	8000b8c <HAL_InitTick>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d002      	beq.n	8001376 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001370:	2301      	movs	r3, #1
 8001372:	71fb      	strb	r3, [r7, #7]
 8001374:	e001      	b.n	800137a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001376:	f7ff fbe1 	bl	8000b3c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800137a:	79fb      	ldrb	r3, [r7, #7]
}
 800137c:	4618      	mov	r0, r3
 800137e:	3708      	adds	r7, #8
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	40022000 	.word	0x40022000

08001388 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800138c:	4b06      	ldr	r3, [pc, #24]	; (80013a8 <HAL_IncTick+0x20>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	461a      	mov	r2, r3
 8001392:	4b06      	ldr	r3, [pc, #24]	; (80013ac <HAL_IncTick+0x24>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4413      	add	r3, r2
 8001398:	4a04      	ldr	r2, [pc, #16]	; (80013ac <HAL_IncTick+0x24>)
 800139a:	6013      	str	r3, [r2, #0]
}
 800139c:	bf00      	nop
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	20000020 	.word	0x20000020
 80013ac:	20000180 	.word	0x20000180

080013b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  return uwTick;
 80013b4:	4b03      	ldr	r3, [pc, #12]	; (80013c4 <HAL_GetTick+0x14>)
 80013b6:	681b      	ldr	r3, [r3, #0]
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	20000180 	.word	0x20000180

080013c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013d0:	f7ff ffee 	bl	80013b0 <HAL_GetTick>
 80013d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80013e0:	d005      	beq.n	80013ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80013e2:	4b0a      	ldr	r3, [pc, #40]	; (800140c <HAL_Delay+0x44>)
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	461a      	mov	r2, r3
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	4413      	add	r3, r2
 80013ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013ee:	bf00      	nop
 80013f0:	f7ff ffde 	bl	80013b0 <HAL_GetTick>
 80013f4:	4602      	mov	r2, r0
 80013f6:	68bb      	ldr	r3, [r7, #8]
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	68fa      	ldr	r2, [r7, #12]
 80013fc:	429a      	cmp	r2, r3
 80013fe:	d8f7      	bhi.n	80013f0 <HAL_Delay+0x28>
  {
  }
}
 8001400:	bf00      	nop
 8001402:	bf00      	nop
 8001404:	3710      	adds	r7, #16
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	20000020 	.word	0x20000020

08001410 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001410:	b480      	push	{r7}
 8001412:	b085      	sub	sp, #20
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	f003 0307 	and.w	r3, r3, #7
 800141e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001420:	4b0c      	ldr	r3, [pc, #48]	; (8001454 <__NVIC_SetPriorityGrouping+0x44>)
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001426:	68ba      	ldr	r2, [r7, #8]
 8001428:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800142c:	4013      	ands	r3, r2
 800142e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001438:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800143c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001440:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001442:	4a04      	ldr	r2, [pc, #16]	; (8001454 <__NVIC_SetPriorityGrouping+0x44>)
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	60d3      	str	r3, [r2, #12]
}
 8001448:	bf00      	nop
 800144a:	3714      	adds	r7, #20
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr
 8001454:	e000ed00 	.word	0xe000ed00

08001458 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800145c:	4b04      	ldr	r3, [pc, #16]	; (8001470 <__NVIC_GetPriorityGrouping+0x18>)
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	0a1b      	lsrs	r3, r3, #8
 8001462:	f003 0307 	and.w	r3, r3, #7
}
 8001466:	4618      	mov	r0, r3
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr
 8001470:	e000ed00 	.word	0xe000ed00

08001474 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	4603      	mov	r3, r0
 800147c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800147e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001482:	2b00      	cmp	r3, #0
 8001484:	db0b      	blt.n	800149e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001486:	79fb      	ldrb	r3, [r7, #7]
 8001488:	f003 021f 	and.w	r2, r3, #31
 800148c:	4907      	ldr	r1, [pc, #28]	; (80014ac <__NVIC_EnableIRQ+0x38>)
 800148e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001492:	095b      	lsrs	r3, r3, #5
 8001494:	2001      	movs	r0, #1
 8001496:	fa00 f202 	lsl.w	r2, r0, r2
 800149a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800149e:	bf00      	nop
 80014a0:	370c      	adds	r7, #12
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	e000e100 	.word	0xe000e100

080014b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	4603      	mov	r3, r0
 80014b8:	6039      	str	r1, [r7, #0]
 80014ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	db0a      	blt.n	80014da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	b2da      	uxtb	r2, r3
 80014c8:	490c      	ldr	r1, [pc, #48]	; (80014fc <__NVIC_SetPriority+0x4c>)
 80014ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ce:	0112      	lsls	r2, r2, #4
 80014d0:	b2d2      	uxtb	r2, r2
 80014d2:	440b      	add	r3, r1
 80014d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014d8:	e00a      	b.n	80014f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	b2da      	uxtb	r2, r3
 80014de:	4908      	ldr	r1, [pc, #32]	; (8001500 <__NVIC_SetPriority+0x50>)
 80014e0:	79fb      	ldrb	r3, [r7, #7]
 80014e2:	f003 030f 	and.w	r3, r3, #15
 80014e6:	3b04      	subs	r3, #4
 80014e8:	0112      	lsls	r2, r2, #4
 80014ea:	b2d2      	uxtb	r2, r2
 80014ec:	440b      	add	r3, r1
 80014ee:	761a      	strb	r2, [r3, #24]
}
 80014f0:	bf00      	nop
 80014f2:	370c      	adds	r7, #12
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr
 80014fc:	e000e100 	.word	0xe000e100
 8001500:	e000ed00 	.word	0xe000ed00

08001504 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001504:	b480      	push	{r7}
 8001506:	b089      	sub	sp, #36	; 0x24
 8001508:	af00      	add	r7, sp, #0
 800150a:	60f8      	str	r0, [r7, #12]
 800150c:	60b9      	str	r1, [r7, #8]
 800150e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	f003 0307 	and.w	r3, r3, #7
 8001516:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	f1c3 0307 	rsb	r3, r3, #7
 800151e:	2b04      	cmp	r3, #4
 8001520:	bf28      	it	cs
 8001522:	2304      	movcs	r3, #4
 8001524:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	3304      	adds	r3, #4
 800152a:	2b06      	cmp	r3, #6
 800152c:	d902      	bls.n	8001534 <NVIC_EncodePriority+0x30>
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	3b03      	subs	r3, #3
 8001532:	e000      	b.n	8001536 <NVIC_EncodePriority+0x32>
 8001534:	2300      	movs	r3, #0
 8001536:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001538:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800153c:	69bb      	ldr	r3, [r7, #24]
 800153e:	fa02 f303 	lsl.w	r3, r2, r3
 8001542:	43da      	mvns	r2, r3
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	401a      	ands	r2, r3
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800154c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	fa01 f303 	lsl.w	r3, r1, r3
 8001556:	43d9      	mvns	r1, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800155c:	4313      	orrs	r3, r2
         );
}
 800155e:	4618      	mov	r0, r3
 8001560:	3724      	adds	r7, #36	; 0x24
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr

0800156a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800156a:	b580      	push	{r7, lr}
 800156c:	b082      	sub	sp, #8
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	f7ff ff4c 	bl	8001410 <__NVIC_SetPriorityGrouping>
}
 8001578:	bf00      	nop
 800157a:	3708      	adds	r7, #8
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}

08001580 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b086      	sub	sp, #24
 8001584:	af00      	add	r7, sp, #0
 8001586:	4603      	mov	r3, r0
 8001588:	60b9      	str	r1, [r7, #8]
 800158a:	607a      	str	r2, [r7, #4]
 800158c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800158e:	2300      	movs	r3, #0
 8001590:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001592:	f7ff ff61 	bl	8001458 <__NVIC_GetPriorityGrouping>
 8001596:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001598:	687a      	ldr	r2, [r7, #4]
 800159a:	68b9      	ldr	r1, [r7, #8]
 800159c:	6978      	ldr	r0, [r7, #20]
 800159e:	f7ff ffb1 	bl	8001504 <NVIC_EncodePriority>
 80015a2:	4602      	mov	r2, r0
 80015a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015a8:	4611      	mov	r1, r2
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7ff ff80 	bl	80014b0 <__NVIC_SetPriority>
}
 80015b0:	bf00      	nop
 80015b2:	3718      	adds	r7, #24
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	4603      	mov	r3, r0
 80015c0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7ff ff54 	bl	8001474 <__NVIC_EnableIRQ>
}
 80015cc:	bf00      	nop
 80015ce:	3708      	adds	r7, #8
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}

080015d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b087      	sub	sp, #28
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015de:	2300      	movs	r3, #0
 80015e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015e2:	e17f      	b.n	80018e4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	2101      	movs	r1, #1
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	fa01 f303 	lsl.w	r3, r1, r3
 80015f0:	4013      	ands	r3, r2
 80015f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	f000 8171 	beq.w	80018de <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f003 0303 	and.w	r3, r3, #3
 8001604:	2b01      	cmp	r3, #1
 8001606:	d005      	beq.n	8001614 <HAL_GPIO_Init+0x40>
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	f003 0303 	and.w	r3, r3, #3
 8001610:	2b02      	cmp	r3, #2
 8001612:	d130      	bne.n	8001676 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	005b      	lsls	r3, r3, #1
 800161e:	2203      	movs	r2, #3
 8001620:	fa02 f303 	lsl.w	r3, r2, r3
 8001624:	43db      	mvns	r3, r3
 8001626:	693a      	ldr	r2, [r7, #16]
 8001628:	4013      	ands	r3, r2
 800162a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	68da      	ldr	r2, [r3, #12]
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	005b      	lsls	r3, r3, #1
 8001634:	fa02 f303 	lsl.w	r3, r2, r3
 8001638:	693a      	ldr	r2, [r7, #16]
 800163a:	4313      	orrs	r3, r2
 800163c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	693a      	ldr	r2, [r7, #16]
 8001642:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800164a:	2201      	movs	r2, #1
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	fa02 f303 	lsl.w	r3, r2, r3
 8001652:	43db      	mvns	r3, r3
 8001654:	693a      	ldr	r2, [r7, #16]
 8001656:	4013      	ands	r3, r2
 8001658:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	091b      	lsrs	r3, r3, #4
 8001660:	f003 0201 	and.w	r2, r3, #1
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	fa02 f303 	lsl.w	r3, r2, r3
 800166a:	693a      	ldr	r2, [r7, #16]
 800166c:	4313      	orrs	r3, r2
 800166e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	693a      	ldr	r2, [r7, #16]
 8001674:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f003 0303 	and.w	r3, r3, #3
 800167e:	2b03      	cmp	r3, #3
 8001680:	d118      	bne.n	80016b4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001686:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001688:	2201      	movs	r2, #1
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	fa02 f303 	lsl.w	r3, r2, r3
 8001690:	43db      	mvns	r3, r3
 8001692:	693a      	ldr	r2, [r7, #16]
 8001694:	4013      	ands	r3, r2
 8001696:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	08db      	lsrs	r3, r3, #3
 800169e:	f003 0201 	and.w	r2, r3, #1
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	fa02 f303 	lsl.w	r3, r2, r3
 80016a8:	693a      	ldr	r2, [r7, #16]
 80016aa:	4313      	orrs	r3, r2
 80016ac:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	693a      	ldr	r2, [r7, #16]
 80016b2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f003 0303 	and.w	r3, r3, #3
 80016bc:	2b03      	cmp	r3, #3
 80016be:	d017      	beq.n	80016f0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	005b      	lsls	r3, r3, #1
 80016ca:	2203      	movs	r2, #3
 80016cc:	fa02 f303 	lsl.w	r3, r2, r3
 80016d0:	43db      	mvns	r3, r3
 80016d2:	693a      	ldr	r2, [r7, #16]
 80016d4:	4013      	ands	r3, r2
 80016d6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	689a      	ldr	r2, [r3, #8]
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	005b      	lsls	r3, r3, #1
 80016e0:	fa02 f303 	lsl.w	r3, r2, r3
 80016e4:	693a      	ldr	r2, [r7, #16]
 80016e6:	4313      	orrs	r3, r2
 80016e8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	693a      	ldr	r2, [r7, #16]
 80016ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f003 0303 	and.w	r3, r3, #3
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	d123      	bne.n	8001744 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	08da      	lsrs	r2, r3, #3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	3208      	adds	r2, #8
 8001704:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001708:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	f003 0307 	and.w	r3, r3, #7
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	220f      	movs	r2, #15
 8001714:	fa02 f303 	lsl.w	r3, r2, r3
 8001718:	43db      	mvns	r3, r3
 800171a:	693a      	ldr	r2, [r7, #16]
 800171c:	4013      	ands	r3, r2
 800171e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	691a      	ldr	r2, [r3, #16]
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	f003 0307 	and.w	r3, r3, #7
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	fa02 f303 	lsl.w	r3, r2, r3
 8001730:	693a      	ldr	r2, [r7, #16]
 8001732:	4313      	orrs	r3, r2
 8001734:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	08da      	lsrs	r2, r3, #3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	3208      	adds	r2, #8
 800173e:	6939      	ldr	r1, [r7, #16]
 8001740:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	005b      	lsls	r3, r3, #1
 800174e:	2203      	movs	r2, #3
 8001750:	fa02 f303 	lsl.w	r3, r2, r3
 8001754:	43db      	mvns	r3, r3
 8001756:	693a      	ldr	r2, [r7, #16]
 8001758:	4013      	ands	r3, r2
 800175a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f003 0203 	and.w	r2, r3, #3
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	005b      	lsls	r3, r3, #1
 8001768:	fa02 f303 	lsl.w	r3, r2, r3
 800176c:	693a      	ldr	r2, [r7, #16]
 800176e:	4313      	orrs	r3, r2
 8001770:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	693a      	ldr	r2, [r7, #16]
 8001776:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001780:	2b00      	cmp	r3, #0
 8001782:	f000 80ac 	beq.w	80018de <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001786:	4b5f      	ldr	r3, [pc, #380]	; (8001904 <HAL_GPIO_Init+0x330>)
 8001788:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800178a:	4a5e      	ldr	r2, [pc, #376]	; (8001904 <HAL_GPIO_Init+0x330>)
 800178c:	f043 0301 	orr.w	r3, r3, #1
 8001790:	6613      	str	r3, [r2, #96]	; 0x60
 8001792:	4b5c      	ldr	r3, [pc, #368]	; (8001904 <HAL_GPIO_Init+0x330>)
 8001794:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001796:	f003 0301 	and.w	r3, r3, #1
 800179a:	60bb      	str	r3, [r7, #8]
 800179c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800179e:	4a5a      	ldr	r2, [pc, #360]	; (8001908 <HAL_GPIO_Init+0x334>)
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	089b      	lsrs	r3, r3, #2
 80017a4:	3302      	adds	r3, #2
 80017a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	f003 0303 	and.w	r3, r3, #3
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	220f      	movs	r2, #15
 80017b6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ba:	43db      	mvns	r3, r3
 80017bc:	693a      	ldr	r2, [r7, #16]
 80017be:	4013      	ands	r3, r2
 80017c0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80017c8:	d025      	beq.n	8001816 <HAL_GPIO_Init+0x242>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4a4f      	ldr	r2, [pc, #316]	; (800190c <HAL_GPIO_Init+0x338>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d01f      	beq.n	8001812 <HAL_GPIO_Init+0x23e>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4a4e      	ldr	r2, [pc, #312]	; (8001910 <HAL_GPIO_Init+0x33c>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d019      	beq.n	800180e <HAL_GPIO_Init+0x23a>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4a4d      	ldr	r2, [pc, #308]	; (8001914 <HAL_GPIO_Init+0x340>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d013      	beq.n	800180a <HAL_GPIO_Init+0x236>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4a4c      	ldr	r2, [pc, #304]	; (8001918 <HAL_GPIO_Init+0x344>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d00d      	beq.n	8001806 <HAL_GPIO_Init+0x232>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4a4b      	ldr	r2, [pc, #300]	; (800191c <HAL_GPIO_Init+0x348>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d007      	beq.n	8001802 <HAL_GPIO_Init+0x22e>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4a4a      	ldr	r2, [pc, #296]	; (8001920 <HAL_GPIO_Init+0x34c>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d101      	bne.n	80017fe <HAL_GPIO_Init+0x22a>
 80017fa:	2306      	movs	r3, #6
 80017fc:	e00c      	b.n	8001818 <HAL_GPIO_Init+0x244>
 80017fe:	2307      	movs	r3, #7
 8001800:	e00a      	b.n	8001818 <HAL_GPIO_Init+0x244>
 8001802:	2305      	movs	r3, #5
 8001804:	e008      	b.n	8001818 <HAL_GPIO_Init+0x244>
 8001806:	2304      	movs	r3, #4
 8001808:	e006      	b.n	8001818 <HAL_GPIO_Init+0x244>
 800180a:	2303      	movs	r3, #3
 800180c:	e004      	b.n	8001818 <HAL_GPIO_Init+0x244>
 800180e:	2302      	movs	r3, #2
 8001810:	e002      	b.n	8001818 <HAL_GPIO_Init+0x244>
 8001812:	2301      	movs	r3, #1
 8001814:	e000      	b.n	8001818 <HAL_GPIO_Init+0x244>
 8001816:	2300      	movs	r3, #0
 8001818:	697a      	ldr	r2, [r7, #20]
 800181a:	f002 0203 	and.w	r2, r2, #3
 800181e:	0092      	lsls	r2, r2, #2
 8001820:	4093      	lsls	r3, r2
 8001822:	693a      	ldr	r2, [r7, #16]
 8001824:	4313      	orrs	r3, r2
 8001826:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001828:	4937      	ldr	r1, [pc, #220]	; (8001908 <HAL_GPIO_Init+0x334>)
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	089b      	lsrs	r3, r3, #2
 800182e:	3302      	adds	r3, #2
 8001830:	693a      	ldr	r2, [r7, #16]
 8001832:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001836:	4b3b      	ldr	r3, [pc, #236]	; (8001924 <HAL_GPIO_Init+0x350>)
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	43db      	mvns	r3, r3
 8001840:	693a      	ldr	r2, [r7, #16]
 8001842:	4013      	ands	r3, r2
 8001844:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d003      	beq.n	800185a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001852:	693a      	ldr	r2, [r7, #16]
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	4313      	orrs	r3, r2
 8001858:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800185a:	4a32      	ldr	r2, [pc, #200]	; (8001924 <HAL_GPIO_Init+0x350>)
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001860:	4b30      	ldr	r3, [pc, #192]	; (8001924 <HAL_GPIO_Init+0x350>)
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	43db      	mvns	r3, r3
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	4013      	ands	r3, r2
 800186e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001878:	2b00      	cmp	r3, #0
 800187a:	d003      	beq.n	8001884 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800187c:	693a      	ldr	r2, [r7, #16]
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	4313      	orrs	r3, r2
 8001882:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001884:	4a27      	ldr	r2, [pc, #156]	; (8001924 <HAL_GPIO_Init+0x350>)
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800188a:	4b26      	ldr	r3, [pc, #152]	; (8001924 <HAL_GPIO_Init+0x350>)
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	43db      	mvns	r3, r3
 8001894:	693a      	ldr	r2, [r7, #16]
 8001896:	4013      	ands	r3, r2
 8001898:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d003      	beq.n	80018ae <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80018a6:	693a      	ldr	r2, [r7, #16]
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	4313      	orrs	r3, r2
 80018ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80018ae:	4a1d      	ldr	r2, [pc, #116]	; (8001924 <HAL_GPIO_Init+0x350>)
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80018b4:	4b1b      	ldr	r3, [pc, #108]	; (8001924 <HAL_GPIO_Init+0x350>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	43db      	mvns	r3, r3
 80018be:	693a      	ldr	r2, [r7, #16]
 80018c0:	4013      	ands	r3, r2
 80018c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d003      	beq.n	80018d8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80018d0:	693a      	ldr	r2, [r7, #16]
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80018d8:	4a12      	ldr	r2, [pc, #72]	; (8001924 <HAL_GPIO_Init+0x350>)
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	3301      	adds	r3, #1
 80018e2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	fa22 f303 	lsr.w	r3, r2, r3
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	f47f ae78 	bne.w	80015e4 <HAL_GPIO_Init+0x10>
  }
}
 80018f4:	bf00      	nop
 80018f6:	bf00      	nop
 80018f8:	371c      	adds	r7, #28
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	40021000 	.word	0x40021000
 8001908:	40010000 	.word	0x40010000
 800190c:	48000400 	.word	0x48000400
 8001910:	48000800 	.word	0x48000800
 8001914:	48000c00 	.word	0x48000c00
 8001918:	48001000 	.word	0x48001000
 800191c:	48001400 	.word	0x48001400
 8001920:	48001800 	.word	0x48001800
 8001924:	40010400 	.word	0x40010400

08001928 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001928:	b480      	push	{r7}
 800192a:	b085      	sub	sp, #20
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	460b      	mov	r3, r1
 8001932:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	691a      	ldr	r2, [r3, #16]
 8001938:	887b      	ldrh	r3, [r7, #2]
 800193a:	4013      	ands	r3, r2
 800193c:	2b00      	cmp	r3, #0
 800193e:	d002      	beq.n	8001946 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001940:	2301      	movs	r3, #1
 8001942:	73fb      	strb	r3, [r7, #15]
 8001944:	e001      	b.n	800194a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001946:	2300      	movs	r3, #0
 8001948:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800194a:	7bfb      	ldrb	r3, [r7, #15]
}
 800194c:	4618      	mov	r0, r3
 800194e:	3714      	adds	r7, #20
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	460b      	mov	r3, r1
 8001962:	807b      	strh	r3, [r7, #2]
 8001964:	4613      	mov	r3, r2
 8001966:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001968:	787b      	ldrb	r3, [r7, #1]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d003      	beq.n	8001976 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800196e:	887a      	ldrh	r2, [r7, #2]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001974:	e002      	b.n	800197c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001976:	887a      	ldrh	r2, [r7, #2]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800197c:	bf00      	nop
 800197e:	370c      	adds	r7, #12
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800198c:	4b04      	ldr	r3, [pc, #16]	; (80019a0 <HAL_PWREx_GetVoltageRange+0x18>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001994:	4618      	mov	r0, r3
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	40007000 	.word	0x40007000

080019a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b085      	sub	sp, #20
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019b2:	d130      	bne.n	8001a16 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80019b4:	4b23      	ldr	r3, [pc, #140]	; (8001a44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80019bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019c0:	d038      	beq.n	8001a34 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80019c2:	4b20      	ldr	r3, [pc, #128]	; (8001a44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80019ca:	4a1e      	ldr	r2, [pc, #120]	; (8001a44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019d0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80019d2:	4b1d      	ldr	r3, [pc, #116]	; (8001a48 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	2232      	movs	r2, #50	; 0x32
 80019d8:	fb02 f303 	mul.w	r3, r2, r3
 80019dc:	4a1b      	ldr	r2, [pc, #108]	; (8001a4c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80019de:	fba2 2303 	umull	r2, r3, r2, r3
 80019e2:	0c9b      	lsrs	r3, r3, #18
 80019e4:	3301      	adds	r3, #1
 80019e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019e8:	e002      	b.n	80019f0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	3b01      	subs	r3, #1
 80019ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019f0:	4b14      	ldr	r3, [pc, #80]	; (8001a44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019f2:	695b      	ldr	r3, [r3, #20]
 80019f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019fc:	d102      	bne.n	8001a04 <HAL_PWREx_ControlVoltageScaling+0x60>
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d1f2      	bne.n	80019ea <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a04:	4b0f      	ldr	r3, [pc, #60]	; (8001a44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a06:	695b      	ldr	r3, [r3, #20]
 8001a08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a10:	d110      	bne.n	8001a34 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e00f      	b.n	8001a36 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a16:	4b0b      	ldr	r3, [pc, #44]	; (8001a44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a22:	d007      	beq.n	8001a34 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a24:	4b07      	ldr	r3, [pc, #28]	; (8001a44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a2c:	4a05      	ldr	r2, [pc, #20]	; (8001a44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a32:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001a34:	2300      	movs	r3, #0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3714      	adds	r7, #20
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	40007000 	.word	0x40007000
 8001a48:	20000018 	.word	0x20000018
 8001a4c:	431bde83 	.word	0x431bde83

08001a50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b088      	sub	sp, #32
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d101      	bne.n	8001a62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e3ca      	b.n	80021f8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a62:	4b97      	ldr	r3, [pc, #604]	; (8001cc0 <HAL_RCC_OscConfig+0x270>)
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	f003 030c 	and.w	r3, r3, #12
 8001a6a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a6c:	4b94      	ldr	r3, [pc, #592]	; (8001cc0 <HAL_RCC_OscConfig+0x270>)
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	f003 0303 	and.w	r3, r3, #3
 8001a74:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0310 	and.w	r3, r3, #16
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	f000 80e4 	beq.w	8001c4c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d007      	beq.n	8001a9a <HAL_RCC_OscConfig+0x4a>
 8001a8a:	69bb      	ldr	r3, [r7, #24]
 8001a8c:	2b0c      	cmp	r3, #12
 8001a8e:	f040 808b 	bne.w	8001ba8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	f040 8087 	bne.w	8001ba8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a9a:	4b89      	ldr	r3, [pc, #548]	; (8001cc0 <HAL_RCC_OscConfig+0x270>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0302 	and.w	r3, r3, #2
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d005      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x62>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	699b      	ldr	r3, [r3, #24]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d101      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e3a2      	b.n	80021f8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6a1a      	ldr	r2, [r3, #32]
 8001ab6:	4b82      	ldr	r3, [pc, #520]	; (8001cc0 <HAL_RCC_OscConfig+0x270>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0308 	and.w	r3, r3, #8
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d004      	beq.n	8001acc <HAL_RCC_OscConfig+0x7c>
 8001ac2:	4b7f      	ldr	r3, [pc, #508]	; (8001cc0 <HAL_RCC_OscConfig+0x270>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001aca:	e005      	b.n	8001ad8 <HAL_RCC_OscConfig+0x88>
 8001acc:	4b7c      	ldr	r3, [pc, #496]	; (8001cc0 <HAL_RCC_OscConfig+0x270>)
 8001ace:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ad2:	091b      	lsrs	r3, r3, #4
 8001ad4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d223      	bcs.n	8001b24 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6a1b      	ldr	r3, [r3, #32]
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f000 fd71 	bl	80025c8 <RCC_SetFlashLatencyFromMSIRange>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e383      	b.n	80021f8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001af0:	4b73      	ldr	r3, [pc, #460]	; (8001cc0 <HAL_RCC_OscConfig+0x270>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a72      	ldr	r2, [pc, #456]	; (8001cc0 <HAL_RCC_OscConfig+0x270>)
 8001af6:	f043 0308 	orr.w	r3, r3, #8
 8001afa:	6013      	str	r3, [r2, #0]
 8001afc:	4b70      	ldr	r3, [pc, #448]	; (8001cc0 <HAL_RCC_OscConfig+0x270>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6a1b      	ldr	r3, [r3, #32]
 8001b08:	496d      	ldr	r1, [pc, #436]	; (8001cc0 <HAL_RCC_OscConfig+0x270>)
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b0e:	4b6c      	ldr	r3, [pc, #432]	; (8001cc0 <HAL_RCC_OscConfig+0x270>)
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	69db      	ldr	r3, [r3, #28]
 8001b1a:	021b      	lsls	r3, r3, #8
 8001b1c:	4968      	ldr	r1, [pc, #416]	; (8001cc0 <HAL_RCC_OscConfig+0x270>)
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	604b      	str	r3, [r1, #4]
 8001b22:	e025      	b.n	8001b70 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b24:	4b66      	ldr	r3, [pc, #408]	; (8001cc0 <HAL_RCC_OscConfig+0x270>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a65      	ldr	r2, [pc, #404]	; (8001cc0 <HAL_RCC_OscConfig+0x270>)
 8001b2a:	f043 0308 	orr.w	r3, r3, #8
 8001b2e:	6013      	str	r3, [r2, #0]
 8001b30:	4b63      	ldr	r3, [pc, #396]	; (8001cc0 <HAL_RCC_OscConfig+0x270>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6a1b      	ldr	r3, [r3, #32]
 8001b3c:	4960      	ldr	r1, [pc, #384]	; (8001cc0 <HAL_RCC_OscConfig+0x270>)
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b42:	4b5f      	ldr	r3, [pc, #380]	; (8001cc0 <HAL_RCC_OscConfig+0x270>)
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	69db      	ldr	r3, [r3, #28]
 8001b4e:	021b      	lsls	r3, r3, #8
 8001b50:	495b      	ldr	r1, [pc, #364]	; (8001cc0 <HAL_RCC_OscConfig+0x270>)
 8001b52:	4313      	orrs	r3, r2
 8001b54:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d109      	bne.n	8001b70 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6a1b      	ldr	r3, [r3, #32]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f000 fd31 	bl	80025c8 <RCC_SetFlashLatencyFromMSIRange>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e343      	b.n	80021f8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b70:	f000 fc4a 	bl	8002408 <HAL_RCC_GetSysClockFreq>
 8001b74:	4602      	mov	r2, r0
 8001b76:	4b52      	ldr	r3, [pc, #328]	; (8001cc0 <HAL_RCC_OscConfig+0x270>)
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	091b      	lsrs	r3, r3, #4
 8001b7c:	f003 030f 	and.w	r3, r3, #15
 8001b80:	4950      	ldr	r1, [pc, #320]	; (8001cc4 <HAL_RCC_OscConfig+0x274>)
 8001b82:	5ccb      	ldrb	r3, [r1, r3]
 8001b84:	f003 031f 	and.w	r3, r3, #31
 8001b88:	fa22 f303 	lsr.w	r3, r2, r3
 8001b8c:	4a4e      	ldr	r2, [pc, #312]	; (8001cc8 <HAL_RCC_OscConfig+0x278>)
 8001b8e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001b90:	4b4e      	ldr	r3, [pc, #312]	; (8001ccc <HAL_RCC_OscConfig+0x27c>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7fe fff9 	bl	8000b8c <HAL_InitTick>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001b9e:	7bfb      	ldrb	r3, [r7, #15]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d052      	beq.n	8001c4a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001ba4:	7bfb      	ldrb	r3, [r7, #15]
 8001ba6:	e327      	b.n	80021f8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	699b      	ldr	r3, [r3, #24]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d032      	beq.n	8001c16 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001bb0:	4b43      	ldr	r3, [pc, #268]	; (8001cc0 <HAL_RCC_OscConfig+0x270>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a42      	ldr	r2, [pc, #264]	; (8001cc0 <HAL_RCC_OscConfig+0x270>)
 8001bb6:	f043 0301 	orr.w	r3, r3, #1
 8001bba:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001bbc:	f7ff fbf8 	bl	80013b0 <HAL_GetTick>
 8001bc0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001bc2:	e008      	b.n	8001bd6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001bc4:	f7ff fbf4 	bl	80013b0 <HAL_GetTick>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	2b02      	cmp	r3, #2
 8001bd0:	d901      	bls.n	8001bd6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e310      	b.n	80021f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001bd6:	4b3a      	ldr	r3, [pc, #232]	; (8001cc0 <HAL_RCC_OscConfig+0x270>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0302 	and.w	r3, r3, #2
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d0f0      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001be2:	4b37      	ldr	r3, [pc, #220]	; (8001cc0 <HAL_RCC_OscConfig+0x270>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a36      	ldr	r2, [pc, #216]	; (8001cc0 <HAL_RCC_OscConfig+0x270>)
 8001be8:	f043 0308 	orr.w	r3, r3, #8
 8001bec:	6013      	str	r3, [r2, #0]
 8001bee:	4b34      	ldr	r3, [pc, #208]	; (8001cc0 <HAL_RCC_OscConfig+0x270>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6a1b      	ldr	r3, [r3, #32]
 8001bfa:	4931      	ldr	r1, [pc, #196]	; (8001cc0 <HAL_RCC_OscConfig+0x270>)
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c00:	4b2f      	ldr	r3, [pc, #188]	; (8001cc0 <HAL_RCC_OscConfig+0x270>)
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	69db      	ldr	r3, [r3, #28]
 8001c0c:	021b      	lsls	r3, r3, #8
 8001c0e:	492c      	ldr	r1, [pc, #176]	; (8001cc0 <HAL_RCC_OscConfig+0x270>)
 8001c10:	4313      	orrs	r3, r2
 8001c12:	604b      	str	r3, [r1, #4]
 8001c14:	e01a      	b.n	8001c4c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001c16:	4b2a      	ldr	r3, [pc, #168]	; (8001cc0 <HAL_RCC_OscConfig+0x270>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a29      	ldr	r2, [pc, #164]	; (8001cc0 <HAL_RCC_OscConfig+0x270>)
 8001c1c:	f023 0301 	bic.w	r3, r3, #1
 8001c20:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c22:	f7ff fbc5 	bl	80013b0 <HAL_GetTick>
 8001c26:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c28:	e008      	b.n	8001c3c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c2a:	f7ff fbc1 	bl	80013b0 <HAL_GetTick>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d901      	bls.n	8001c3c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	e2dd      	b.n	80021f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c3c:	4b20      	ldr	r3, [pc, #128]	; (8001cc0 <HAL_RCC_OscConfig+0x270>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0302 	and.w	r3, r3, #2
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d1f0      	bne.n	8001c2a <HAL_RCC_OscConfig+0x1da>
 8001c48:	e000      	b.n	8001c4c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c4a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0301 	and.w	r3, r3, #1
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d074      	beq.n	8001d42 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001c58:	69bb      	ldr	r3, [r7, #24]
 8001c5a:	2b08      	cmp	r3, #8
 8001c5c:	d005      	beq.n	8001c6a <HAL_RCC_OscConfig+0x21a>
 8001c5e:	69bb      	ldr	r3, [r7, #24]
 8001c60:	2b0c      	cmp	r3, #12
 8001c62:	d10e      	bne.n	8001c82 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	2b03      	cmp	r3, #3
 8001c68:	d10b      	bne.n	8001c82 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c6a:	4b15      	ldr	r3, [pc, #84]	; (8001cc0 <HAL_RCC_OscConfig+0x270>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d064      	beq.n	8001d40 <HAL_RCC_OscConfig+0x2f0>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d160      	bne.n	8001d40 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e2ba      	b.n	80021f8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c8a:	d106      	bne.n	8001c9a <HAL_RCC_OscConfig+0x24a>
 8001c8c:	4b0c      	ldr	r3, [pc, #48]	; (8001cc0 <HAL_RCC_OscConfig+0x270>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a0b      	ldr	r2, [pc, #44]	; (8001cc0 <HAL_RCC_OscConfig+0x270>)
 8001c92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c96:	6013      	str	r3, [r2, #0]
 8001c98:	e026      	b.n	8001ce8 <HAL_RCC_OscConfig+0x298>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ca2:	d115      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x280>
 8001ca4:	4b06      	ldr	r3, [pc, #24]	; (8001cc0 <HAL_RCC_OscConfig+0x270>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a05      	ldr	r2, [pc, #20]	; (8001cc0 <HAL_RCC_OscConfig+0x270>)
 8001caa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cae:	6013      	str	r3, [r2, #0]
 8001cb0:	4b03      	ldr	r3, [pc, #12]	; (8001cc0 <HAL_RCC_OscConfig+0x270>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a02      	ldr	r2, [pc, #8]	; (8001cc0 <HAL_RCC_OscConfig+0x270>)
 8001cb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cba:	6013      	str	r3, [r2, #0]
 8001cbc:	e014      	b.n	8001ce8 <HAL_RCC_OscConfig+0x298>
 8001cbe:	bf00      	nop
 8001cc0:	40021000 	.word	0x40021000
 8001cc4:	08007004 	.word	0x08007004
 8001cc8:	20000018 	.word	0x20000018
 8001ccc:	2000001c 	.word	0x2000001c
 8001cd0:	4ba0      	ldr	r3, [pc, #640]	; (8001f54 <HAL_RCC_OscConfig+0x504>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a9f      	ldr	r2, [pc, #636]	; (8001f54 <HAL_RCC_OscConfig+0x504>)
 8001cd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cda:	6013      	str	r3, [r2, #0]
 8001cdc:	4b9d      	ldr	r3, [pc, #628]	; (8001f54 <HAL_RCC_OscConfig+0x504>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a9c      	ldr	r2, [pc, #624]	; (8001f54 <HAL_RCC_OscConfig+0x504>)
 8001ce2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ce6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d013      	beq.n	8001d18 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cf0:	f7ff fb5e 	bl	80013b0 <HAL_GetTick>
 8001cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cf6:	e008      	b.n	8001d0a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cf8:	f7ff fb5a 	bl	80013b0 <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	2b64      	cmp	r3, #100	; 0x64
 8001d04:	d901      	bls.n	8001d0a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001d06:	2303      	movs	r3, #3
 8001d08:	e276      	b.n	80021f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d0a:	4b92      	ldr	r3, [pc, #584]	; (8001f54 <HAL_RCC_OscConfig+0x504>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d0f0      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x2a8>
 8001d16:	e014      	b.n	8001d42 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d18:	f7ff fb4a 	bl	80013b0 <HAL_GetTick>
 8001d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d1e:	e008      	b.n	8001d32 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d20:	f7ff fb46 	bl	80013b0 <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	2b64      	cmp	r3, #100	; 0x64
 8001d2c:	d901      	bls.n	8001d32 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e262      	b.n	80021f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d32:	4b88      	ldr	r3, [pc, #544]	; (8001f54 <HAL_RCC_OscConfig+0x504>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d1f0      	bne.n	8001d20 <HAL_RCC_OscConfig+0x2d0>
 8001d3e:	e000      	b.n	8001d42 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0302 	and.w	r3, r3, #2
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d060      	beq.n	8001e10 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001d4e:	69bb      	ldr	r3, [r7, #24]
 8001d50:	2b04      	cmp	r3, #4
 8001d52:	d005      	beq.n	8001d60 <HAL_RCC_OscConfig+0x310>
 8001d54:	69bb      	ldr	r3, [r7, #24]
 8001d56:	2b0c      	cmp	r3, #12
 8001d58:	d119      	bne.n	8001d8e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d116      	bne.n	8001d8e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d60:	4b7c      	ldr	r3, [pc, #496]	; (8001f54 <HAL_RCC_OscConfig+0x504>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d005      	beq.n	8001d78 <HAL_RCC_OscConfig+0x328>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d101      	bne.n	8001d78 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e23f      	b.n	80021f8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d78:	4b76      	ldr	r3, [pc, #472]	; (8001f54 <HAL_RCC_OscConfig+0x504>)
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	691b      	ldr	r3, [r3, #16]
 8001d84:	061b      	lsls	r3, r3, #24
 8001d86:	4973      	ldr	r1, [pc, #460]	; (8001f54 <HAL_RCC_OscConfig+0x504>)
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d8c:	e040      	b.n	8001e10 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d023      	beq.n	8001dde <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d96:	4b6f      	ldr	r3, [pc, #444]	; (8001f54 <HAL_RCC_OscConfig+0x504>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a6e      	ldr	r2, [pc, #440]	; (8001f54 <HAL_RCC_OscConfig+0x504>)
 8001d9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001da0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da2:	f7ff fb05 	bl	80013b0 <HAL_GetTick>
 8001da6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001da8:	e008      	b.n	8001dbc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001daa:	f7ff fb01 	bl	80013b0 <HAL_GetTick>
 8001dae:	4602      	mov	r2, r0
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d901      	bls.n	8001dbc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001db8:	2303      	movs	r3, #3
 8001dba:	e21d      	b.n	80021f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dbc:	4b65      	ldr	r3, [pc, #404]	; (8001f54 <HAL_RCC_OscConfig+0x504>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d0f0      	beq.n	8001daa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dc8:	4b62      	ldr	r3, [pc, #392]	; (8001f54 <HAL_RCC_OscConfig+0x504>)
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	691b      	ldr	r3, [r3, #16]
 8001dd4:	061b      	lsls	r3, r3, #24
 8001dd6:	495f      	ldr	r1, [pc, #380]	; (8001f54 <HAL_RCC_OscConfig+0x504>)
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	604b      	str	r3, [r1, #4]
 8001ddc:	e018      	b.n	8001e10 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dde:	4b5d      	ldr	r3, [pc, #372]	; (8001f54 <HAL_RCC_OscConfig+0x504>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a5c      	ldr	r2, [pc, #368]	; (8001f54 <HAL_RCC_OscConfig+0x504>)
 8001de4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001de8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dea:	f7ff fae1 	bl	80013b0 <HAL_GetTick>
 8001dee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001df0:	e008      	b.n	8001e04 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001df2:	f7ff fadd 	bl	80013b0 <HAL_GetTick>
 8001df6:	4602      	mov	r2, r0
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d901      	bls.n	8001e04 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001e00:	2303      	movs	r3, #3
 8001e02:	e1f9      	b.n	80021f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e04:	4b53      	ldr	r3, [pc, #332]	; (8001f54 <HAL_RCC_OscConfig+0x504>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d1f0      	bne.n	8001df2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0308 	and.w	r3, r3, #8
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d03c      	beq.n	8001e96 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	695b      	ldr	r3, [r3, #20]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d01c      	beq.n	8001e5e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e24:	4b4b      	ldr	r3, [pc, #300]	; (8001f54 <HAL_RCC_OscConfig+0x504>)
 8001e26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e2a:	4a4a      	ldr	r2, [pc, #296]	; (8001f54 <HAL_RCC_OscConfig+0x504>)
 8001e2c:	f043 0301 	orr.w	r3, r3, #1
 8001e30:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e34:	f7ff fabc 	bl	80013b0 <HAL_GetTick>
 8001e38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e3a:	e008      	b.n	8001e4e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e3c:	f7ff fab8 	bl	80013b0 <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d901      	bls.n	8001e4e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e1d4      	b.n	80021f8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e4e:	4b41      	ldr	r3, [pc, #260]	; (8001f54 <HAL_RCC_OscConfig+0x504>)
 8001e50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e54:	f003 0302 	and.w	r3, r3, #2
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d0ef      	beq.n	8001e3c <HAL_RCC_OscConfig+0x3ec>
 8001e5c:	e01b      	b.n	8001e96 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e5e:	4b3d      	ldr	r3, [pc, #244]	; (8001f54 <HAL_RCC_OscConfig+0x504>)
 8001e60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e64:	4a3b      	ldr	r2, [pc, #236]	; (8001f54 <HAL_RCC_OscConfig+0x504>)
 8001e66:	f023 0301 	bic.w	r3, r3, #1
 8001e6a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e6e:	f7ff fa9f 	bl	80013b0 <HAL_GetTick>
 8001e72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e74:	e008      	b.n	8001e88 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e76:	f7ff fa9b 	bl	80013b0 <HAL_GetTick>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d901      	bls.n	8001e88 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001e84:	2303      	movs	r3, #3
 8001e86:	e1b7      	b.n	80021f8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e88:	4b32      	ldr	r3, [pc, #200]	; (8001f54 <HAL_RCC_OscConfig+0x504>)
 8001e8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e8e:	f003 0302 	and.w	r3, r3, #2
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d1ef      	bne.n	8001e76 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0304 	and.w	r3, r3, #4
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	f000 80a6 	beq.w	8001ff0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001ea8:	4b2a      	ldr	r3, [pc, #168]	; (8001f54 <HAL_RCC_OscConfig+0x504>)
 8001eaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d10d      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eb4:	4b27      	ldr	r3, [pc, #156]	; (8001f54 <HAL_RCC_OscConfig+0x504>)
 8001eb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eb8:	4a26      	ldr	r2, [pc, #152]	; (8001f54 <HAL_RCC_OscConfig+0x504>)
 8001eba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ebe:	6593      	str	r3, [r2, #88]	; 0x58
 8001ec0:	4b24      	ldr	r3, [pc, #144]	; (8001f54 <HAL_RCC_OscConfig+0x504>)
 8001ec2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ec4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ec8:	60bb      	str	r3, [r7, #8]
 8001eca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ed0:	4b21      	ldr	r3, [pc, #132]	; (8001f58 <HAL_RCC_OscConfig+0x508>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d118      	bne.n	8001f0e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001edc:	4b1e      	ldr	r3, [pc, #120]	; (8001f58 <HAL_RCC_OscConfig+0x508>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a1d      	ldr	r2, [pc, #116]	; (8001f58 <HAL_RCC_OscConfig+0x508>)
 8001ee2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ee6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ee8:	f7ff fa62 	bl	80013b0 <HAL_GetTick>
 8001eec:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001eee:	e008      	b.n	8001f02 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ef0:	f7ff fa5e 	bl	80013b0 <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	d901      	bls.n	8001f02 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001efe:	2303      	movs	r3, #3
 8001f00:	e17a      	b.n	80021f8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f02:	4b15      	ldr	r3, [pc, #84]	; (8001f58 <HAL_RCC_OscConfig+0x508>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d0f0      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d108      	bne.n	8001f28 <HAL_RCC_OscConfig+0x4d8>
 8001f16:	4b0f      	ldr	r3, [pc, #60]	; (8001f54 <HAL_RCC_OscConfig+0x504>)
 8001f18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f1c:	4a0d      	ldr	r2, [pc, #52]	; (8001f54 <HAL_RCC_OscConfig+0x504>)
 8001f1e:	f043 0301 	orr.w	r3, r3, #1
 8001f22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f26:	e029      	b.n	8001f7c <HAL_RCC_OscConfig+0x52c>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	2b05      	cmp	r3, #5
 8001f2e:	d115      	bne.n	8001f5c <HAL_RCC_OscConfig+0x50c>
 8001f30:	4b08      	ldr	r3, [pc, #32]	; (8001f54 <HAL_RCC_OscConfig+0x504>)
 8001f32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f36:	4a07      	ldr	r2, [pc, #28]	; (8001f54 <HAL_RCC_OscConfig+0x504>)
 8001f38:	f043 0304 	orr.w	r3, r3, #4
 8001f3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f40:	4b04      	ldr	r3, [pc, #16]	; (8001f54 <HAL_RCC_OscConfig+0x504>)
 8001f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f46:	4a03      	ldr	r2, [pc, #12]	; (8001f54 <HAL_RCC_OscConfig+0x504>)
 8001f48:	f043 0301 	orr.w	r3, r3, #1
 8001f4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f50:	e014      	b.n	8001f7c <HAL_RCC_OscConfig+0x52c>
 8001f52:	bf00      	nop
 8001f54:	40021000 	.word	0x40021000
 8001f58:	40007000 	.word	0x40007000
 8001f5c:	4b9c      	ldr	r3, [pc, #624]	; (80021d0 <HAL_RCC_OscConfig+0x780>)
 8001f5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f62:	4a9b      	ldr	r2, [pc, #620]	; (80021d0 <HAL_RCC_OscConfig+0x780>)
 8001f64:	f023 0301 	bic.w	r3, r3, #1
 8001f68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f6c:	4b98      	ldr	r3, [pc, #608]	; (80021d0 <HAL_RCC_OscConfig+0x780>)
 8001f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f72:	4a97      	ldr	r2, [pc, #604]	; (80021d0 <HAL_RCC_OscConfig+0x780>)
 8001f74:	f023 0304 	bic.w	r3, r3, #4
 8001f78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d016      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f84:	f7ff fa14 	bl	80013b0 <HAL_GetTick>
 8001f88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f8a:	e00a      	b.n	8001fa2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f8c:	f7ff fa10 	bl	80013b0 <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d901      	bls.n	8001fa2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e12a      	b.n	80021f8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fa2:	4b8b      	ldr	r3, [pc, #556]	; (80021d0 <HAL_RCC_OscConfig+0x780>)
 8001fa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fa8:	f003 0302 	and.w	r3, r3, #2
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d0ed      	beq.n	8001f8c <HAL_RCC_OscConfig+0x53c>
 8001fb0:	e015      	b.n	8001fde <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fb2:	f7ff f9fd 	bl	80013b0 <HAL_GetTick>
 8001fb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fb8:	e00a      	b.n	8001fd0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fba:	f7ff f9f9 	bl	80013b0 <HAL_GetTick>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d901      	bls.n	8001fd0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	e113      	b.n	80021f8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fd0:	4b7f      	ldr	r3, [pc, #508]	; (80021d0 <HAL_RCC_OscConfig+0x780>)
 8001fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fd6:	f003 0302 	and.w	r3, r3, #2
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d1ed      	bne.n	8001fba <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fde:	7ffb      	ldrb	r3, [r7, #31]
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d105      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fe4:	4b7a      	ldr	r3, [pc, #488]	; (80021d0 <HAL_RCC_OscConfig+0x780>)
 8001fe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fe8:	4a79      	ldr	r2, [pc, #484]	; (80021d0 <HAL_RCC_OscConfig+0x780>)
 8001fea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fee:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	f000 80fe 	beq.w	80021f6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	f040 80d0 	bne.w	80021a4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002004:	4b72      	ldr	r3, [pc, #456]	; (80021d0 <HAL_RCC_OscConfig+0x780>)
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	f003 0203 	and.w	r2, r3, #3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002014:	429a      	cmp	r2, r3
 8002016:	d130      	bne.n	800207a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002022:	3b01      	subs	r3, #1
 8002024:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002026:	429a      	cmp	r2, r3
 8002028:	d127      	bne.n	800207a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002034:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002036:	429a      	cmp	r2, r3
 8002038:	d11f      	bne.n	800207a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002044:	2a07      	cmp	r2, #7
 8002046:	bf14      	ite	ne
 8002048:	2201      	movne	r2, #1
 800204a:	2200      	moveq	r2, #0
 800204c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800204e:	4293      	cmp	r3, r2
 8002050:	d113      	bne.n	800207a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800205c:	085b      	lsrs	r3, r3, #1
 800205e:	3b01      	subs	r3, #1
 8002060:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002062:	429a      	cmp	r2, r3
 8002064:	d109      	bne.n	800207a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002070:	085b      	lsrs	r3, r3, #1
 8002072:	3b01      	subs	r3, #1
 8002074:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002076:	429a      	cmp	r2, r3
 8002078:	d06e      	beq.n	8002158 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800207a:	69bb      	ldr	r3, [r7, #24]
 800207c:	2b0c      	cmp	r3, #12
 800207e:	d069      	beq.n	8002154 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002080:	4b53      	ldr	r3, [pc, #332]	; (80021d0 <HAL_RCC_OscConfig+0x780>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002088:	2b00      	cmp	r3, #0
 800208a:	d105      	bne.n	8002098 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800208c:	4b50      	ldr	r3, [pc, #320]	; (80021d0 <HAL_RCC_OscConfig+0x780>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002094:	2b00      	cmp	r3, #0
 8002096:	d001      	beq.n	800209c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	e0ad      	b.n	80021f8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800209c:	4b4c      	ldr	r3, [pc, #304]	; (80021d0 <HAL_RCC_OscConfig+0x780>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a4b      	ldr	r2, [pc, #300]	; (80021d0 <HAL_RCC_OscConfig+0x780>)
 80020a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020a6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80020a8:	f7ff f982 	bl	80013b0 <HAL_GetTick>
 80020ac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020ae:	e008      	b.n	80020c2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020b0:	f7ff f97e 	bl	80013b0 <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d901      	bls.n	80020c2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e09a      	b.n	80021f8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020c2:	4b43      	ldr	r3, [pc, #268]	; (80021d0 <HAL_RCC_OscConfig+0x780>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d1f0      	bne.n	80020b0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020ce:	4b40      	ldr	r3, [pc, #256]	; (80021d0 <HAL_RCC_OscConfig+0x780>)
 80020d0:	68da      	ldr	r2, [r3, #12]
 80020d2:	4b40      	ldr	r3, [pc, #256]	; (80021d4 <HAL_RCC_OscConfig+0x784>)
 80020d4:	4013      	ands	r3, r2
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80020de:	3a01      	subs	r2, #1
 80020e0:	0112      	lsls	r2, r2, #4
 80020e2:	4311      	orrs	r1, r2
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80020e8:	0212      	lsls	r2, r2, #8
 80020ea:	4311      	orrs	r1, r2
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80020f0:	0852      	lsrs	r2, r2, #1
 80020f2:	3a01      	subs	r2, #1
 80020f4:	0552      	lsls	r2, r2, #21
 80020f6:	4311      	orrs	r1, r2
 80020f8:	687a      	ldr	r2, [r7, #4]
 80020fa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80020fc:	0852      	lsrs	r2, r2, #1
 80020fe:	3a01      	subs	r2, #1
 8002100:	0652      	lsls	r2, r2, #25
 8002102:	4311      	orrs	r1, r2
 8002104:	687a      	ldr	r2, [r7, #4]
 8002106:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002108:	0912      	lsrs	r2, r2, #4
 800210a:	0452      	lsls	r2, r2, #17
 800210c:	430a      	orrs	r2, r1
 800210e:	4930      	ldr	r1, [pc, #192]	; (80021d0 <HAL_RCC_OscConfig+0x780>)
 8002110:	4313      	orrs	r3, r2
 8002112:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002114:	4b2e      	ldr	r3, [pc, #184]	; (80021d0 <HAL_RCC_OscConfig+0x780>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a2d      	ldr	r2, [pc, #180]	; (80021d0 <HAL_RCC_OscConfig+0x780>)
 800211a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800211e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002120:	4b2b      	ldr	r3, [pc, #172]	; (80021d0 <HAL_RCC_OscConfig+0x780>)
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	4a2a      	ldr	r2, [pc, #168]	; (80021d0 <HAL_RCC_OscConfig+0x780>)
 8002126:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800212a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800212c:	f7ff f940 	bl	80013b0 <HAL_GetTick>
 8002130:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002132:	e008      	b.n	8002146 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002134:	f7ff f93c 	bl	80013b0 <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	2b02      	cmp	r3, #2
 8002140:	d901      	bls.n	8002146 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e058      	b.n	80021f8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002146:	4b22      	ldr	r3, [pc, #136]	; (80021d0 <HAL_RCC_OscConfig+0x780>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d0f0      	beq.n	8002134 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002152:	e050      	b.n	80021f6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e04f      	b.n	80021f8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002158:	4b1d      	ldr	r3, [pc, #116]	; (80021d0 <HAL_RCC_OscConfig+0x780>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002160:	2b00      	cmp	r3, #0
 8002162:	d148      	bne.n	80021f6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002164:	4b1a      	ldr	r3, [pc, #104]	; (80021d0 <HAL_RCC_OscConfig+0x780>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a19      	ldr	r2, [pc, #100]	; (80021d0 <HAL_RCC_OscConfig+0x780>)
 800216a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800216e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002170:	4b17      	ldr	r3, [pc, #92]	; (80021d0 <HAL_RCC_OscConfig+0x780>)
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	4a16      	ldr	r2, [pc, #88]	; (80021d0 <HAL_RCC_OscConfig+0x780>)
 8002176:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800217a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800217c:	f7ff f918 	bl	80013b0 <HAL_GetTick>
 8002180:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002182:	e008      	b.n	8002196 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002184:	f7ff f914 	bl	80013b0 <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	2b02      	cmp	r3, #2
 8002190:	d901      	bls.n	8002196 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e030      	b.n	80021f8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002196:	4b0e      	ldr	r3, [pc, #56]	; (80021d0 <HAL_RCC_OscConfig+0x780>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d0f0      	beq.n	8002184 <HAL_RCC_OscConfig+0x734>
 80021a2:	e028      	b.n	80021f6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021a4:	69bb      	ldr	r3, [r7, #24]
 80021a6:	2b0c      	cmp	r3, #12
 80021a8:	d023      	beq.n	80021f2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021aa:	4b09      	ldr	r3, [pc, #36]	; (80021d0 <HAL_RCC_OscConfig+0x780>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a08      	ldr	r2, [pc, #32]	; (80021d0 <HAL_RCC_OscConfig+0x780>)
 80021b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b6:	f7ff f8fb 	bl	80013b0 <HAL_GetTick>
 80021ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021bc:	e00c      	b.n	80021d8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021be:	f7ff f8f7 	bl	80013b0 <HAL_GetTick>
 80021c2:	4602      	mov	r2, r0
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	2b02      	cmp	r3, #2
 80021ca:	d905      	bls.n	80021d8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80021cc:	2303      	movs	r3, #3
 80021ce:	e013      	b.n	80021f8 <HAL_RCC_OscConfig+0x7a8>
 80021d0:	40021000 	.word	0x40021000
 80021d4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021d8:	4b09      	ldr	r3, [pc, #36]	; (8002200 <HAL_RCC_OscConfig+0x7b0>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d1ec      	bne.n	80021be <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80021e4:	4b06      	ldr	r3, [pc, #24]	; (8002200 <HAL_RCC_OscConfig+0x7b0>)
 80021e6:	68da      	ldr	r2, [r3, #12]
 80021e8:	4905      	ldr	r1, [pc, #20]	; (8002200 <HAL_RCC_OscConfig+0x7b0>)
 80021ea:	4b06      	ldr	r3, [pc, #24]	; (8002204 <HAL_RCC_OscConfig+0x7b4>)
 80021ec:	4013      	ands	r3, r2
 80021ee:	60cb      	str	r3, [r1, #12]
 80021f0:	e001      	b.n	80021f6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e000      	b.n	80021f8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80021f6:	2300      	movs	r3, #0
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3720      	adds	r7, #32
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	40021000 	.word	0x40021000
 8002204:	feeefffc 	.word	0xfeeefffc

08002208 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d101      	bne.n	800221c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e0e7      	b.n	80023ec <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800221c:	4b75      	ldr	r3, [pc, #468]	; (80023f4 <HAL_RCC_ClockConfig+0x1ec>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0307 	and.w	r3, r3, #7
 8002224:	683a      	ldr	r2, [r7, #0]
 8002226:	429a      	cmp	r2, r3
 8002228:	d910      	bls.n	800224c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800222a:	4b72      	ldr	r3, [pc, #456]	; (80023f4 <HAL_RCC_ClockConfig+0x1ec>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f023 0207 	bic.w	r2, r3, #7
 8002232:	4970      	ldr	r1, [pc, #448]	; (80023f4 <HAL_RCC_ClockConfig+0x1ec>)
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	4313      	orrs	r3, r2
 8002238:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800223a:	4b6e      	ldr	r3, [pc, #440]	; (80023f4 <HAL_RCC_ClockConfig+0x1ec>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0307 	and.w	r3, r3, #7
 8002242:	683a      	ldr	r2, [r7, #0]
 8002244:	429a      	cmp	r2, r3
 8002246:	d001      	beq.n	800224c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e0cf      	b.n	80023ec <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0302 	and.w	r3, r3, #2
 8002254:	2b00      	cmp	r3, #0
 8002256:	d010      	beq.n	800227a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	689a      	ldr	r2, [r3, #8]
 800225c:	4b66      	ldr	r3, [pc, #408]	; (80023f8 <HAL_RCC_ClockConfig+0x1f0>)
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002264:	429a      	cmp	r2, r3
 8002266:	d908      	bls.n	800227a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002268:	4b63      	ldr	r3, [pc, #396]	; (80023f8 <HAL_RCC_ClockConfig+0x1f0>)
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	4960      	ldr	r1, [pc, #384]	; (80023f8 <HAL_RCC_ClockConfig+0x1f0>)
 8002276:	4313      	orrs	r3, r2
 8002278:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0301 	and.w	r3, r3, #1
 8002282:	2b00      	cmp	r3, #0
 8002284:	d04c      	beq.n	8002320 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	2b03      	cmp	r3, #3
 800228c:	d107      	bne.n	800229e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800228e:	4b5a      	ldr	r3, [pc, #360]	; (80023f8 <HAL_RCC_ClockConfig+0x1f0>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d121      	bne.n	80022de <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e0a6      	b.n	80023ec <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d107      	bne.n	80022b6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022a6:	4b54      	ldr	r3, [pc, #336]	; (80023f8 <HAL_RCC_ClockConfig+0x1f0>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d115      	bne.n	80022de <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e09a      	b.n	80023ec <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d107      	bne.n	80022ce <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022be:	4b4e      	ldr	r3, [pc, #312]	; (80023f8 <HAL_RCC_ClockConfig+0x1f0>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0302 	and.w	r3, r3, #2
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d109      	bne.n	80022de <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e08e      	b.n	80023ec <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022ce:	4b4a      	ldr	r3, [pc, #296]	; (80023f8 <HAL_RCC_ClockConfig+0x1f0>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d101      	bne.n	80022de <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e086      	b.n	80023ec <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80022de:	4b46      	ldr	r3, [pc, #280]	; (80023f8 <HAL_RCC_ClockConfig+0x1f0>)
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	f023 0203 	bic.w	r2, r3, #3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	4943      	ldr	r1, [pc, #268]	; (80023f8 <HAL_RCC_ClockConfig+0x1f0>)
 80022ec:	4313      	orrs	r3, r2
 80022ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022f0:	f7ff f85e 	bl	80013b0 <HAL_GetTick>
 80022f4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022f6:	e00a      	b.n	800230e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022f8:	f7ff f85a 	bl	80013b0 <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	f241 3288 	movw	r2, #5000	; 0x1388
 8002306:	4293      	cmp	r3, r2
 8002308:	d901      	bls.n	800230e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	e06e      	b.n	80023ec <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800230e:	4b3a      	ldr	r3, [pc, #232]	; (80023f8 <HAL_RCC_ClockConfig+0x1f0>)
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	f003 020c 	and.w	r2, r3, #12
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	429a      	cmp	r2, r3
 800231e:	d1eb      	bne.n	80022f8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 0302 	and.w	r3, r3, #2
 8002328:	2b00      	cmp	r3, #0
 800232a:	d010      	beq.n	800234e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	689a      	ldr	r2, [r3, #8]
 8002330:	4b31      	ldr	r3, [pc, #196]	; (80023f8 <HAL_RCC_ClockConfig+0x1f0>)
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002338:	429a      	cmp	r2, r3
 800233a:	d208      	bcs.n	800234e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800233c:	4b2e      	ldr	r3, [pc, #184]	; (80023f8 <HAL_RCC_ClockConfig+0x1f0>)
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	492b      	ldr	r1, [pc, #172]	; (80023f8 <HAL_RCC_ClockConfig+0x1f0>)
 800234a:	4313      	orrs	r3, r2
 800234c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800234e:	4b29      	ldr	r3, [pc, #164]	; (80023f4 <HAL_RCC_ClockConfig+0x1ec>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0307 	and.w	r3, r3, #7
 8002356:	683a      	ldr	r2, [r7, #0]
 8002358:	429a      	cmp	r2, r3
 800235a:	d210      	bcs.n	800237e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800235c:	4b25      	ldr	r3, [pc, #148]	; (80023f4 <HAL_RCC_ClockConfig+0x1ec>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f023 0207 	bic.w	r2, r3, #7
 8002364:	4923      	ldr	r1, [pc, #140]	; (80023f4 <HAL_RCC_ClockConfig+0x1ec>)
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	4313      	orrs	r3, r2
 800236a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800236c:	4b21      	ldr	r3, [pc, #132]	; (80023f4 <HAL_RCC_ClockConfig+0x1ec>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0307 	and.w	r3, r3, #7
 8002374:	683a      	ldr	r2, [r7, #0]
 8002376:	429a      	cmp	r2, r3
 8002378:	d001      	beq.n	800237e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e036      	b.n	80023ec <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0304 	and.w	r3, r3, #4
 8002386:	2b00      	cmp	r3, #0
 8002388:	d008      	beq.n	800239c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800238a:	4b1b      	ldr	r3, [pc, #108]	; (80023f8 <HAL_RCC_ClockConfig+0x1f0>)
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	68db      	ldr	r3, [r3, #12]
 8002396:	4918      	ldr	r1, [pc, #96]	; (80023f8 <HAL_RCC_ClockConfig+0x1f0>)
 8002398:	4313      	orrs	r3, r2
 800239a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0308 	and.w	r3, r3, #8
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d009      	beq.n	80023bc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023a8:	4b13      	ldr	r3, [pc, #76]	; (80023f8 <HAL_RCC_ClockConfig+0x1f0>)
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	691b      	ldr	r3, [r3, #16]
 80023b4:	00db      	lsls	r3, r3, #3
 80023b6:	4910      	ldr	r1, [pc, #64]	; (80023f8 <HAL_RCC_ClockConfig+0x1f0>)
 80023b8:	4313      	orrs	r3, r2
 80023ba:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80023bc:	f000 f824 	bl	8002408 <HAL_RCC_GetSysClockFreq>
 80023c0:	4602      	mov	r2, r0
 80023c2:	4b0d      	ldr	r3, [pc, #52]	; (80023f8 <HAL_RCC_ClockConfig+0x1f0>)
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	091b      	lsrs	r3, r3, #4
 80023c8:	f003 030f 	and.w	r3, r3, #15
 80023cc:	490b      	ldr	r1, [pc, #44]	; (80023fc <HAL_RCC_ClockConfig+0x1f4>)
 80023ce:	5ccb      	ldrb	r3, [r1, r3]
 80023d0:	f003 031f 	and.w	r3, r3, #31
 80023d4:	fa22 f303 	lsr.w	r3, r2, r3
 80023d8:	4a09      	ldr	r2, [pc, #36]	; (8002400 <HAL_RCC_ClockConfig+0x1f8>)
 80023da:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80023dc:	4b09      	ldr	r3, [pc, #36]	; (8002404 <HAL_RCC_ClockConfig+0x1fc>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7fe fbd3 	bl	8000b8c <HAL_InitTick>
 80023e6:	4603      	mov	r3, r0
 80023e8:	72fb      	strb	r3, [r7, #11]

  return status;
 80023ea:	7afb      	ldrb	r3, [r7, #11]
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3710      	adds	r7, #16
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	40022000 	.word	0x40022000
 80023f8:	40021000 	.word	0x40021000
 80023fc:	08007004 	.word	0x08007004
 8002400:	20000018 	.word	0x20000018
 8002404:	2000001c 	.word	0x2000001c

08002408 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002408:	b480      	push	{r7}
 800240a:	b089      	sub	sp, #36	; 0x24
 800240c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800240e:	2300      	movs	r3, #0
 8002410:	61fb      	str	r3, [r7, #28]
 8002412:	2300      	movs	r3, #0
 8002414:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002416:	4b3e      	ldr	r3, [pc, #248]	; (8002510 <HAL_RCC_GetSysClockFreq+0x108>)
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f003 030c 	and.w	r3, r3, #12
 800241e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002420:	4b3b      	ldr	r3, [pc, #236]	; (8002510 <HAL_RCC_GetSysClockFreq+0x108>)
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	f003 0303 	and.w	r3, r3, #3
 8002428:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d005      	beq.n	800243c <HAL_RCC_GetSysClockFreq+0x34>
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	2b0c      	cmp	r3, #12
 8002434:	d121      	bne.n	800247a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2b01      	cmp	r3, #1
 800243a:	d11e      	bne.n	800247a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800243c:	4b34      	ldr	r3, [pc, #208]	; (8002510 <HAL_RCC_GetSysClockFreq+0x108>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0308 	and.w	r3, r3, #8
 8002444:	2b00      	cmp	r3, #0
 8002446:	d107      	bne.n	8002458 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002448:	4b31      	ldr	r3, [pc, #196]	; (8002510 <HAL_RCC_GetSysClockFreq+0x108>)
 800244a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800244e:	0a1b      	lsrs	r3, r3, #8
 8002450:	f003 030f 	and.w	r3, r3, #15
 8002454:	61fb      	str	r3, [r7, #28]
 8002456:	e005      	b.n	8002464 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002458:	4b2d      	ldr	r3, [pc, #180]	; (8002510 <HAL_RCC_GetSysClockFreq+0x108>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	091b      	lsrs	r3, r3, #4
 800245e:	f003 030f 	and.w	r3, r3, #15
 8002462:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002464:	4a2b      	ldr	r2, [pc, #172]	; (8002514 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800246c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d10d      	bne.n	8002490 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002478:	e00a      	b.n	8002490 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	2b04      	cmp	r3, #4
 800247e:	d102      	bne.n	8002486 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002480:	4b25      	ldr	r3, [pc, #148]	; (8002518 <HAL_RCC_GetSysClockFreq+0x110>)
 8002482:	61bb      	str	r3, [r7, #24]
 8002484:	e004      	b.n	8002490 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	2b08      	cmp	r3, #8
 800248a:	d101      	bne.n	8002490 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800248c:	4b23      	ldr	r3, [pc, #140]	; (800251c <HAL_RCC_GetSysClockFreq+0x114>)
 800248e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	2b0c      	cmp	r3, #12
 8002494:	d134      	bne.n	8002500 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002496:	4b1e      	ldr	r3, [pc, #120]	; (8002510 <HAL_RCC_GetSysClockFreq+0x108>)
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	f003 0303 	and.w	r3, r3, #3
 800249e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d003      	beq.n	80024ae <HAL_RCC_GetSysClockFreq+0xa6>
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	2b03      	cmp	r3, #3
 80024aa:	d003      	beq.n	80024b4 <HAL_RCC_GetSysClockFreq+0xac>
 80024ac:	e005      	b.n	80024ba <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80024ae:	4b1a      	ldr	r3, [pc, #104]	; (8002518 <HAL_RCC_GetSysClockFreq+0x110>)
 80024b0:	617b      	str	r3, [r7, #20]
      break;
 80024b2:	e005      	b.n	80024c0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80024b4:	4b19      	ldr	r3, [pc, #100]	; (800251c <HAL_RCC_GetSysClockFreq+0x114>)
 80024b6:	617b      	str	r3, [r7, #20]
      break;
 80024b8:	e002      	b.n	80024c0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	617b      	str	r3, [r7, #20]
      break;
 80024be:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80024c0:	4b13      	ldr	r3, [pc, #76]	; (8002510 <HAL_RCC_GetSysClockFreq+0x108>)
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	091b      	lsrs	r3, r3, #4
 80024c6:	f003 0307 	and.w	r3, r3, #7
 80024ca:	3301      	adds	r3, #1
 80024cc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80024ce:	4b10      	ldr	r3, [pc, #64]	; (8002510 <HAL_RCC_GetSysClockFreq+0x108>)
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	0a1b      	lsrs	r3, r3, #8
 80024d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80024d8:	697a      	ldr	r2, [r7, #20]
 80024da:	fb03 f202 	mul.w	r2, r3, r2
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80024e4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80024e6:	4b0a      	ldr	r3, [pc, #40]	; (8002510 <HAL_RCC_GetSysClockFreq+0x108>)
 80024e8:	68db      	ldr	r3, [r3, #12]
 80024ea:	0e5b      	lsrs	r3, r3, #25
 80024ec:	f003 0303 	and.w	r3, r3, #3
 80024f0:	3301      	adds	r3, #1
 80024f2:	005b      	lsls	r3, r3, #1
 80024f4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80024f6:	697a      	ldr	r2, [r7, #20]
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80024fe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002500:	69bb      	ldr	r3, [r7, #24]
}
 8002502:	4618      	mov	r0, r3
 8002504:	3724      	adds	r7, #36	; 0x24
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	40021000 	.word	0x40021000
 8002514:	0800701c 	.word	0x0800701c
 8002518:	00f42400 	.word	0x00f42400
 800251c:	007a1200 	.word	0x007a1200

08002520 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002524:	4b03      	ldr	r3, [pc, #12]	; (8002534 <HAL_RCC_GetHCLKFreq+0x14>)
 8002526:	681b      	ldr	r3, [r3, #0]
}
 8002528:	4618      	mov	r0, r3
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	20000018 	.word	0x20000018

08002538 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800253c:	f7ff fff0 	bl	8002520 <HAL_RCC_GetHCLKFreq>
 8002540:	4602      	mov	r2, r0
 8002542:	4b06      	ldr	r3, [pc, #24]	; (800255c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	0adb      	lsrs	r3, r3, #11
 8002548:	f003 0307 	and.w	r3, r3, #7
 800254c:	4904      	ldr	r1, [pc, #16]	; (8002560 <HAL_RCC_GetPCLK2Freq+0x28>)
 800254e:	5ccb      	ldrb	r3, [r1, r3]
 8002550:	f003 031f 	and.w	r3, r3, #31
 8002554:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002558:	4618      	mov	r0, r3
 800255a:	bd80      	pop	{r7, pc}
 800255c:	40021000 	.word	0x40021000
 8002560:	08007014 	.word	0x08007014

08002564 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	220f      	movs	r2, #15
 8002572:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002574:	4b12      	ldr	r3, [pc, #72]	; (80025c0 <HAL_RCC_GetClockConfig+0x5c>)
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	f003 0203 	and.w	r2, r3, #3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002580:	4b0f      	ldr	r3, [pc, #60]	; (80025c0 <HAL_RCC_GetClockConfig+0x5c>)
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800258c:	4b0c      	ldr	r3, [pc, #48]	; (80025c0 <HAL_RCC_GetClockConfig+0x5c>)
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002598:	4b09      	ldr	r3, [pc, #36]	; (80025c0 <HAL_RCC_GetClockConfig+0x5c>)
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	08db      	lsrs	r3, r3, #3
 800259e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80025a6:	4b07      	ldr	r3, [pc, #28]	; (80025c4 <HAL_RCC_GetClockConfig+0x60>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0207 	and.w	r2, r3, #7
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	601a      	str	r2, [r3, #0]
}
 80025b2:	bf00      	nop
 80025b4:	370c      	adds	r7, #12
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop
 80025c0:	40021000 	.word	0x40021000
 80025c4:	40022000 	.word	0x40022000

080025c8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b086      	sub	sp, #24
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80025d0:	2300      	movs	r3, #0
 80025d2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80025d4:	4b2a      	ldr	r3, [pc, #168]	; (8002680 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d003      	beq.n	80025e8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80025e0:	f7ff f9d2 	bl	8001988 <HAL_PWREx_GetVoltageRange>
 80025e4:	6178      	str	r0, [r7, #20]
 80025e6:	e014      	b.n	8002612 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80025e8:	4b25      	ldr	r3, [pc, #148]	; (8002680 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ec:	4a24      	ldr	r2, [pc, #144]	; (8002680 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025f2:	6593      	str	r3, [r2, #88]	; 0x58
 80025f4:	4b22      	ldr	r3, [pc, #136]	; (8002680 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025fc:	60fb      	str	r3, [r7, #12]
 80025fe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002600:	f7ff f9c2 	bl	8001988 <HAL_PWREx_GetVoltageRange>
 8002604:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002606:	4b1e      	ldr	r3, [pc, #120]	; (8002680 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002608:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800260a:	4a1d      	ldr	r2, [pc, #116]	; (8002680 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800260c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002610:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002618:	d10b      	bne.n	8002632 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2b80      	cmp	r3, #128	; 0x80
 800261e:	d919      	bls.n	8002654 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2ba0      	cmp	r3, #160	; 0xa0
 8002624:	d902      	bls.n	800262c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002626:	2302      	movs	r3, #2
 8002628:	613b      	str	r3, [r7, #16]
 800262a:	e013      	b.n	8002654 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800262c:	2301      	movs	r3, #1
 800262e:	613b      	str	r3, [r7, #16]
 8002630:	e010      	b.n	8002654 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2b80      	cmp	r3, #128	; 0x80
 8002636:	d902      	bls.n	800263e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002638:	2303      	movs	r3, #3
 800263a:	613b      	str	r3, [r7, #16]
 800263c:	e00a      	b.n	8002654 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2b80      	cmp	r3, #128	; 0x80
 8002642:	d102      	bne.n	800264a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002644:	2302      	movs	r3, #2
 8002646:	613b      	str	r3, [r7, #16]
 8002648:	e004      	b.n	8002654 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2b70      	cmp	r3, #112	; 0x70
 800264e:	d101      	bne.n	8002654 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002650:	2301      	movs	r3, #1
 8002652:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002654:	4b0b      	ldr	r3, [pc, #44]	; (8002684 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f023 0207 	bic.w	r2, r3, #7
 800265c:	4909      	ldr	r1, [pc, #36]	; (8002684 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	4313      	orrs	r3, r2
 8002662:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002664:	4b07      	ldr	r3, [pc, #28]	; (8002684 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0307 	and.w	r3, r3, #7
 800266c:	693a      	ldr	r2, [r7, #16]
 800266e:	429a      	cmp	r2, r3
 8002670:	d001      	beq.n	8002676 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e000      	b.n	8002678 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002676:	2300      	movs	r3, #0
}
 8002678:	4618      	mov	r0, r3
 800267a:	3718      	adds	r7, #24
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}
 8002680:	40021000 	.word	0x40021000
 8002684:	40022000 	.word	0x40022000

08002688 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d101      	bne.n	800269a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e095      	b.n	80027c6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d108      	bne.n	80026b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80026aa:	d009      	beq.n	80026c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2200      	movs	r2, #0
 80026b0:	61da      	str	r2, [r3, #28]
 80026b2:	e005      	b.n	80026c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2200      	movs	r2, #0
 80026b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2200      	movs	r2, #0
 80026be:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2200      	movs	r2, #0
 80026c4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d106      	bne.n	80026e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f7fe f9cc 	bl	8000a78 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2202      	movs	r2, #2
 80026e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026f6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002700:	d902      	bls.n	8002708 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002702:	2300      	movs	r3, #0
 8002704:	60fb      	str	r3, [r7, #12]
 8002706:	e002      	b.n	800270e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002708:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800270c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	68db      	ldr	r3, [r3, #12]
 8002712:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002716:	d007      	beq.n	8002728 <HAL_SPI_Init+0xa0>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002720:	d002      	beq.n	8002728 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002738:	431a      	orrs	r2, r3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	691b      	ldr	r3, [r3, #16]
 800273e:	f003 0302 	and.w	r3, r3, #2
 8002742:	431a      	orrs	r2, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	695b      	ldr	r3, [r3, #20]
 8002748:	f003 0301 	and.w	r3, r3, #1
 800274c:	431a      	orrs	r2, r3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	699b      	ldr	r3, [r3, #24]
 8002752:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002756:	431a      	orrs	r2, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	69db      	ldr	r3, [r3, #28]
 800275c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002760:	431a      	orrs	r2, r3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6a1b      	ldr	r3, [r3, #32]
 8002766:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800276a:	ea42 0103 	orr.w	r1, r2, r3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002772:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	430a      	orrs	r2, r1
 800277c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	699b      	ldr	r3, [r3, #24]
 8002782:	0c1b      	lsrs	r3, r3, #16
 8002784:	f003 0204 	and.w	r2, r3, #4
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278c:	f003 0310 	and.w	r3, r3, #16
 8002790:	431a      	orrs	r2, r3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002796:	f003 0308 	and.w	r3, r3, #8
 800279a:	431a      	orrs	r2, r3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80027a4:	ea42 0103 	orr.w	r1, r2, r3
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	430a      	orrs	r2, r1
 80027b4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2201      	movs	r2, #1
 80027c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80027c4:	2300      	movs	r3, #0
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3710      	adds	r7, #16
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}

080027ce <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027ce:	b580      	push	{r7, lr}
 80027d0:	b088      	sub	sp, #32
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	60f8      	str	r0, [r7, #12]
 80027d6:	60b9      	str	r1, [r7, #8]
 80027d8:	603b      	str	r3, [r7, #0]
 80027da:	4613      	mov	r3, r2
 80027dc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80027de:	2300      	movs	r3, #0
 80027e0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d101      	bne.n	80027f0 <HAL_SPI_Transmit+0x22>
 80027ec:	2302      	movs	r3, #2
 80027ee:	e158      	b.n	8002aa2 <HAL_SPI_Transmit+0x2d4>
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2201      	movs	r2, #1
 80027f4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80027f8:	f7fe fdda 	bl	80013b0 <HAL_GetTick>
 80027fc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80027fe:	88fb      	ldrh	r3, [r7, #6]
 8002800:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002808:	b2db      	uxtb	r3, r3
 800280a:	2b01      	cmp	r3, #1
 800280c:	d002      	beq.n	8002814 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800280e:	2302      	movs	r3, #2
 8002810:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002812:	e13d      	b.n	8002a90 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d002      	beq.n	8002820 <HAL_SPI_Transmit+0x52>
 800281a:	88fb      	ldrh	r3, [r7, #6]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d102      	bne.n	8002826 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002824:	e134      	b.n	8002a90 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2203      	movs	r2, #3
 800282a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2200      	movs	r2, #0
 8002832:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	68ba      	ldr	r2, [r7, #8]
 8002838:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	88fa      	ldrh	r2, [r7, #6]
 800283e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	88fa      	ldrh	r2, [r7, #6]
 8002844:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2200      	movs	r2, #0
 800284a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2200      	movs	r2, #0
 8002850:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2200      	movs	r2, #0
 8002858:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2200      	movs	r2, #0
 8002860:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2200      	movs	r2, #0
 8002866:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002870:	d10f      	bne.n	8002892 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002880:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002890:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800289c:	2b40      	cmp	r3, #64	; 0x40
 800289e:	d007      	beq.n	80028b0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028ae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80028b8:	d94b      	bls.n	8002952 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d002      	beq.n	80028c8 <HAL_SPI_Transmit+0xfa>
 80028c2:	8afb      	ldrh	r3, [r7, #22]
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d13e      	bne.n	8002946 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028cc:	881a      	ldrh	r2, [r3, #0]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028d8:	1c9a      	adds	r2, r3, #2
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	3b01      	subs	r3, #1
 80028e6:	b29a      	uxth	r2, r3
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80028ec:	e02b      	b.n	8002946 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	f003 0302 	and.w	r3, r3, #2
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d112      	bne.n	8002922 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002900:	881a      	ldrh	r2, [r3, #0]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800290c:	1c9a      	adds	r2, r3, #2
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002916:	b29b      	uxth	r3, r3
 8002918:	3b01      	subs	r3, #1
 800291a:	b29a      	uxth	r2, r3
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002920:	e011      	b.n	8002946 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002922:	f7fe fd45 	bl	80013b0 <HAL_GetTick>
 8002926:	4602      	mov	r2, r0
 8002928:	69bb      	ldr	r3, [r7, #24]
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	683a      	ldr	r2, [r7, #0]
 800292e:	429a      	cmp	r2, r3
 8002930:	d803      	bhi.n	800293a <HAL_SPI_Transmit+0x16c>
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002938:	d102      	bne.n	8002940 <HAL_SPI_Transmit+0x172>
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d102      	bne.n	8002946 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8002940:	2303      	movs	r3, #3
 8002942:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002944:	e0a4      	b.n	8002a90 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800294a:	b29b      	uxth	r3, r3
 800294c:	2b00      	cmp	r3, #0
 800294e:	d1ce      	bne.n	80028ee <HAL_SPI_Transmit+0x120>
 8002950:	e07c      	b.n	8002a4c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d002      	beq.n	8002960 <HAL_SPI_Transmit+0x192>
 800295a:	8afb      	ldrh	r3, [r7, #22]
 800295c:	2b01      	cmp	r3, #1
 800295e:	d170      	bne.n	8002a42 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002964:	b29b      	uxth	r3, r3
 8002966:	2b01      	cmp	r3, #1
 8002968:	d912      	bls.n	8002990 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800296e:	881a      	ldrh	r2, [r3, #0]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800297a:	1c9a      	adds	r2, r3, #2
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002984:	b29b      	uxth	r3, r3
 8002986:	3b02      	subs	r3, #2
 8002988:	b29a      	uxth	r2, r3
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800298e:	e058      	b.n	8002a42 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	330c      	adds	r3, #12
 800299a:	7812      	ldrb	r2, [r2, #0]
 800299c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029a2:	1c5a      	adds	r2, r3, #1
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	3b01      	subs	r3, #1
 80029b0:	b29a      	uxth	r2, r3
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80029b6:	e044      	b.n	8002a42 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f003 0302 	and.w	r3, r3, #2
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d12b      	bne.n	8002a1e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029ca:	b29b      	uxth	r3, r3
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d912      	bls.n	80029f6 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029d4:	881a      	ldrh	r2, [r3, #0]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029e0:	1c9a      	adds	r2, r3, #2
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	3b02      	subs	r3, #2
 80029ee:	b29a      	uxth	r2, r3
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80029f4:	e025      	b.n	8002a42 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	330c      	adds	r3, #12
 8002a00:	7812      	ldrb	r2, [r2, #0]
 8002a02:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a08:	1c5a      	adds	r2, r3, #1
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	3b01      	subs	r3, #1
 8002a16:	b29a      	uxth	r2, r3
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002a1c:	e011      	b.n	8002a42 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a1e:	f7fe fcc7 	bl	80013b0 <HAL_GetTick>
 8002a22:	4602      	mov	r2, r0
 8002a24:	69bb      	ldr	r3, [r7, #24]
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	683a      	ldr	r2, [r7, #0]
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d803      	bhi.n	8002a36 <HAL_SPI_Transmit+0x268>
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a34:	d102      	bne.n	8002a3c <HAL_SPI_Transmit+0x26e>
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d102      	bne.n	8002a42 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002a40:	e026      	b.n	8002a90 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d1b5      	bne.n	80029b8 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002a4c:	69ba      	ldr	r2, [r7, #24]
 8002a4e:	6839      	ldr	r1, [r7, #0]
 8002a50:	68f8      	ldr	r0, [r7, #12]
 8002a52:	f000 f949 	bl	8002ce8 <SPI_EndRxTxTransaction>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d002      	beq.n	8002a62 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2220      	movs	r2, #32
 8002a60:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d10a      	bne.n	8002a80 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	613b      	str	r3, [r7, #16]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	613b      	str	r3, [r7, #16]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	613b      	str	r3, [r7, #16]
 8002a7e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d002      	beq.n	8002a8e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	77fb      	strb	r3, [r7, #31]
 8002a8c:	e000      	b.n	8002a90 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8002a8e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002aa0:	7ffb      	ldrb	r3, [r7, #31]
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3720      	adds	r7, #32
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
	...

08002aac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b088      	sub	sp, #32
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	60f8      	str	r0, [r7, #12]
 8002ab4:	60b9      	str	r1, [r7, #8]
 8002ab6:	603b      	str	r3, [r7, #0]
 8002ab8:	4613      	mov	r3, r2
 8002aba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002abc:	f7fe fc78 	bl	80013b0 <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ac4:	1a9b      	subs	r3, r3, r2
 8002ac6:	683a      	ldr	r2, [r7, #0]
 8002ac8:	4413      	add	r3, r2
 8002aca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002acc:	f7fe fc70 	bl	80013b0 <HAL_GetTick>
 8002ad0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002ad2:	4b39      	ldr	r3, [pc, #228]	; (8002bb8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	015b      	lsls	r3, r3, #5
 8002ad8:	0d1b      	lsrs	r3, r3, #20
 8002ada:	69fa      	ldr	r2, [r7, #28]
 8002adc:	fb02 f303 	mul.w	r3, r2, r3
 8002ae0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ae2:	e054      	b.n	8002b8e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002aea:	d050      	beq.n	8002b8e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002aec:	f7fe fc60 	bl	80013b0 <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	69bb      	ldr	r3, [r7, #24]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	69fa      	ldr	r2, [r7, #28]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d902      	bls.n	8002b02 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d13d      	bne.n	8002b7e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	685a      	ldr	r2, [r3, #4]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002b10:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b1a:	d111      	bne.n	8002b40 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b24:	d004      	beq.n	8002b30 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b2e:	d107      	bne.n	8002b40 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b3e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b48:	d10f      	bne.n	8002b6a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b58:	601a      	str	r2, [r3, #0]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b68:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e017      	b.n	8002bae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d101      	bne.n	8002b88 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002b84:	2300      	movs	r3, #0
 8002b86:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	3b01      	subs	r3, #1
 8002b8c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	689a      	ldr	r2, [r3, #8]
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	4013      	ands	r3, r2
 8002b98:	68ba      	ldr	r2, [r7, #8]
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	bf0c      	ite	eq
 8002b9e:	2301      	moveq	r3, #1
 8002ba0:	2300      	movne	r3, #0
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	79fb      	ldrb	r3, [r7, #7]
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d19b      	bne.n	8002ae4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002bac:	2300      	movs	r3, #0
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3720      	adds	r7, #32
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	20000018 	.word	0x20000018

08002bbc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b08a      	sub	sp, #40	; 0x28
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	60b9      	str	r1, [r7, #8]
 8002bc6:	607a      	str	r2, [r7, #4]
 8002bc8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002bce:	f7fe fbef 	bl	80013b0 <HAL_GetTick>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bd6:	1a9b      	subs	r3, r3, r2
 8002bd8:	683a      	ldr	r2, [r7, #0]
 8002bda:	4413      	add	r3, r2
 8002bdc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8002bde:	f7fe fbe7 	bl	80013b0 <HAL_GetTick>
 8002be2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	330c      	adds	r3, #12
 8002bea:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002bec:	4b3d      	ldr	r3, [pc, #244]	; (8002ce4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	4413      	add	r3, r2
 8002bf6:	00da      	lsls	r2, r3, #3
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	0d1b      	lsrs	r3, r3, #20
 8002bfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bfe:	fb02 f303 	mul.w	r3, r2, r3
 8002c02:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002c04:	e060      	b.n	8002cc8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002c0c:	d107      	bne.n	8002c1e <SPI_WaitFifoStateUntilTimeout+0x62>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d104      	bne.n	8002c1e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002c1c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c24:	d050      	beq.n	8002cc8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002c26:	f7fe fbc3 	bl	80013b0 <HAL_GetTick>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	6a3b      	ldr	r3, [r7, #32]
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d902      	bls.n	8002c3c <SPI_WaitFifoStateUntilTimeout+0x80>
 8002c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d13d      	bne.n	8002cb8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	685a      	ldr	r2, [r3, #4]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002c4a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c54:	d111      	bne.n	8002c7a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c5e:	d004      	beq.n	8002c6a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c68:	d107      	bne.n	8002c7a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c78:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c82:	d10f      	bne.n	8002ca4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c92:	601a      	str	r2, [r3, #0]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ca2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	e010      	b.n	8002cda <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002cb8:	69bb      	ldr	r3, [r7, #24]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d101      	bne.n	8002cc2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	3b01      	subs	r3, #1
 8002cc6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	689a      	ldr	r2, [r3, #8]
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d196      	bne.n	8002c06 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8002cd8:	2300      	movs	r3, #0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3728      	adds	r7, #40	; 0x28
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	20000018 	.word	0x20000018

08002ce8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b086      	sub	sp, #24
 8002cec:	af02      	add	r7, sp, #8
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	60b9      	str	r1, [r7, #8]
 8002cf2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	9300      	str	r3, [sp, #0]
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002d00:	68f8      	ldr	r0, [r7, #12]
 8002d02:	f7ff ff5b 	bl	8002bbc <SPI_WaitFifoStateUntilTimeout>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d007      	beq.n	8002d1c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d10:	f043 0220 	orr.w	r2, r3, #32
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	e027      	b.n	8002d6c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	9300      	str	r3, [sp, #0]
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	2200      	movs	r2, #0
 8002d24:	2180      	movs	r1, #128	; 0x80
 8002d26:	68f8      	ldr	r0, [r7, #12]
 8002d28:	f7ff fec0 	bl	8002aac <SPI_WaitFlagStateUntilTimeout>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d007      	beq.n	8002d42 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d36:	f043 0220 	orr.w	r2, r3, #32
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e014      	b.n	8002d6c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	9300      	str	r3, [sp, #0]
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002d4e:	68f8      	ldr	r0, [r7, #12]
 8002d50:	f7ff ff34 	bl	8002bbc <SPI_WaitFifoStateUntilTimeout>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d007      	beq.n	8002d6a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d5e:	f043 0220 	orr.w	r2, r3, #32
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e000      	b.n	8002d6c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002d6a:	2300      	movs	r3, #0
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3710      	adds	r7, #16
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d101      	bne.n	8002d86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e049      	b.n	8002e1a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d106      	bne.n	8002da0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2200      	movs	r2, #0
 8002d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f000 f841 	bl	8002e22 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2202      	movs	r2, #2
 8002da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	3304      	adds	r3, #4
 8002db0:	4619      	mov	r1, r3
 8002db2:	4610      	mov	r0, r2
 8002db4:	f000 f9f8 	bl	80031a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2201      	movs	r2, #1
 8002de4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2201      	movs	r2, #1
 8002dec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2201      	movs	r2, #1
 8002df4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2201      	movs	r2, #1
 8002e04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2201      	movs	r2, #1
 8002e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e18:	2300      	movs	r3, #0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3708      	adds	r7, #8
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}

08002e22 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002e22:	b480      	push	{r7}
 8002e24:	b083      	sub	sp, #12
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002e2a:	bf00      	nop
 8002e2c:	370c      	adds	r7, #12
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
	...

08002e38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b085      	sub	sp, #20
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d001      	beq.n	8002e50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e04f      	b.n	8002ef0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2202      	movs	r2, #2
 8002e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	68da      	ldr	r2, [r3, #12]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f042 0201 	orr.w	r2, r2, #1
 8002e66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a23      	ldr	r2, [pc, #140]	; (8002efc <HAL_TIM_Base_Start_IT+0xc4>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d01d      	beq.n	8002eae <HAL_TIM_Base_Start_IT+0x76>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e7a:	d018      	beq.n	8002eae <HAL_TIM_Base_Start_IT+0x76>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a1f      	ldr	r2, [pc, #124]	; (8002f00 <HAL_TIM_Base_Start_IT+0xc8>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d013      	beq.n	8002eae <HAL_TIM_Base_Start_IT+0x76>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a1e      	ldr	r2, [pc, #120]	; (8002f04 <HAL_TIM_Base_Start_IT+0xcc>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d00e      	beq.n	8002eae <HAL_TIM_Base_Start_IT+0x76>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a1c      	ldr	r2, [pc, #112]	; (8002f08 <HAL_TIM_Base_Start_IT+0xd0>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d009      	beq.n	8002eae <HAL_TIM_Base_Start_IT+0x76>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a1b      	ldr	r2, [pc, #108]	; (8002f0c <HAL_TIM_Base_Start_IT+0xd4>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d004      	beq.n	8002eae <HAL_TIM_Base_Start_IT+0x76>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a19      	ldr	r2, [pc, #100]	; (8002f10 <HAL_TIM_Base_Start_IT+0xd8>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d115      	bne.n	8002eda <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	689a      	ldr	r2, [r3, #8]
 8002eb4:	4b17      	ldr	r3, [pc, #92]	; (8002f14 <HAL_TIM_Base_Start_IT+0xdc>)
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2b06      	cmp	r3, #6
 8002ebe:	d015      	beq.n	8002eec <HAL_TIM_Base_Start_IT+0xb4>
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ec6:	d011      	beq.n	8002eec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f042 0201 	orr.w	r2, r2, #1
 8002ed6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ed8:	e008      	b.n	8002eec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f042 0201 	orr.w	r2, r2, #1
 8002ee8:	601a      	str	r2, [r3, #0]
 8002eea:	e000      	b.n	8002eee <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002eec:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002eee:	2300      	movs	r3, #0
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3714      	adds	r7, #20
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr
 8002efc:	40012c00 	.word	0x40012c00
 8002f00:	40000400 	.word	0x40000400
 8002f04:	40000800 	.word	0x40000800
 8002f08:	40000c00 	.word	0x40000c00
 8002f0c:	40013400 	.word	0x40013400
 8002f10:	40014000 	.word	0x40014000
 8002f14:	00010007 	.word	0x00010007

08002f18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	691b      	ldr	r3, [r3, #16]
 8002f26:	f003 0302 	and.w	r3, r3, #2
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d122      	bne.n	8002f74 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	f003 0302 	and.w	r3, r3, #2
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d11b      	bne.n	8002f74 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f06f 0202 	mvn.w	r2, #2
 8002f44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2201      	movs	r2, #1
 8002f4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	699b      	ldr	r3, [r3, #24]
 8002f52:	f003 0303 	and.w	r3, r3, #3
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d003      	beq.n	8002f62 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f000 f905 	bl	800316a <HAL_TIM_IC_CaptureCallback>
 8002f60:	e005      	b.n	8002f6e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f000 f8f7 	bl	8003156 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f000 f908 	bl	800317e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	691b      	ldr	r3, [r3, #16]
 8002f7a:	f003 0304 	and.w	r3, r3, #4
 8002f7e:	2b04      	cmp	r3, #4
 8002f80:	d122      	bne.n	8002fc8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	f003 0304 	and.w	r3, r3, #4
 8002f8c:	2b04      	cmp	r3, #4
 8002f8e:	d11b      	bne.n	8002fc8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f06f 0204 	mvn.w	r2, #4
 8002f98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2202      	movs	r2, #2
 8002f9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	699b      	ldr	r3, [r3, #24]
 8002fa6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d003      	beq.n	8002fb6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f000 f8db 	bl	800316a <HAL_TIM_IC_CaptureCallback>
 8002fb4:	e005      	b.n	8002fc2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f000 f8cd 	bl	8003156 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	f000 f8de 	bl	800317e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	691b      	ldr	r3, [r3, #16]
 8002fce:	f003 0308 	and.w	r3, r3, #8
 8002fd2:	2b08      	cmp	r3, #8
 8002fd4:	d122      	bne.n	800301c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	f003 0308 	and.w	r3, r3, #8
 8002fe0:	2b08      	cmp	r3, #8
 8002fe2:	d11b      	bne.n	800301c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f06f 0208 	mvn.w	r2, #8
 8002fec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2204      	movs	r2, #4
 8002ff2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	69db      	ldr	r3, [r3, #28]
 8002ffa:	f003 0303 	and.w	r3, r3, #3
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d003      	beq.n	800300a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f000 f8b1 	bl	800316a <HAL_TIM_IC_CaptureCallback>
 8003008:	e005      	b.n	8003016 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f000 f8a3 	bl	8003156 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	f000 f8b4 	bl	800317e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	691b      	ldr	r3, [r3, #16]
 8003022:	f003 0310 	and.w	r3, r3, #16
 8003026:	2b10      	cmp	r3, #16
 8003028:	d122      	bne.n	8003070 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	f003 0310 	and.w	r3, r3, #16
 8003034:	2b10      	cmp	r3, #16
 8003036:	d11b      	bne.n	8003070 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f06f 0210 	mvn.w	r2, #16
 8003040:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2208      	movs	r2, #8
 8003046:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	69db      	ldr	r3, [r3, #28]
 800304e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003052:	2b00      	cmp	r3, #0
 8003054:	d003      	beq.n	800305e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f000 f887 	bl	800316a <HAL_TIM_IC_CaptureCallback>
 800305c:	e005      	b.n	800306a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 f879 	bl	8003156 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f000 f88a 	bl	800317e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	691b      	ldr	r3, [r3, #16]
 8003076:	f003 0301 	and.w	r3, r3, #1
 800307a:	2b01      	cmp	r3, #1
 800307c:	d10e      	bne.n	800309c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	f003 0301 	and.w	r3, r3, #1
 8003088:	2b01      	cmp	r3, #1
 800308a:	d107      	bne.n	800309c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f06f 0201 	mvn.w	r2, #1
 8003094:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f7fd fc98 	bl	80009cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	691b      	ldr	r3, [r3, #16]
 80030a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030a6:	2b80      	cmp	r3, #128	; 0x80
 80030a8:	d10e      	bne.n	80030c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030b4:	2b80      	cmp	r3, #128	; 0x80
 80030b6:	d107      	bne.n	80030c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80030c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f000 f914 	bl	80032f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030d6:	d10e      	bne.n	80030f6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	68db      	ldr	r3, [r3, #12]
 80030de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030e2:	2b80      	cmp	r3, #128	; 0x80
 80030e4:	d107      	bne.n	80030f6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80030ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f000 f907 	bl	8003304 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	691b      	ldr	r3, [r3, #16]
 80030fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003100:	2b40      	cmp	r3, #64	; 0x40
 8003102:	d10e      	bne.n	8003122 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800310e:	2b40      	cmp	r3, #64	; 0x40
 8003110:	d107      	bne.n	8003122 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800311a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f000 f838 	bl	8003192 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	691b      	ldr	r3, [r3, #16]
 8003128:	f003 0320 	and.w	r3, r3, #32
 800312c:	2b20      	cmp	r3, #32
 800312e:	d10e      	bne.n	800314e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	f003 0320 	and.w	r3, r3, #32
 800313a:	2b20      	cmp	r3, #32
 800313c:	d107      	bne.n	800314e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f06f 0220 	mvn.w	r2, #32
 8003146:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f000 f8c7 	bl	80032dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800314e:	bf00      	nop
 8003150:	3708      	adds	r7, #8
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}

08003156 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003156:	b480      	push	{r7}
 8003158:	b083      	sub	sp, #12
 800315a:	af00      	add	r7, sp, #0
 800315c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800315e:	bf00      	nop
 8003160:	370c      	adds	r7, #12
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr

0800316a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800316a:	b480      	push	{r7}
 800316c:	b083      	sub	sp, #12
 800316e:	af00      	add	r7, sp, #0
 8003170:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003172:	bf00      	nop
 8003174:	370c      	adds	r7, #12
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr

0800317e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800317e:	b480      	push	{r7}
 8003180:	b083      	sub	sp, #12
 8003182:	af00      	add	r7, sp, #0
 8003184:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003186:	bf00      	nop
 8003188:	370c      	adds	r7, #12
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr

08003192 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003192:	b480      	push	{r7}
 8003194:	b083      	sub	sp, #12
 8003196:	af00      	add	r7, sp, #0
 8003198:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800319a:	bf00      	nop
 800319c:	370c      	adds	r7, #12
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr
	...

080031a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b085      	sub	sp, #20
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	4a40      	ldr	r2, [pc, #256]	; (80032bc <TIM_Base_SetConfig+0x114>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d013      	beq.n	80031e8 <TIM_Base_SetConfig+0x40>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031c6:	d00f      	beq.n	80031e8 <TIM_Base_SetConfig+0x40>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	4a3d      	ldr	r2, [pc, #244]	; (80032c0 <TIM_Base_SetConfig+0x118>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d00b      	beq.n	80031e8 <TIM_Base_SetConfig+0x40>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	4a3c      	ldr	r2, [pc, #240]	; (80032c4 <TIM_Base_SetConfig+0x11c>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d007      	beq.n	80031e8 <TIM_Base_SetConfig+0x40>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	4a3b      	ldr	r2, [pc, #236]	; (80032c8 <TIM_Base_SetConfig+0x120>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d003      	beq.n	80031e8 <TIM_Base_SetConfig+0x40>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	4a3a      	ldr	r2, [pc, #232]	; (80032cc <TIM_Base_SetConfig+0x124>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d108      	bne.n	80031fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	68fa      	ldr	r2, [r7, #12]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a2f      	ldr	r2, [pc, #188]	; (80032bc <TIM_Base_SetConfig+0x114>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d01f      	beq.n	8003242 <TIM_Base_SetConfig+0x9a>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003208:	d01b      	beq.n	8003242 <TIM_Base_SetConfig+0x9a>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4a2c      	ldr	r2, [pc, #176]	; (80032c0 <TIM_Base_SetConfig+0x118>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d017      	beq.n	8003242 <TIM_Base_SetConfig+0x9a>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4a2b      	ldr	r2, [pc, #172]	; (80032c4 <TIM_Base_SetConfig+0x11c>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d013      	beq.n	8003242 <TIM_Base_SetConfig+0x9a>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a2a      	ldr	r2, [pc, #168]	; (80032c8 <TIM_Base_SetConfig+0x120>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d00f      	beq.n	8003242 <TIM_Base_SetConfig+0x9a>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a29      	ldr	r2, [pc, #164]	; (80032cc <TIM_Base_SetConfig+0x124>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d00b      	beq.n	8003242 <TIM_Base_SetConfig+0x9a>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4a28      	ldr	r2, [pc, #160]	; (80032d0 <TIM_Base_SetConfig+0x128>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d007      	beq.n	8003242 <TIM_Base_SetConfig+0x9a>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4a27      	ldr	r2, [pc, #156]	; (80032d4 <TIM_Base_SetConfig+0x12c>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d003      	beq.n	8003242 <TIM_Base_SetConfig+0x9a>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4a26      	ldr	r2, [pc, #152]	; (80032d8 <TIM_Base_SetConfig+0x130>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d108      	bne.n	8003254 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003248:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	68db      	ldr	r3, [r3, #12]
 800324e:	68fa      	ldr	r2, [r7, #12]
 8003250:	4313      	orrs	r3, r2
 8003252:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	695b      	ldr	r3, [r3, #20]
 800325e:	4313      	orrs	r3, r2
 8003260:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	68fa      	ldr	r2, [r7, #12]
 8003266:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	689a      	ldr	r2, [r3, #8]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	4a10      	ldr	r2, [pc, #64]	; (80032bc <TIM_Base_SetConfig+0x114>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d00f      	beq.n	80032a0 <TIM_Base_SetConfig+0xf8>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	4a12      	ldr	r2, [pc, #72]	; (80032cc <TIM_Base_SetConfig+0x124>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d00b      	beq.n	80032a0 <TIM_Base_SetConfig+0xf8>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	4a11      	ldr	r2, [pc, #68]	; (80032d0 <TIM_Base_SetConfig+0x128>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d007      	beq.n	80032a0 <TIM_Base_SetConfig+0xf8>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	4a10      	ldr	r2, [pc, #64]	; (80032d4 <TIM_Base_SetConfig+0x12c>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d003      	beq.n	80032a0 <TIM_Base_SetConfig+0xf8>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	4a0f      	ldr	r2, [pc, #60]	; (80032d8 <TIM_Base_SetConfig+0x130>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d103      	bne.n	80032a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	691a      	ldr	r2, [r3, #16]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2201      	movs	r2, #1
 80032ac:	615a      	str	r2, [r3, #20]
}
 80032ae:	bf00      	nop
 80032b0:	3714      	adds	r7, #20
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr
 80032ba:	bf00      	nop
 80032bc:	40012c00 	.word	0x40012c00
 80032c0:	40000400 	.word	0x40000400
 80032c4:	40000800 	.word	0x40000800
 80032c8:	40000c00 	.word	0x40000c00
 80032cc:	40013400 	.word	0x40013400
 80032d0:	40014000 	.word	0x40014000
 80032d4:	40014400 	.word	0x40014400
 80032d8:	40014800 	.word	0x40014800

080032dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80032dc:	b480      	push	{r7}
 80032de:	b083      	sub	sp, #12
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80032e4:	bf00      	nop
 80032e6:	370c      	adds	r7, #12
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr

080032f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80032f8:	bf00      	nop
 80032fa:	370c      	adds	r7, #12
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr

08003304 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800330c:	bf00      	nop
 800330e:	370c      	adds	r7, #12
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr

08003318 <__NVIC_SetPriority>:
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	4603      	mov	r3, r0
 8003320:	6039      	str	r1, [r7, #0]
 8003322:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003324:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003328:	2b00      	cmp	r3, #0
 800332a:	db0a      	blt.n	8003342 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	b2da      	uxtb	r2, r3
 8003330:	490c      	ldr	r1, [pc, #48]	; (8003364 <__NVIC_SetPriority+0x4c>)
 8003332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003336:	0112      	lsls	r2, r2, #4
 8003338:	b2d2      	uxtb	r2, r2
 800333a:	440b      	add	r3, r1
 800333c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003340:	e00a      	b.n	8003358 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	b2da      	uxtb	r2, r3
 8003346:	4908      	ldr	r1, [pc, #32]	; (8003368 <__NVIC_SetPriority+0x50>)
 8003348:	79fb      	ldrb	r3, [r7, #7]
 800334a:	f003 030f 	and.w	r3, r3, #15
 800334e:	3b04      	subs	r3, #4
 8003350:	0112      	lsls	r2, r2, #4
 8003352:	b2d2      	uxtb	r2, r2
 8003354:	440b      	add	r3, r1
 8003356:	761a      	strb	r2, [r3, #24]
}
 8003358:	bf00      	nop
 800335a:	370c      	adds	r7, #12
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr
 8003364:	e000e100 	.word	0xe000e100
 8003368:	e000ed00 	.word	0xe000ed00

0800336c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800336c:	b580      	push	{r7, lr}
 800336e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003370:	4b05      	ldr	r3, [pc, #20]	; (8003388 <SysTick_Handler+0x1c>)
 8003372:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003374:	f002 fb26 	bl	80059c4 <xTaskGetSchedulerState>
 8003378:	4603      	mov	r3, r0
 800337a:	2b01      	cmp	r3, #1
 800337c:	d001      	beq.n	8003382 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800337e:	f003 fa0b 	bl	8006798 <xPortSysTickHandler>
  }
}
 8003382:	bf00      	nop
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	e000e010 	.word	0xe000e010

0800338c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800338c:	b580      	push	{r7, lr}
 800338e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003390:	2100      	movs	r1, #0
 8003392:	f06f 0004 	mvn.w	r0, #4
 8003396:	f7ff ffbf 	bl	8003318 <__NVIC_SetPriority>
#endif
}
 800339a:	bf00      	nop
 800339c:	bd80      	pop	{r7, pc}
	...

080033a0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80033a6:	f3ef 8305 	mrs	r3, IPSR
 80033aa:	603b      	str	r3, [r7, #0]
  return(result);
 80033ac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d003      	beq.n	80033ba <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80033b2:	f06f 0305 	mvn.w	r3, #5
 80033b6:	607b      	str	r3, [r7, #4]
 80033b8:	e00c      	b.n	80033d4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80033ba:	4b0a      	ldr	r3, [pc, #40]	; (80033e4 <osKernelInitialize+0x44>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d105      	bne.n	80033ce <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80033c2:	4b08      	ldr	r3, [pc, #32]	; (80033e4 <osKernelInitialize+0x44>)
 80033c4:	2201      	movs	r2, #1
 80033c6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80033c8:	2300      	movs	r3, #0
 80033ca:	607b      	str	r3, [r7, #4]
 80033cc:	e002      	b.n	80033d4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80033ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80033d2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80033d4:	687b      	ldr	r3, [r7, #4]
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	370c      	adds	r7, #12
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr
 80033e2:	bf00      	nop
 80033e4:	20000184 	.word	0x20000184

080033e8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b082      	sub	sp, #8
 80033ec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80033ee:	f3ef 8305 	mrs	r3, IPSR
 80033f2:	603b      	str	r3, [r7, #0]
  return(result);
 80033f4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d003      	beq.n	8003402 <osKernelStart+0x1a>
    stat = osErrorISR;
 80033fa:	f06f 0305 	mvn.w	r3, #5
 80033fe:	607b      	str	r3, [r7, #4]
 8003400:	e010      	b.n	8003424 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003402:	4b0b      	ldr	r3, [pc, #44]	; (8003430 <osKernelStart+0x48>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	2b01      	cmp	r3, #1
 8003408:	d109      	bne.n	800341e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800340a:	f7ff ffbf 	bl	800338c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800340e:	4b08      	ldr	r3, [pc, #32]	; (8003430 <osKernelStart+0x48>)
 8003410:	2202      	movs	r2, #2
 8003412:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003414:	f001 fe7a 	bl	800510c <vTaskStartScheduler>
      stat = osOK;
 8003418:	2300      	movs	r3, #0
 800341a:	607b      	str	r3, [r7, #4]
 800341c:	e002      	b.n	8003424 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800341e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003422:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003424:	687b      	ldr	r3, [r7, #4]
}
 8003426:	4618      	mov	r0, r3
 8003428:	3708      	adds	r7, #8
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	20000184 	.word	0x20000184

08003434 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003434:	b580      	push	{r7, lr}
 8003436:	b08e      	sub	sp, #56	; 0x38
 8003438:	af04      	add	r7, sp, #16
 800343a:	60f8      	str	r0, [r7, #12]
 800343c:	60b9      	str	r1, [r7, #8]
 800343e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003440:	2300      	movs	r3, #0
 8003442:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003444:	f3ef 8305 	mrs	r3, IPSR
 8003448:	617b      	str	r3, [r7, #20]
  return(result);
 800344a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800344c:	2b00      	cmp	r3, #0
 800344e:	d17e      	bne.n	800354e <osThreadNew+0x11a>
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d07b      	beq.n	800354e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003456:	2380      	movs	r3, #128	; 0x80
 8003458:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800345a:	2318      	movs	r3, #24
 800345c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800345e:	2300      	movs	r3, #0
 8003460:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003462:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003466:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d045      	beq.n	80034fa <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d002      	beq.n	800347c <osThreadNew+0x48>
        name = attr->name;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	699b      	ldr	r3, [r3, #24]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d002      	beq.n	800348a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	699b      	ldr	r3, [r3, #24]
 8003488:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d008      	beq.n	80034a2 <osThreadNew+0x6e>
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	2b38      	cmp	r3, #56	; 0x38
 8003494:	d805      	bhi.n	80034a2 <osThreadNew+0x6e>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	f003 0301 	and.w	r3, r3, #1
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d001      	beq.n	80034a6 <osThreadNew+0x72>
        return (NULL);
 80034a2:	2300      	movs	r3, #0
 80034a4:	e054      	b.n	8003550 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	695b      	ldr	r3, [r3, #20]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d003      	beq.n	80034b6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	695b      	ldr	r3, [r3, #20]
 80034b2:	089b      	lsrs	r3, r3, #2
 80034b4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d00e      	beq.n	80034dc <osThreadNew+0xa8>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	2bbb      	cmp	r3, #187	; 0xbb
 80034c4:	d90a      	bls.n	80034dc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d006      	beq.n	80034dc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	695b      	ldr	r3, [r3, #20]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d002      	beq.n	80034dc <osThreadNew+0xa8>
        mem = 1;
 80034d6:	2301      	movs	r3, #1
 80034d8:	61bb      	str	r3, [r7, #24]
 80034da:	e010      	b.n	80034fe <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d10c      	bne.n	80034fe <osThreadNew+0xca>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d108      	bne.n	80034fe <osThreadNew+0xca>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	691b      	ldr	r3, [r3, #16]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d104      	bne.n	80034fe <osThreadNew+0xca>
          mem = 0;
 80034f4:	2300      	movs	r3, #0
 80034f6:	61bb      	str	r3, [r7, #24]
 80034f8:	e001      	b.n	80034fe <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80034fa:	2300      	movs	r3, #0
 80034fc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80034fe:	69bb      	ldr	r3, [r7, #24]
 8003500:	2b01      	cmp	r3, #1
 8003502:	d110      	bne.n	8003526 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800350c:	9202      	str	r2, [sp, #8]
 800350e:	9301      	str	r3, [sp, #4]
 8003510:	69fb      	ldr	r3, [r7, #28]
 8003512:	9300      	str	r3, [sp, #0]
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	6a3a      	ldr	r2, [r7, #32]
 8003518:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800351a:	68f8      	ldr	r0, [r7, #12]
 800351c:	f001 fb04 	bl	8004b28 <xTaskCreateStatic>
 8003520:	4603      	mov	r3, r0
 8003522:	613b      	str	r3, [r7, #16]
 8003524:	e013      	b.n	800354e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d110      	bne.n	800354e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800352c:	6a3b      	ldr	r3, [r7, #32]
 800352e:	b29a      	uxth	r2, r3
 8003530:	f107 0310 	add.w	r3, r7, #16
 8003534:	9301      	str	r3, [sp, #4]
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	9300      	str	r3, [sp, #0]
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800353e:	68f8      	ldr	r0, [r7, #12]
 8003540:	f001 fb4f 	bl	8004be2 <xTaskCreate>
 8003544:	4603      	mov	r3, r0
 8003546:	2b01      	cmp	r3, #1
 8003548:	d001      	beq.n	800354e <osThreadNew+0x11a>
            hTask = NULL;
 800354a:	2300      	movs	r3, #0
 800354c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800354e:	693b      	ldr	r3, [r7, #16]
}
 8003550:	4618      	mov	r0, r3
 8003552:	3728      	adds	r7, #40	; 0x28
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}

08003558 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8003558:	b580      	push	{r7, lr}
 800355a:	b088      	sub	sp, #32
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8003560:	2300      	movs	r3, #0
 8003562:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003564:	f3ef 8305 	mrs	r3, IPSR
 8003568:	60bb      	str	r3, [r7, #8]
  return(result);
 800356a:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800356c:	2b00      	cmp	r3, #0
 800356e:	d174      	bne.n	800365a <osMutexNew+0x102>
    if (attr != NULL) {
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d003      	beq.n	800357e <osMutexNew+0x26>
      type = attr->attr_bits;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	61bb      	str	r3, [r7, #24]
 800357c:	e001      	b.n	8003582 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800357e:	2300      	movs	r3, #0
 8003580:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	f003 0301 	and.w	r3, r3, #1
 8003588:	2b00      	cmp	r3, #0
 800358a:	d002      	beq.n	8003592 <osMutexNew+0x3a>
      rmtx = 1U;
 800358c:	2301      	movs	r3, #1
 800358e:	617b      	str	r3, [r7, #20]
 8003590:	e001      	b.n	8003596 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8003592:	2300      	movs	r3, #0
 8003594:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8003596:	69bb      	ldr	r3, [r7, #24]
 8003598:	f003 0308 	and.w	r3, r3, #8
 800359c:	2b00      	cmp	r3, #0
 800359e:	d15c      	bne.n	800365a <osMutexNew+0x102>
      mem = -1;
 80035a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80035a4:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d015      	beq.n	80035d8 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d006      	beq.n	80035c2 <osMutexNew+0x6a>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	2b4f      	cmp	r3, #79	; 0x4f
 80035ba:	d902      	bls.n	80035c2 <osMutexNew+0x6a>
          mem = 1;
 80035bc:	2301      	movs	r3, #1
 80035be:	613b      	str	r3, [r7, #16]
 80035c0:	e00c      	b.n	80035dc <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d108      	bne.n	80035dc <osMutexNew+0x84>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d104      	bne.n	80035dc <osMutexNew+0x84>
            mem = 0;
 80035d2:	2300      	movs	r3, #0
 80035d4:	613b      	str	r3, [r7, #16]
 80035d6:	e001      	b.n	80035dc <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 80035d8:	2300      	movs	r3, #0
 80035da:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d112      	bne.n	8003608 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d007      	beq.n	80035f8 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	4619      	mov	r1, r3
 80035ee:	2004      	movs	r0, #4
 80035f0:	f000 fbaf 	bl	8003d52 <xQueueCreateMutexStatic>
 80035f4:	61f8      	str	r0, [r7, #28]
 80035f6:	e016      	b.n	8003626 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	4619      	mov	r1, r3
 80035fe:	2001      	movs	r0, #1
 8003600:	f000 fba7 	bl	8003d52 <xQueueCreateMutexStatic>
 8003604:	61f8      	str	r0, [r7, #28]
 8003606:	e00e      	b.n	8003626 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d10b      	bne.n	8003626 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d004      	beq.n	800361e <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8003614:	2004      	movs	r0, #4
 8003616:	f000 fb84 	bl	8003d22 <xQueueCreateMutex>
 800361a:	61f8      	str	r0, [r7, #28]
 800361c:	e003      	b.n	8003626 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800361e:	2001      	movs	r0, #1
 8003620:	f000 fb7f 	bl	8003d22 <xQueueCreateMutex>
 8003624:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d00c      	beq.n	8003646 <osMutexNew+0xee>
        if (attr != NULL) {
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d003      	beq.n	800363a <osMutexNew+0xe2>
          name = attr->name;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	60fb      	str	r3, [r7, #12]
 8003638:	e001      	b.n	800363e <osMutexNew+0xe6>
        } else {
          name = NULL;
 800363a:	2300      	movs	r3, #0
 800363c:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800363e:	68f9      	ldr	r1, [r7, #12]
 8003640:	69f8      	ldr	r0, [r7, #28]
 8003642:	f001 f9e9 	bl	8004a18 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d006      	beq.n	800365a <osMutexNew+0x102>
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d003      	beq.n	800365a <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	f043 0301 	orr.w	r3, r3, #1
 8003658:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800365a:	69fb      	ldr	r3, [r7, #28]
}
 800365c:	4618      	mov	r0, r3
 800365e:	3720      	adds	r7, #32
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}

08003664 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8003664:	b580      	push	{r7, lr}
 8003666:	b08a      	sub	sp, #40	; 0x28
 8003668:	af02      	add	r7, sp, #8
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	60b9      	str	r1, [r7, #8]
 800366e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8003670:	2300      	movs	r3, #0
 8003672:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003674:	f3ef 8305 	mrs	r3, IPSR
 8003678:	613b      	str	r3, [r7, #16]
  return(result);
 800367a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800367c:	2b00      	cmp	r3, #0
 800367e:	d175      	bne.n	800376c <osSemaphoreNew+0x108>
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d072      	beq.n	800376c <osSemaphoreNew+0x108>
 8003686:	68ba      	ldr	r2, [r7, #8]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	429a      	cmp	r2, r3
 800368c:	d86e      	bhi.n	800376c <osSemaphoreNew+0x108>
    mem = -1;
 800368e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003692:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d015      	beq.n	80036c6 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d006      	beq.n	80036b0 <osSemaphoreNew+0x4c>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	2b4f      	cmp	r3, #79	; 0x4f
 80036a8:	d902      	bls.n	80036b0 <osSemaphoreNew+0x4c>
        mem = 1;
 80036aa:	2301      	movs	r3, #1
 80036ac:	61bb      	str	r3, [r7, #24]
 80036ae:	e00c      	b.n	80036ca <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d108      	bne.n	80036ca <osSemaphoreNew+0x66>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d104      	bne.n	80036ca <osSemaphoreNew+0x66>
          mem = 0;
 80036c0:	2300      	movs	r3, #0
 80036c2:	61bb      	str	r3, [r7, #24]
 80036c4:	e001      	b.n	80036ca <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80036c6:	2300      	movs	r3, #0
 80036c8:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80036ca:	69bb      	ldr	r3, [r7, #24]
 80036cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036d0:	d04c      	beq.n	800376c <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d128      	bne.n	800372a <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80036d8:	69bb      	ldr	r3, [r7, #24]
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d10a      	bne.n	80036f4 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	2203      	movs	r2, #3
 80036e4:	9200      	str	r2, [sp, #0]
 80036e6:	2200      	movs	r2, #0
 80036e8:	2100      	movs	r1, #0
 80036ea:	2001      	movs	r0, #1
 80036ec:	f000 fa2a 	bl	8003b44 <xQueueGenericCreateStatic>
 80036f0:	61f8      	str	r0, [r7, #28]
 80036f2:	e005      	b.n	8003700 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80036f4:	2203      	movs	r2, #3
 80036f6:	2100      	movs	r1, #0
 80036f8:	2001      	movs	r0, #1
 80036fa:	f000 fa9b 	bl	8003c34 <xQueueGenericCreate>
 80036fe:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8003700:	69fb      	ldr	r3, [r7, #28]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d022      	beq.n	800374c <osSemaphoreNew+0xe8>
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d01f      	beq.n	800374c <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800370c:	2300      	movs	r3, #0
 800370e:	2200      	movs	r2, #0
 8003710:	2100      	movs	r1, #0
 8003712:	69f8      	ldr	r0, [r7, #28]
 8003714:	f000 fba2 	bl	8003e5c <xQueueGenericSend>
 8003718:	4603      	mov	r3, r0
 800371a:	2b01      	cmp	r3, #1
 800371c:	d016      	beq.n	800374c <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800371e:	69f8      	ldr	r0, [r7, #28]
 8003720:	f001 f82e 	bl	8004780 <vQueueDelete>
            hSemaphore = NULL;
 8003724:	2300      	movs	r3, #0
 8003726:	61fb      	str	r3, [r7, #28]
 8003728:	e010      	b.n	800374c <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800372a:	69bb      	ldr	r3, [r7, #24]
 800372c:	2b01      	cmp	r3, #1
 800372e:	d108      	bne.n	8003742 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	461a      	mov	r2, r3
 8003736:	68b9      	ldr	r1, [r7, #8]
 8003738:	68f8      	ldr	r0, [r7, #12]
 800373a:	f000 fb25 	bl	8003d88 <xQueueCreateCountingSemaphoreStatic>
 800373e:	61f8      	str	r0, [r7, #28]
 8003740:	e004      	b.n	800374c <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8003742:	68b9      	ldr	r1, [r7, #8]
 8003744:	68f8      	ldr	r0, [r7, #12]
 8003746:	f000 fb56 	bl	8003df6 <xQueueCreateCountingSemaphore>
 800374a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d00c      	beq.n	800376c <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d003      	beq.n	8003760 <osSemaphoreNew+0xfc>
          name = attr->name;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	617b      	str	r3, [r7, #20]
 800375e:	e001      	b.n	8003764 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8003760:	2300      	movs	r3, #0
 8003762:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8003764:	6979      	ldr	r1, [r7, #20]
 8003766:	69f8      	ldr	r0, [r7, #28]
 8003768:	f001 f956 	bl	8004a18 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800376c:	69fb      	ldr	r3, [r7, #28]
}
 800376e:	4618      	mov	r0, r3
 8003770:	3720      	adds	r7, #32
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
	...

08003778 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8003778:	b580      	push	{r7, lr}
 800377a:	b086      	sub	sp, #24
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8003786:	2300      	movs	r3, #0
 8003788:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d103      	bne.n	8003798 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8003790:	f06f 0303 	mvn.w	r3, #3
 8003794:	617b      	str	r3, [r7, #20]
 8003796:	e039      	b.n	800380c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003798:	f3ef 8305 	mrs	r3, IPSR
 800379c:	60fb      	str	r3, [r7, #12]
  return(result);
 800379e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d022      	beq.n	80037ea <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d003      	beq.n	80037b2 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 80037aa:	f06f 0303 	mvn.w	r3, #3
 80037ae:	617b      	str	r3, [r7, #20]
 80037b0:	e02c      	b.n	800380c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 80037b2:	2300      	movs	r3, #0
 80037b4:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80037b6:	f107 0308 	add.w	r3, r7, #8
 80037ba:	461a      	mov	r2, r3
 80037bc:	2100      	movs	r1, #0
 80037be:	6938      	ldr	r0, [r7, #16]
 80037c0:	f000 ff5e 	bl	8004680 <xQueueReceiveFromISR>
 80037c4:	4603      	mov	r3, r0
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d003      	beq.n	80037d2 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 80037ca:	f06f 0302 	mvn.w	r3, #2
 80037ce:	617b      	str	r3, [r7, #20]
 80037d0:	e01c      	b.n	800380c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d019      	beq.n	800380c <osSemaphoreAcquire+0x94>
 80037d8:	4b0f      	ldr	r3, [pc, #60]	; (8003818 <osSemaphoreAcquire+0xa0>)
 80037da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037de:	601a      	str	r2, [r3, #0]
 80037e0:	f3bf 8f4f 	dsb	sy
 80037e4:	f3bf 8f6f 	isb	sy
 80037e8:	e010      	b.n	800380c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80037ea:	6839      	ldr	r1, [r7, #0]
 80037ec:	6938      	ldr	r0, [r7, #16]
 80037ee:	f000 fe3b 	bl	8004468 <xQueueSemaphoreTake>
 80037f2:	4603      	mov	r3, r0
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d009      	beq.n	800380c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d003      	beq.n	8003806 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80037fe:	f06f 0301 	mvn.w	r3, #1
 8003802:	617b      	str	r3, [r7, #20]
 8003804:	e002      	b.n	800380c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8003806:	f06f 0302 	mvn.w	r3, #2
 800380a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800380c:	697b      	ldr	r3, [r7, #20]
}
 800380e:	4618      	mov	r0, r3
 8003810:	3718      	adds	r7, #24
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	e000ed04 	.word	0xe000ed04

0800381c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800381c:	b580      	push	{r7, lr}
 800381e:	b086      	sub	sp, #24
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8003828:	2300      	movs	r3, #0
 800382a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d103      	bne.n	800383a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8003832:	f06f 0303 	mvn.w	r3, #3
 8003836:	617b      	str	r3, [r7, #20]
 8003838:	e02c      	b.n	8003894 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800383a:	f3ef 8305 	mrs	r3, IPSR
 800383e:	60fb      	str	r3, [r7, #12]
  return(result);
 8003840:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8003842:	2b00      	cmp	r3, #0
 8003844:	d01a      	beq.n	800387c <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8003846:	2300      	movs	r3, #0
 8003848:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800384a:	f107 0308 	add.w	r3, r7, #8
 800384e:	4619      	mov	r1, r3
 8003850:	6938      	ldr	r0, [r7, #16]
 8003852:	f000 fc9c 	bl	800418e <xQueueGiveFromISR>
 8003856:	4603      	mov	r3, r0
 8003858:	2b01      	cmp	r3, #1
 800385a:	d003      	beq.n	8003864 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800385c:	f06f 0302 	mvn.w	r3, #2
 8003860:	617b      	str	r3, [r7, #20]
 8003862:	e017      	b.n	8003894 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d014      	beq.n	8003894 <osSemaphoreRelease+0x78>
 800386a:	4b0d      	ldr	r3, [pc, #52]	; (80038a0 <osSemaphoreRelease+0x84>)
 800386c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003870:	601a      	str	r2, [r3, #0]
 8003872:	f3bf 8f4f 	dsb	sy
 8003876:	f3bf 8f6f 	isb	sy
 800387a:	e00b      	b.n	8003894 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800387c:	2300      	movs	r3, #0
 800387e:	2200      	movs	r2, #0
 8003880:	2100      	movs	r1, #0
 8003882:	6938      	ldr	r0, [r7, #16]
 8003884:	f000 faea 	bl	8003e5c <xQueueGenericSend>
 8003888:	4603      	mov	r3, r0
 800388a:	2b01      	cmp	r3, #1
 800388c:	d002      	beq.n	8003894 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800388e:	f06f 0302 	mvn.w	r3, #2
 8003892:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8003894:	697b      	ldr	r3, [r7, #20]
}
 8003896:	4618      	mov	r0, r3
 8003898:	3718      	adds	r7, #24
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	e000ed04 	.word	0xe000ed04

080038a4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80038a4:	b480      	push	{r7}
 80038a6:	b085      	sub	sp, #20
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	60f8      	str	r0, [r7, #12]
 80038ac:	60b9      	str	r1, [r7, #8]
 80038ae:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	4a07      	ldr	r2, [pc, #28]	; (80038d0 <vApplicationGetIdleTaskMemory+0x2c>)
 80038b4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	4a06      	ldr	r2, [pc, #24]	; (80038d4 <vApplicationGetIdleTaskMemory+0x30>)
 80038ba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2280      	movs	r2, #128	; 0x80
 80038c0:	601a      	str	r2, [r3, #0]
}
 80038c2:	bf00      	nop
 80038c4:	3714      	adds	r7, #20
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr
 80038ce:	bf00      	nop
 80038d0:	20000188 	.word	0x20000188
 80038d4:	20000244 	.word	0x20000244

080038d8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80038d8:	b480      	push	{r7}
 80038da:	b085      	sub	sp, #20
 80038dc:	af00      	add	r7, sp, #0
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	60b9      	str	r1, [r7, #8]
 80038e2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	4a07      	ldr	r2, [pc, #28]	; (8003904 <vApplicationGetTimerTaskMemory+0x2c>)
 80038e8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	4a06      	ldr	r2, [pc, #24]	; (8003908 <vApplicationGetTimerTaskMemory+0x30>)
 80038ee:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80038f6:	601a      	str	r2, [r3, #0]
}
 80038f8:	bf00      	nop
 80038fa:	3714      	adds	r7, #20
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr
 8003904:	20000444 	.word	0x20000444
 8003908:	20000500 	.word	0x20000500

0800390c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800390c:	b480      	push	{r7}
 800390e:	b083      	sub	sp, #12
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f103 0208 	add.w	r2, r3, #8
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003924:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	f103 0208 	add.w	r2, r3, #8
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f103 0208 	add.w	r2, r3, #8
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003940:	bf00      	nop
 8003942:	370c      	adds	r7, #12
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr

0800394c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800395a:	bf00      	nop
 800395c:	370c      	adds	r7, #12
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr

08003966 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003966:	b480      	push	{r7}
 8003968:	b085      	sub	sp, #20
 800396a:	af00      	add	r7, sp, #0
 800396c:	6078      	str	r0, [r7, #4]
 800396e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	68fa      	ldr	r2, [r7, #12]
 800397a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	689a      	ldr	r2, [r3, #8]
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	683a      	ldr	r2, [r7, #0]
 800398a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	683a      	ldr	r2, [r7, #0]
 8003990:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	687a      	ldr	r2, [r7, #4]
 8003996:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	1c5a      	adds	r2, r3, #1
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	601a      	str	r2, [r3, #0]
}
 80039a2:	bf00      	nop
 80039a4:	3714      	adds	r7, #20
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr

080039ae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80039ae:	b480      	push	{r7}
 80039b0:	b085      	sub	sp, #20
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	6078      	str	r0, [r7, #4]
 80039b6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039c4:	d103      	bne.n	80039ce <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	691b      	ldr	r3, [r3, #16]
 80039ca:	60fb      	str	r3, [r7, #12]
 80039cc:	e00c      	b.n	80039e8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	3308      	adds	r3, #8
 80039d2:	60fb      	str	r3, [r7, #12]
 80039d4:	e002      	b.n	80039dc <vListInsert+0x2e>
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	60fb      	str	r3, [r7, #12]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	68ba      	ldr	r2, [r7, #8]
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d2f6      	bcs.n	80039d6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	685a      	ldr	r2, [r3, #4]
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	683a      	ldr	r2, [r7, #0]
 80039f6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	68fa      	ldr	r2, [r7, #12]
 80039fc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	683a      	ldr	r2, [r7, #0]
 8003a02:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	1c5a      	adds	r2, r3, #1
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	601a      	str	r2, [r3, #0]
}
 8003a14:	bf00      	nop
 8003a16:	3714      	adds	r7, #20
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr

08003a20 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003a20:	b480      	push	{r7}
 8003a22:	b085      	sub	sp, #20
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	691b      	ldr	r3, [r3, #16]
 8003a2c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	6892      	ldr	r2, [r2, #8]
 8003a36:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	6852      	ldr	r2, [r2, #4]
 8003a40:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d103      	bne.n	8003a54 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	689a      	ldr	r2, [r3, #8]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2200      	movs	r2, #0
 8003a58:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	1e5a      	subs	r2, r3, #1
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3714      	adds	r7, #20
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr

08003a74 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b084      	sub	sp, #16
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d10a      	bne.n	8003a9e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a8c:	f383 8811 	msr	BASEPRI, r3
 8003a90:	f3bf 8f6f 	isb	sy
 8003a94:	f3bf 8f4f 	dsb	sy
 8003a98:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003a9a:	bf00      	nop
 8003a9c:	e7fe      	b.n	8003a9c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003a9e:	f002 fde9 	bl	8006674 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aaa:	68f9      	ldr	r1, [r7, #12]
 8003aac:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003aae:	fb01 f303 	mul.w	r3, r1, r3
 8003ab2:	441a      	add	r2, r3
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2200      	movs	r2, #0
 8003abc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ace:	3b01      	subs	r3, #1
 8003ad0:	68f9      	ldr	r1, [r7, #12]
 8003ad2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003ad4:	fb01 f303 	mul.w	r3, r1, r3
 8003ad8:	441a      	add	r2, r3
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	22ff      	movs	r2, #255	; 0xff
 8003ae2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	22ff      	movs	r2, #255	; 0xff
 8003aea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d114      	bne.n	8003b1e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	691b      	ldr	r3, [r3, #16]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d01a      	beq.n	8003b32 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	3310      	adds	r3, #16
 8003b00:	4618      	mov	r0, r3
 8003b02:	f001 fd9d 	bl	8005640 <xTaskRemoveFromEventList>
 8003b06:	4603      	mov	r3, r0
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d012      	beq.n	8003b32 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003b0c:	4b0c      	ldr	r3, [pc, #48]	; (8003b40 <xQueueGenericReset+0xcc>)
 8003b0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b12:	601a      	str	r2, [r3, #0]
 8003b14:	f3bf 8f4f 	dsb	sy
 8003b18:	f3bf 8f6f 	isb	sy
 8003b1c:	e009      	b.n	8003b32 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	3310      	adds	r3, #16
 8003b22:	4618      	mov	r0, r3
 8003b24:	f7ff fef2 	bl	800390c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	3324      	adds	r3, #36	; 0x24
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f7ff feed 	bl	800390c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003b32:	f002 fdcf 	bl	80066d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003b36:	2301      	movs	r3, #1
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3710      	adds	r7, #16
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	e000ed04 	.word	0xe000ed04

08003b44 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b08e      	sub	sp, #56	; 0x38
 8003b48:	af02      	add	r7, sp, #8
 8003b4a:	60f8      	str	r0, [r7, #12]
 8003b4c:	60b9      	str	r1, [r7, #8]
 8003b4e:	607a      	str	r2, [r7, #4]
 8003b50:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d10a      	bne.n	8003b6e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b5c:	f383 8811 	msr	BASEPRI, r3
 8003b60:	f3bf 8f6f 	isb	sy
 8003b64:	f3bf 8f4f 	dsb	sy
 8003b68:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003b6a:	bf00      	nop
 8003b6c:	e7fe      	b.n	8003b6c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d10a      	bne.n	8003b8a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b78:	f383 8811 	msr	BASEPRI, r3
 8003b7c:	f3bf 8f6f 	isb	sy
 8003b80:	f3bf 8f4f 	dsb	sy
 8003b84:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003b86:	bf00      	nop
 8003b88:	e7fe      	b.n	8003b88 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d002      	beq.n	8003b96 <xQueueGenericCreateStatic+0x52>
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d001      	beq.n	8003b9a <xQueueGenericCreateStatic+0x56>
 8003b96:	2301      	movs	r3, #1
 8003b98:	e000      	b.n	8003b9c <xQueueGenericCreateStatic+0x58>
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d10a      	bne.n	8003bb6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ba4:	f383 8811 	msr	BASEPRI, r3
 8003ba8:	f3bf 8f6f 	isb	sy
 8003bac:	f3bf 8f4f 	dsb	sy
 8003bb0:	623b      	str	r3, [r7, #32]
}
 8003bb2:	bf00      	nop
 8003bb4:	e7fe      	b.n	8003bb4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d102      	bne.n	8003bc2 <xQueueGenericCreateStatic+0x7e>
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d101      	bne.n	8003bc6 <xQueueGenericCreateStatic+0x82>
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e000      	b.n	8003bc8 <xQueueGenericCreateStatic+0x84>
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d10a      	bne.n	8003be2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bd0:	f383 8811 	msr	BASEPRI, r3
 8003bd4:	f3bf 8f6f 	isb	sy
 8003bd8:	f3bf 8f4f 	dsb	sy
 8003bdc:	61fb      	str	r3, [r7, #28]
}
 8003bde:	bf00      	nop
 8003be0:	e7fe      	b.n	8003be0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003be2:	2350      	movs	r3, #80	; 0x50
 8003be4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	2b50      	cmp	r3, #80	; 0x50
 8003bea:	d00a      	beq.n	8003c02 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bf0:	f383 8811 	msr	BASEPRI, r3
 8003bf4:	f3bf 8f6f 	isb	sy
 8003bf8:	f3bf 8f4f 	dsb	sy
 8003bfc:	61bb      	str	r3, [r7, #24]
}
 8003bfe:	bf00      	nop
 8003c00:	e7fe      	b.n	8003c00 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003c02:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d00d      	beq.n	8003c2a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c10:	2201      	movs	r2, #1
 8003c12:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003c16:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c1c:	9300      	str	r3, [sp, #0]
 8003c1e:	4613      	mov	r3, r2
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	68b9      	ldr	r1, [r7, #8]
 8003c24:	68f8      	ldr	r0, [r7, #12]
 8003c26:	f000 f83f 	bl	8003ca8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3730      	adds	r7, #48	; 0x30
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}

08003c34 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b08a      	sub	sp, #40	; 0x28
 8003c38:	af02      	add	r7, sp, #8
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	60b9      	str	r1, [r7, #8]
 8003c3e:	4613      	mov	r3, r2
 8003c40:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d10a      	bne.n	8003c5e <xQueueGenericCreate+0x2a>
	__asm volatile
 8003c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c4c:	f383 8811 	msr	BASEPRI, r3
 8003c50:	f3bf 8f6f 	isb	sy
 8003c54:	f3bf 8f4f 	dsb	sy
 8003c58:	613b      	str	r3, [r7, #16]
}
 8003c5a:	bf00      	nop
 8003c5c:	e7fe      	b.n	8003c5c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	68ba      	ldr	r2, [r7, #8]
 8003c62:	fb02 f303 	mul.w	r3, r2, r3
 8003c66:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003c68:	69fb      	ldr	r3, [r7, #28]
 8003c6a:	3350      	adds	r3, #80	; 0x50
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f002 fe23 	bl	80068b8 <pvPortMalloc>
 8003c72:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003c74:	69bb      	ldr	r3, [r7, #24]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d011      	beq.n	8003c9e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003c7a:	69bb      	ldr	r3, [r7, #24]
 8003c7c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	3350      	adds	r3, #80	; 0x50
 8003c82:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003c84:	69bb      	ldr	r3, [r7, #24]
 8003c86:	2200      	movs	r2, #0
 8003c88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003c8c:	79fa      	ldrb	r2, [r7, #7]
 8003c8e:	69bb      	ldr	r3, [r7, #24]
 8003c90:	9300      	str	r3, [sp, #0]
 8003c92:	4613      	mov	r3, r2
 8003c94:	697a      	ldr	r2, [r7, #20]
 8003c96:	68b9      	ldr	r1, [r7, #8]
 8003c98:	68f8      	ldr	r0, [r7, #12]
 8003c9a:	f000 f805 	bl	8003ca8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003c9e:	69bb      	ldr	r3, [r7, #24]
	}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3720      	adds	r7, #32
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}

08003ca8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	60f8      	str	r0, [r7, #12]
 8003cb0:	60b9      	str	r1, [r7, #8]
 8003cb2:	607a      	str	r2, [r7, #4]
 8003cb4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d103      	bne.n	8003cc4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003cbc:	69bb      	ldr	r3, [r7, #24]
 8003cbe:	69ba      	ldr	r2, [r7, #24]
 8003cc0:	601a      	str	r2, [r3, #0]
 8003cc2:	e002      	b.n	8003cca <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003cc4:	69bb      	ldr	r3, [r7, #24]
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	68fa      	ldr	r2, [r7, #12]
 8003cce:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003cd0:	69bb      	ldr	r3, [r7, #24]
 8003cd2:	68ba      	ldr	r2, [r7, #8]
 8003cd4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003cd6:	2101      	movs	r1, #1
 8003cd8:	69b8      	ldr	r0, [r7, #24]
 8003cda:	f7ff fecb 	bl	8003a74 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003cde:	69bb      	ldr	r3, [r7, #24]
 8003ce0:	78fa      	ldrb	r2, [r7, #3]
 8003ce2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003ce6:	bf00      	nop
 8003ce8:	3710      	adds	r7, #16
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}

08003cee <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8003cee:	b580      	push	{r7, lr}
 8003cf0:	b082      	sub	sp, #8
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d00e      	beq.n	8003d1a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2200      	movs	r2, #0
 8003d06:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8003d0e:	2300      	movs	r3, #0
 8003d10:	2200      	movs	r2, #0
 8003d12:	2100      	movs	r1, #0
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f000 f8a1 	bl	8003e5c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8003d1a:	bf00      	nop
 8003d1c:	3708      	adds	r7, #8
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}

08003d22 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8003d22:	b580      	push	{r7, lr}
 8003d24:	b086      	sub	sp, #24
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	4603      	mov	r3, r0
 8003d2a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	617b      	str	r3, [r7, #20]
 8003d30:	2300      	movs	r3, #0
 8003d32:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8003d34:	79fb      	ldrb	r3, [r7, #7]
 8003d36:	461a      	mov	r2, r3
 8003d38:	6939      	ldr	r1, [r7, #16]
 8003d3a:	6978      	ldr	r0, [r7, #20]
 8003d3c:	f7ff ff7a 	bl	8003c34 <xQueueGenericCreate>
 8003d40:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8003d42:	68f8      	ldr	r0, [r7, #12]
 8003d44:	f7ff ffd3 	bl	8003cee <prvInitialiseMutex>

		return xNewQueue;
 8003d48:	68fb      	ldr	r3, [r7, #12]
	}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3718      	adds	r7, #24
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}

08003d52 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8003d52:	b580      	push	{r7, lr}
 8003d54:	b088      	sub	sp, #32
 8003d56:	af02      	add	r7, sp, #8
 8003d58:	4603      	mov	r3, r0
 8003d5a:	6039      	str	r1, [r7, #0]
 8003d5c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	617b      	str	r3, [r7, #20]
 8003d62:	2300      	movs	r3, #0
 8003d64:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8003d66:	79fb      	ldrb	r3, [r7, #7]
 8003d68:	9300      	str	r3, [sp, #0]
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	6939      	ldr	r1, [r7, #16]
 8003d70:	6978      	ldr	r0, [r7, #20]
 8003d72:	f7ff fee7 	bl	8003b44 <xQueueGenericCreateStatic>
 8003d76:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8003d78:	68f8      	ldr	r0, [r7, #12]
 8003d7a:	f7ff ffb8 	bl	8003cee <prvInitialiseMutex>

		return xNewQueue;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
	}
 8003d80:	4618      	mov	r0, r3
 8003d82:	3718      	adds	r7, #24
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}

08003d88 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b08a      	sub	sp, #40	; 0x28
 8003d8c:	af02      	add	r7, sp, #8
 8003d8e:	60f8      	str	r0, [r7, #12]
 8003d90:	60b9      	str	r1, [r7, #8]
 8003d92:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d10a      	bne.n	8003db0 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8003d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d9e:	f383 8811 	msr	BASEPRI, r3
 8003da2:	f3bf 8f6f 	isb	sy
 8003da6:	f3bf 8f4f 	dsb	sy
 8003daa:	61bb      	str	r3, [r7, #24]
}
 8003dac:	bf00      	nop
 8003dae:	e7fe      	b.n	8003dae <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8003db0:	68ba      	ldr	r2, [r7, #8]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d90a      	bls.n	8003dce <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8003db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dbc:	f383 8811 	msr	BASEPRI, r3
 8003dc0:	f3bf 8f6f 	isb	sy
 8003dc4:	f3bf 8f4f 	dsb	sy
 8003dc8:	617b      	str	r3, [r7, #20]
}
 8003dca:	bf00      	nop
 8003dcc:	e7fe      	b.n	8003dcc <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003dce:	2302      	movs	r3, #2
 8003dd0:	9300      	str	r3, [sp, #0]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	2100      	movs	r1, #0
 8003dd8:	68f8      	ldr	r0, [r7, #12]
 8003dda:	f7ff feb3 	bl	8003b44 <xQueueGenericCreateStatic>
 8003dde:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8003de0:	69fb      	ldr	r3, [r7, #28]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d002      	beq.n	8003dec <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8003de6:	69fb      	ldr	r3, [r7, #28]
 8003de8:	68ba      	ldr	r2, [r7, #8]
 8003dea:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8003dec:	69fb      	ldr	r3, [r7, #28]
	}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3720      	adds	r7, #32
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}

08003df6 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8003df6:	b580      	push	{r7, lr}
 8003df8:	b086      	sub	sp, #24
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	6078      	str	r0, [r7, #4]
 8003dfe:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d10a      	bne.n	8003e1c <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8003e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e0a:	f383 8811 	msr	BASEPRI, r3
 8003e0e:	f3bf 8f6f 	isb	sy
 8003e12:	f3bf 8f4f 	dsb	sy
 8003e16:	613b      	str	r3, [r7, #16]
}
 8003e18:	bf00      	nop
 8003e1a:	e7fe      	b.n	8003e1a <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8003e1c:	683a      	ldr	r2, [r7, #0]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d90a      	bls.n	8003e3a <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8003e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e28:	f383 8811 	msr	BASEPRI, r3
 8003e2c:	f3bf 8f6f 	isb	sy
 8003e30:	f3bf 8f4f 	dsb	sy
 8003e34:	60fb      	str	r3, [r7, #12]
}
 8003e36:	bf00      	nop
 8003e38:	e7fe      	b.n	8003e38 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003e3a:	2202      	movs	r2, #2
 8003e3c:	2100      	movs	r1, #0
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f7ff fef8 	bl	8003c34 <xQueueGenericCreate>
 8003e44:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d002      	beq.n	8003e52 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	683a      	ldr	r2, [r7, #0]
 8003e50:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8003e52:	697b      	ldr	r3, [r7, #20]
	}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3718      	adds	r7, #24
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}

08003e5c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b08e      	sub	sp, #56	; 0x38
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	60b9      	str	r1, [r7, #8]
 8003e66:	607a      	str	r2, [r7, #4]
 8003e68:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d10a      	bne.n	8003e8e <xQueueGenericSend+0x32>
	__asm volatile
 8003e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e7c:	f383 8811 	msr	BASEPRI, r3
 8003e80:	f3bf 8f6f 	isb	sy
 8003e84:	f3bf 8f4f 	dsb	sy
 8003e88:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003e8a:	bf00      	nop
 8003e8c:	e7fe      	b.n	8003e8c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d103      	bne.n	8003e9c <xQueueGenericSend+0x40>
 8003e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d101      	bne.n	8003ea0 <xQueueGenericSend+0x44>
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e000      	b.n	8003ea2 <xQueueGenericSend+0x46>
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d10a      	bne.n	8003ebc <xQueueGenericSend+0x60>
	__asm volatile
 8003ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eaa:	f383 8811 	msr	BASEPRI, r3
 8003eae:	f3bf 8f6f 	isb	sy
 8003eb2:	f3bf 8f4f 	dsb	sy
 8003eb6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003eb8:	bf00      	nop
 8003eba:	e7fe      	b.n	8003eba <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	2b02      	cmp	r3, #2
 8003ec0:	d103      	bne.n	8003eca <xQueueGenericSend+0x6e>
 8003ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d101      	bne.n	8003ece <xQueueGenericSend+0x72>
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e000      	b.n	8003ed0 <xQueueGenericSend+0x74>
 8003ece:	2300      	movs	r3, #0
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d10a      	bne.n	8003eea <xQueueGenericSend+0x8e>
	__asm volatile
 8003ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ed8:	f383 8811 	msr	BASEPRI, r3
 8003edc:	f3bf 8f6f 	isb	sy
 8003ee0:	f3bf 8f4f 	dsb	sy
 8003ee4:	623b      	str	r3, [r7, #32]
}
 8003ee6:	bf00      	nop
 8003ee8:	e7fe      	b.n	8003ee8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003eea:	f001 fd6b 	bl	80059c4 <xTaskGetSchedulerState>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d102      	bne.n	8003efa <xQueueGenericSend+0x9e>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d101      	bne.n	8003efe <xQueueGenericSend+0xa2>
 8003efa:	2301      	movs	r3, #1
 8003efc:	e000      	b.n	8003f00 <xQueueGenericSend+0xa4>
 8003efe:	2300      	movs	r3, #0
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d10a      	bne.n	8003f1a <xQueueGenericSend+0xbe>
	__asm volatile
 8003f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f08:	f383 8811 	msr	BASEPRI, r3
 8003f0c:	f3bf 8f6f 	isb	sy
 8003f10:	f3bf 8f4f 	dsb	sy
 8003f14:	61fb      	str	r3, [r7, #28]
}
 8003f16:	bf00      	nop
 8003f18:	e7fe      	b.n	8003f18 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003f1a:	f002 fbab 	bl	8006674 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f26:	429a      	cmp	r2, r3
 8003f28:	d302      	bcc.n	8003f30 <xQueueGenericSend+0xd4>
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	2b02      	cmp	r3, #2
 8003f2e:	d129      	bne.n	8003f84 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003f30:	683a      	ldr	r2, [r7, #0]
 8003f32:	68b9      	ldr	r1, [r7, #8]
 8003f34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f36:	f000 fc5e 	bl	80047f6 <prvCopyDataToQueue>
 8003f3a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d010      	beq.n	8003f66 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f46:	3324      	adds	r3, #36	; 0x24
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f001 fb79 	bl	8005640 <xTaskRemoveFromEventList>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d013      	beq.n	8003f7c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003f54:	4b3f      	ldr	r3, [pc, #252]	; (8004054 <xQueueGenericSend+0x1f8>)
 8003f56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f5a:	601a      	str	r2, [r3, #0]
 8003f5c:	f3bf 8f4f 	dsb	sy
 8003f60:	f3bf 8f6f 	isb	sy
 8003f64:	e00a      	b.n	8003f7c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d007      	beq.n	8003f7c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003f6c:	4b39      	ldr	r3, [pc, #228]	; (8004054 <xQueueGenericSend+0x1f8>)
 8003f6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f72:	601a      	str	r2, [r3, #0]
 8003f74:	f3bf 8f4f 	dsb	sy
 8003f78:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003f7c:	f002 fbaa 	bl	80066d4 <vPortExitCritical>
				return pdPASS;
 8003f80:	2301      	movs	r3, #1
 8003f82:	e063      	b.n	800404c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d103      	bne.n	8003f92 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003f8a:	f002 fba3 	bl	80066d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	e05c      	b.n	800404c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003f92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d106      	bne.n	8003fa6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003f98:	f107 0314 	add.w	r3, r7, #20
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f001 fbb3 	bl	8005708 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003fa6:	f002 fb95 	bl	80066d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003faa:	f001 f91f 	bl	80051ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003fae:	f002 fb61 	bl	8006674 <vPortEnterCritical>
 8003fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fb4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003fb8:	b25b      	sxtb	r3, r3
 8003fba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003fbe:	d103      	bne.n	8003fc8 <xQueueGenericSend+0x16c>
 8003fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003fce:	b25b      	sxtb	r3, r3
 8003fd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003fd4:	d103      	bne.n	8003fde <xQueueGenericSend+0x182>
 8003fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fd8:	2200      	movs	r2, #0
 8003fda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003fde:	f002 fb79 	bl	80066d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003fe2:	1d3a      	adds	r2, r7, #4
 8003fe4:	f107 0314 	add.w	r3, r7, #20
 8003fe8:	4611      	mov	r1, r2
 8003fea:	4618      	mov	r0, r3
 8003fec:	f001 fba2 	bl	8005734 <xTaskCheckForTimeOut>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d124      	bne.n	8004040 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003ff6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ff8:	f000 fcf5 	bl	80049e6 <prvIsQueueFull>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d018      	beq.n	8004034 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004004:	3310      	adds	r3, #16
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	4611      	mov	r1, r2
 800400a:	4618      	mov	r0, r3
 800400c:	f001 fac8 	bl	80055a0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004010:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004012:	f000 fc80 	bl	8004916 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004016:	f001 f8f7 	bl	8005208 <xTaskResumeAll>
 800401a:	4603      	mov	r3, r0
 800401c:	2b00      	cmp	r3, #0
 800401e:	f47f af7c 	bne.w	8003f1a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004022:	4b0c      	ldr	r3, [pc, #48]	; (8004054 <xQueueGenericSend+0x1f8>)
 8004024:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004028:	601a      	str	r2, [r3, #0]
 800402a:	f3bf 8f4f 	dsb	sy
 800402e:	f3bf 8f6f 	isb	sy
 8004032:	e772      	b.n	8003f1a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004034:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004036:	f000 fc6e 	bl	8004916 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800403a:	f001 f8e5 	bl	8005208 <xTaskResumeAll>
 800403e:	e76c      	b.n	8003f1a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004040:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004042:	f000 fc68 	bl	8004916 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004046:	f001 f8df 	bl	8005208 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800404a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800404c:	4618      	mov	r0, r3
 800404e:	3738      	adds	r7, #56	; 0x38
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}
 8004054:	e000ed04 	.word	0xe000ed04

08004058 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b090      	sub	sp, #64	; 0x40
 800405c:	af00      	add	r7, sp, #0
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	60b9      	str	r1, [r7, #8]
 8004062:	607a      	str	r2, [r7, #4]
 8004064:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800406a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800406c:	2b00      	cmp	r3, #0
 800406e:	d10a      	bne.n	8004086 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004074:	f383 8811 	msr	BASEPRI, r3
 8004078:	f3bf 8f6f 	isb	sy
 800407c:	f3bf 8f4f 	dsb	sy
 8004080:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004082:	bf00      	nop
 8004084:	e7fe      	b.n	8004084 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d103      	bne.n	8004094 <xQueueGenericSendFromISR+0x3c>
 800408c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800408e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004090:	2b00      	cmp	r3, #0
 8004092:	d101      	bne.n	8004098 <xQueueGenericSendFromISR+0x40>
 8004094:	2301      	movs	r3, #1
 8004096:	e000      	b.n	800409a <xQueueGenericSendFromISR+0x42>
 8004098:	2300      	movs	r3, #0
 800409a:	2b00      	cmp	r3, #0
 800409c:	d10a      	bne.n	80040b4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800409e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a2:	f383 8811 	msr	BASEPRI, r3
 80040a6:	f3bf 8f6f 	isb	sy
 80040aa:	f3bf 8f4f 	dsb	sy
 80040ae:	627b      	str	r3, [r7, #36]	; 0x24
}
 80040b0:	bf00      	nop
 80040b2:	e7fe      	b.n	80040b2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	2b02      	cmp	r3, #2
 80040b8:	d103      	bne.n	80040c2 <xQueueGenericSendFromISR+0x6a>
 80040ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d101      	bne.n	80040c6 <xQueueGenericSendFromISR+0x6e>
 80040c2:	2301      	movs	r3, #1
 80040c4:	e000      	b.n	80040c8 <xQueueGenericSendFromISR+0x70>
 80040c6:	2300      	movs	r3, #0
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d10a      	bne.n	80040e2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80040cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040d0:	f383 8811 	msr	BASEPRI, r3
 80040d4:	f3bf 8f6f 	isb	sy
 80040d8:	f3bf 8f4f 	dsb	sy
 80040dc:	623b      	str	r3, [r7, #32]
}
 80040de:	bf00      	nop
 80040e0:	e7fe      	b.n	80040e0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80040e2:	f002 fba9 	bl	8006838 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80040e6:	f3ef 8211 	mrs	r2, BASEPRI
 80040ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ee:	f383 8811 	msr	BASEPRI, r3
 80040f2:	f3bf 8f6f 	isb	sy
 80040f6:	f3bf 8f4f 	dsb	sy
 80040fa:	61fa      	str	r2, [r7, #28]
 80040fc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80040fe:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004100:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004104:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800410a:	429a      	cmp	r2, r3
 800410c:	d302      	bcc.n	8004114 <xQueueGenericSendFromISR+0xbc>
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	2b02      	cmp	r3, #2
 8004112:	d12f      	bne.n	8004174 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004116:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800411a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800411e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004122:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004124:	683a      	ldr	r2, [r7, #0]
 8004126:	68b9      	ldr	r1, [r7, #8]
 8004128:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800412a:	f000 fb64 	bl	80047f6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800412e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004132:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004136:	d112      	bne.n	800415e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800413a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413c:	2b00      	cmp	r3, #0
 800413e:	d016      	beq.n	800416e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004142:	3324      	adds	r3, #36	; 0x24
 8004144:	4618      	mov	r0, r3
 8004146:	f001 fa7b 	bl	8005640 <xTaskRemoveFromEventList>
 800414a:	4603      	mov	r3, r0
 800414c:	2b00      	cmp	r3, #0
 800414e:	d00e      	beq.n	800416e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d00b      	beq.n	800416e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2201      	movs	r2, #1
 800415a:	601a      	str	r2, [r3, #0]
 800415c:	e007      	b.n	800416e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800415e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004162:	3301      	adds	r3, #1
 8004164:	b2db      	uxtb	r3, r3
 8004166:	b25a      	sxtb	r2, r3
 8004168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800416a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800416e:	2301      	movs	r3, #1
 8004170:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004172:	e001      	b.n	8004178 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004174:	2300      	movs	r3, #0
 8004176:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004178:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800417a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004182:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004184:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004186:	4618      	mov	r0, r3
 8004188:	3740      	adds	r7, #64	; 0x40
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}

0800418e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800418e:	b580      	push	{r7, lr}
 8004190:	b08e      	sub	sp, #56	; 0x38
 8004192:	af00      	add	r7, sp, #0
 8004194:	6078      	str	r0, [r7, #4]
 8004196:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800419c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d10a      	bne.n	80041b8 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80041a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041a6:	f383 8811 	msr	BASEPRI, r3
 80041aa:	f3bf 8f6f 	isb	sy
 80041ae:	f3bf 8f4f 	dsb	sy
 80041b2:	623b      	str	r3, [r7, #32]
}
 80041b4:	bf00      	nop
 80041b6:	e7fe      	b.n	80041b6 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80041b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d00a      	beq.n	80041d6 <xQueueGiveFromISR+0x48>
	__asm volatile
 80041c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041c4:	f383 8811 	msr	BASEPRI, r3
 80041c8:	f3bf 8f6f 	isb	sy
 80041cc:	f3bf 8f4f 	dsb	sy
 80041d0:	61fb      	str	r3, [r7, #28]
}
 80041d2:	bf00      	nop
 80041d4:	e7fe      	b.n	80041d4 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80041d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d103      	bne.n	80041e6 <xQueueGiveFromISR+0x58>
 80041de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d101      	bne.n	80041ea <xQueueGiveFromISR+0x5c>
 80041e6:	2301      	movs	r3, #1
 80041e8:	e000      	b.n	80041ec <xQueueGiveFromISR+0x5e>
 80041ea:	2300      	movs	r3, #0
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d10a      	bne.n	8004206 <xQueueGiveFromISR+0x78>
	__asm volatile
 80041f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041f4:	f383 8811 	msr	BASEPRI, r3
 80041f8:	f3bf 8f6f 	isb	sy
 80041fc:	f3bf 8f4f 	dsb	sy
 8004200:	61bb      	str	r3, [r7, #24]
}
 8004202:	bf00      	nop
 8004204:	e7fe      	b.n	8004204 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004206:	f002 fb17 	bl	8006838 <vPortValidateInterruptPriority>
	__asm volatile
 800420a:	f3ef 8211 	mrs	r2, BASEPRI
 800420e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004212:	f383 8811 	msr	BASEPRI, r3
 8004216:	f3bf 8f6f 	isb	sy
 800421a:	f3bf 8f4f 	dsb	sy
 800421e:	617a      	str	r2, [r7, #20]
 8004220:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8004222:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004224:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800422a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800422c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800422e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004230:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004232:	429a      	cmp	r2, r3
 8004234:	d22b      	bcs.n	800428e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004238:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800423c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004242:	1c5a      	adds	r2, r3, #1
 8004244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004246:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004248:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800424c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004250:	d112      	bne.n	8004278 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004256:	2b00      	cmp	r3, #0
 8004258:	d016      	beq.n	8004288 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800425a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800425c:	3324      	adds	r3, #36	; 0x24
 800425e:	4618      	mov	r0, r3
 8004260:	f001 f9ee 	bl	8005640 <xTaskRemoveFromEventList>
 8004264:	4603      	mov	r3, r0
 8004266:	2b00      	cmp	r3, #0
 8004268:	d00e      	beq.n	8004288 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d00b      	beq.n	8004288 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	2201      	movs	r2, #1
 8004274:	601a      	str	r2, [r3, #0]
 8004276:	e007      	b.n	8004288 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004278:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800427c:	3301      	adds	r3, #1
 800427e:	b2db      	uxtb	r3, r3
 8004280:	b25a      	sxtb	r2, r3
 8004282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004284:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004288:	2301      	movs	r3, #1
 800428a:	637b      	str	r3, [r7, #52]	; 0x34
 800428c:	e001      	b.n	8004292 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800428e:	2300      	movs	r3, #0
 8004290:	637b      	str	r3, [r7, #52]	; 0x34
 8004292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004294:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	f383 8811 	msr	BASEPRI, r3
}
 800429c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800429e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3738      	adds	r7, #56	; 0x38
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}

080042a8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b08c      	sub	sp, #48	; 0x30
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	60b9      	str	r1, [r7, #8]
 80042b2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80042b4:	2300      	movs	r3, #0
 80042b6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80042bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d10a      	bne.n	80042d8 <xQueueReceive+0x30>
	__asm volatile
 80042c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c6:	f383 8811 	msr	BASEPRI, r3
 80042ca:	f3bf 8f6f 	isb	sy
 80042ce:	f3bf 8f4f 	dsb	sy
 80042d2:	623b      	str	r3, [r7, #32]
}
 80042d4:	bf00      	nop
 80042d6:	e7fe      	b.n	80042d6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d103      	bne.n	80042e6 <xQueueReceive+0x3e>
 80042de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d101      	bne.n	80042ea <xQueueReceive+0x42>
 80042e6:	2301      	movs	r3, #1
 80042e8:	e000      	b.n	80042ec <xQueueReceive+0x44>
 80042ea:	2300      	movs	r3, #0
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d10a      	bne.n	8004306 <xQueueReceive+0x5e>
	__asm volatile
 80042f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042f4:	f383 8811 	msr	BASEPRI, r3
 80042f8:	f3bf 8f6f 	isb	sy
 80042fc:	f3bf 8f4f 	dsb	sy
 8004300:	61fb      	str	r3, [r7, #28]
}
 8004302:	bf00      	nop
 8004304:	e7fe      	b.n	8004304 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004306:	f001 fb5d 	bl	80059c4 <xTaskGetSchedulerState>
 800430a:	4603      	mov	r3, r0
 800430c:	2b00      	cmp	r3, #0
 800430e:	d102      	bne.n	8004316 <xQueueReceive+0x6e>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d101      	bne.n	800431a <xQueueReceive+0x72>
 8004316:	2301      	movs	r3, #1
 8004318:	e000      	b.n	800431c <xQueueReceive+0x74>
 800431a:	2300      	movs	r3, #0
 800431c:	2b00      	cmp	r3, #0
 800431e:	d10a      	bne.n	8004336 <xQueueReceive+0x8e>
	__asm volatile
 8004320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004324:	f383 8811 	msr	BASEPRI, r3
 8004328:	f3bf 8f6f 	isb	sy
 800432c:	f3bf 8f4f 	dsb	sy
 8004330:	61bb      	str	r3, [r7, #24]
}
 8004332:	bf00      	nop
 8004334:	e7fe      	b.n	8004334 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004336:	f002 f99d 	bl	8006674 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800433a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800433c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800433e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004342:	2b00      	cmp	r3, #0
 8004344:	d01f      	beq.n	8004386 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004346:	68b9      	ldr	r1, [r7, #8]
 8004348:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800434a:	f000 fabe 	bl	80048ca <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800434e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004350:	1e5a      	subs	r2, r3, #1
 8004352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004354:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004358:	691b      	ldr	r3, [r3, #16]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d00f      	beq.n	800437e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800435e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004360:	3310      	adds	r3, #16
 8004362:	4618      	mov	r0, r3
 8004364:	f001 f96c 	bl	8005640 <xTaskRemoveFromEventList>
 8004368:	4603      	mov	r3, r0
 800436a:	2b00      	cmp	r3, #0
 800436c:	d007      	beq.n	800437e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800436e:	4b3d      	ldr	r3, [pc, #244]	; (8004464 <xQueueReceive+0x1bc>)
 8004370:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004374:	601a      	str	r2, [r3, #0]
 8004376:	f3bf 8f4f 	dsb	sy
 800437a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800437e:	f002 f9a9 	bl	80066d4 <vPortExitCritical>
				return pdPASS;
 8004382:	2301      	movs	r3, #1
 8004384:	e069      	b.n	800445a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d103      	bne.n	8004394 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800438c:	f002 f9a2 	bl	80066d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004390:	2300      	movs	r3, #0
 8004392:	e062      	b.n	800445a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004396:	2b00      	cmp	r3, #0
 8004398:	d106      	bne.n	80043a8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800439a:	f107 0310 	add.w	r3, r7, #16
 800439e:	4618      	mov	r0, r3
 80043a0:	f001 f9b2 	bl	8005708 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80043a4:	2301      	movs	r3, #1
 80043a6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80043a8:	f002 f994 	bl	80066d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80043ac:	f000 ff1e 	bl	80051ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80043b0:	f002 f960 	bl	8006674 <vPortEnterCritical>
 80043b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80043ba:	b25b      	sxtb	r3, r3
 80043bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043c0:	d103      	bne.n	80043ca <xQueueReceive+0x122>
 80043c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043c4:	2200      	movs	r2, #0
 80043c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80043d0:	b25b      	sxtb	r3, r3
 80043d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043d6:	d103      	bne.n	80043e0 <xQueueReceive+0x138>
 80043d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043da:	2200      	movs	r2, #0
 80043dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80043e0:	f002 f978 	bl	80066d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80043e4:	1d3a      	adds	r2, r7, #4
 80043e6:	f107 0310 	add.w	r3, r7, #16
 80043ea:	4611      	mov	r1, r2
 80043ec:	4618      	mov	r0, r3
 80043ee:	f001 f9a1 	bl	8005734 <xTaskCheckForTimeOut>
 80043f2:	4603      	mov	r3, r0
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d123      	bne.n	8004440 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80043f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80043fa:	f000 fade 	bl	80049ba <prvIsQueueEmpty>
 80043fe:	4603      	mov	r3, r0
 8004400:	2b00      	cmp	r3, #0
 8004402:	d017      	beq.n	8004434 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004406:	3324      	adds	r3, #36	; 0x24
 8004408:	687a      	ldr	r2, [r7, #4]
 800440a:	4611      	mov	r1, r2
 800440c:	4618      	mov	r0, r3
 800440e:	f001 f8c7 	bl	80055a0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004412:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004414:	f000 fa7f 	bl	8004916 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004418:	f000 fef6 	bl	8005208 <xTaskResumeAll>
 800441c:	4603      	mov	r3, r0
 800441e:	2b00      	cmp	r3, #0
 8004420:	d189      	bne.n	8004336 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004422:	4b10      	ldr	r3, [pc, #64]	; (8004464 <xQueueReceive+0x1bc>)
 8004424:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004428:	601a      	str	r2, [r3, #0]
 800442a:	f3bf 8f4f 	dsb	sy
 800442e:	f3bf 8f6f 	isb	sy
 8004432:	e780      	b.n	8004336 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004434:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004436:	f000 fa6e 	bl	8004916 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800443a:	f000 fee5 	bl	8005208 <xTaskResumeAll>
 800443e:	e77a      	b.n	8004336 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004440:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004442:	f000 fa68 	bl	8004916 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004446:	f000 fedf 	bl	8005208 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800444a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800444c:	f000 fab5 	bl	80049ba <prvIsQueueEmpty>
 8004450:	4603      	mov	r3, r0
 8004452:	2b00      	cmp	r3, #0
 8004454:	f43f af6f 	beq.w	8004336 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004458:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800445a:	4618      	mov	r0, r3
 800445c:	3730      	adds	r7, #48	; 0x30
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}
 8004462:	bf00      	nop
 8004464:	e000ed04 	.word	0xe000ed04

08004468 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b08e      	sub	sp, #56	; 0x38
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004472:	2300      	movs	r3, #0
 8004474:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800447a:	2300      	movs	r3, #0
 800447c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800447e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004480:	2b00      	cmp	r3, #0
 8004482:	d10a      	bne.n	800449a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8004484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004488:	f383 8811 	msr	BASEPRI, r3
 800448c:	f3bf 8f6f 	isb	sy
 8004490:	f3bf 8f4f 	dsb	sy
 8004494:	623b      	str	r3, [r7, #32]
}
 8004496:	bf00      	nop
 8004498:	e7fe      	b.n	8004498 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800449a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800449c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d00a      	beq.n	80044b8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80044a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a6:	f383 8811 	msr	BASEPRI, r3
 80044aa:	f3bf 8f6f 	isb	sy
 80044ae:	f3bf 8f4f 	dsb	sy
 80044b2:	61fb      	str	r3, [r7, #28]
}
 80044b4:	bf00      	nop
 80044b6:	e7fe      	b.n	80044b6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80044b8:	f001 fa84 	bl	80059c4 <xTaskGetSchedulerState>
 80044bc:	4603      	mov	r3, r0
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d102      	bne.n	80044c8 <xQueueSemaphoreTake+0x60>
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d101      	bne.n	80044cc <xQueueSemaphoreTake+0x64>
 80044c8:	2301      	movs	r3, #1
 80044ca:	e000      	b.n	80044ce <xQueueSemaphoreTake+0x66>
 80044cc:	2300      	movs	r3, #0
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d10a      	bne.n	80044e8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80044d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044d6:	f383 8811 	msr	BASEPRI, r3
 80044da:	f3bf 8f6f 	isb	sy
 80044de:	f3bf 8f4f 	dsb	sy
 80044e2:	61bb      	str	r3, [r7, #24]
}
 80044e4:	bf00      	nop
 80044e6:	e7fe      	b.n	80044e6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80044e8:	f002 f8c4 	bl	8006674 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80044ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80044f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d024      	beq.n	8004542 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80044f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044fa:	1e5a      	subs	r2, r3, #1
 80044fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044fe:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d104      	bne.n	8004512 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004508:	f001 fbd2 	bl	8005cb0 <pvTaskIncrementMutexHeldCount>
 800450c:	4602      	mov	r2, r0
 800450e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004510:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004514:	691b      	ldr	r3, [r3, #16]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d00f      	beq.n	800453a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800451a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800451c:	3310      	adds	r3, #16
 800451e:	4618      	mov	r0, r3
 8004520:	f001 f88e 	bl	8005640 <xTaskRemoveFromEventList>
 8004524:	4603      	mov	r3, r0
 8004526:	2b00      	cmp	r3, #0
 8004528:	d007      	beq.n	800453a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800452a:	4b54      	ldr	r3, [pc, #336]	; (800467c <xQueueSemaphoreTake+0x214>)
 800452c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004530:	601a      	str	r2, [r3, #0]
 8004532:	f3bf 8f4f 	dsb	sy
 8004536:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800453a:	f002 f8cb 	bl	80066d4 <vPortExitCritical>
				return pdPASS;
 800453e:	2301      	movs	r3, #1
 8004540:	e097      	b.n	8004672 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d111      	bne.n	800456c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800454a:	2b00      	cmp	r3, #0
 800454c:	d00a      	beq.n	8004564 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800454e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004552:	f383 8811 	msr	BASEPRI, r3
 8004556:	f3bf 8f6f 	isb	sy
 800455a:	f3bf 8f4f 	dsb	sy
 800455e:	617b      	str	r3, [r7, #20]
}
 8004560:	bf00      	nop
 8004562:	e7fe      	b.n	8004562 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004564:	f002 f8b6 	bl	80066d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004568:	2300      	movs	r3, #0
 800456a:	e082      	b.n	8004672 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800456c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800456e:	2b00      	cmp	r3, #0
 8004570:	d106      	bne.n	8004580 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004572:	f107 030c 	add.w	r3, r7, #12
 8004576:	4618      	mov	r0, r3
 8004578:	f001 f8c6 	bl	8005708 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800457c:	2301      	movs	r3, #1
 800457e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004580:	f002 f8a8 	bl	80066d4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004584:	f000 fe32 	bl	80051ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004588:	f002 f874 	bl	8006674 <vPortEnterCritical>
 800458c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800458e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004592:	b25b      	sxtb	r3, r3
 8004594:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004598:	d103      	bne.n	80045a2 <xQueueSemaphoreTake+0x13a>
 800459a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800459c:	2200      	movs	r2, #0
 800459e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80045a8:	b25b      	sxtb	r3, r3
 80045aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045ae:	d103      	bne.n	80045b8 <xQueueSemaphoreTake+0x150>
 80045b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045b2:	2200      	movs	r2, #0
 80045b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80045b8:	f002 f88c 	bl	80066d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80045bc:	463a      	mov	r2, r7
 80045be:	f107 030c 	add.w	r3, r7, #12
 80045c2:	4611      	mov	r1, r2
 80045c4:	4618      	mov	r0, r3
 80045c6:	f001 f8b5 	bl	8005734 <xTaskCheckForTimeOut>
 80045ca:	4603      	mov	r3, r0
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d132      	bne.n	8004636 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80045d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80045d2:	f000 f9f2 	bl	80049ba <prvIsQueueEmpty>
 80045d6:	4603      	mov	r3, r0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d026      	beq.n	800462a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80045dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d109      	bne.n	80045f8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80045e4:	f002 f846 	bl	8006674 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80045e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	4618      	mov	r0, r3
 80045ee:	f001 fa07 	bl	8005a00 <xTaskPriorityInherit>
 80045f2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80045f4:	f002 f86e 	bl	80066d4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80045f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045fa:	3324      	adds	r3, #36	; 0x24
 80045fc:	683a      	ldr	r2, [r7, #0]
 80045fe:	4611      	mov	r1, r2
 8004600:	4618      	mov	r0, r3
 8004602:	f000 ffcd 	bl	80055a0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004606:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004608:	f000 f985 	bl	8004916 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800460c:	f000 fdfc 	bl	8005208 <xTaskResumeAll>
 8004610:	4603      	mov	r3, r0
 8004612:	2b00      	cmp	r3, #0
 8004614:	f47f af68 	bne.w	80044e8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8004618:	4b18      	ldr	r3, [pc, #96]	; (800467c <xQueueSemaphoreTake+0x214>)
 800461a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800461e:	601a      	str	r2, [r3, #0]
 8004620:	f3bf 8f4f 	dsb	sy
 8004624:	f3bf 8f6f 	isb	sy
 8004628:	e75e      	b.n	80044e8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800462a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800462c:	f000 f973 	bl	8004916 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004630:	f000 fdea 	bl	8005208 <xTaskResumeAll>
 8004634:	e758      	b.n	80044e8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004636:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004638:	f000 f96d 	bl	8004916 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800463c:	f000 fde4 	bl	8005208 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004640:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004642:	f000 f9ba 	bl	80049ba <prvIsQueueEmpty>
 8004646:	4603      	mov	r3, r0
 8004648:	2b00      	cmp	r3, #0
 800464a:	f43f af4d 	beq.w	80044e8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800464e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004650:	2b00      	cmp	r3, #0
 8004652:	d00d      	beq.n	8004670 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8004654:	f002 f80e 	bl	8006674 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004658:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800465a:	f000 f8b4 	bl	80047c6 <prvGetDisinheritPriorityAfterTimeout>
 800465e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004666:	4618      	mov	r0, r3
 8004668:	f001 faa0 	bl	8005bac <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800466c:	f002 f832 	bl	80066d4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004670:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004672:	4618      	mov	r0, r3
 8004674:	3738      	adds	r7, #56	; 0x38
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
 800467a:	bf00      	nop
 800467c:	e000ed04 	.word	0xe000ed04

08004680 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b08e      	sub	sp, #56	; 0x38
 8004684:	af00      	add	r7, sp, #0
 8004686:	60f8      	str	r0, [r7, #12]
 8004688:	60b9      	str	r1, [r7, #8]
 800468a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004692:	2b00      	cmp	r3, #0
 8004694:	d10a      	bne.n	80046ac <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8004696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800469a:	f383 8811 	msr	BASEPRI, r3
 800469e:	f3bf 8f6f 	isb	sy
 80046a2:	f3bf 8f4f 	dsb	sy
 80046a6:	623b      	str	r3, [r7, #32]
}
 80046a8:	bf00      	nop
 80046aa:	e7fe      	b.n	80046aa <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d103      	bne.n	80046ba <xQueueReceiveFromISR+0x3a>
 80046b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d101      	bne.n	80046be <xQueueReceiveFromISR+0x3e>
 80046ba:	2301      	movs	r3, #1
 80046bc:	e000      	b.n	80046c0 <xQueueReceiveFromISR+0x40>
 80046be:	2300      	movs	r3, #0
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d10a      	bne.n	80046da <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80046c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c8:	f383 8811 	msr	BASEPRI, r3
 80046cc:	f3bf 8f6f 	isb	sy
 80046d0:	f3bf 8f4f 	dsb	sy
 80046d4:	61fb      	str	r3, [r7, #28]
}
 80046d6:	bf00      	nop
 80046d8:	e7fe      	b.n	80046d8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80046da:	f002 f8ad 	bl	8006838 <vPortValidateInterruptPriority>
	__asm volatile
 80046de:	f3ef 8211 	mrs	r2, BASEPRI
 80046e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046e6:	f383 8811 	msr	BASEPRI, r3
 80046ea:	f3bf 8f6f 	isb	sy
 80046ee:	f3bf 8f4f 	dsb	sy
 80046f2:	61ba      	str	r2, [r7, #24]
 80046f4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80046f6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80046f8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80046fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046fe:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004702:	2b00      	cmp	r3, #0
 8004704:	d02f      	beq.n	8004766 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004708:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800470c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004710:	68b9      	ldr	r1, [r7, #8]
 8004712:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004714:	f000 f8d9 	bl	80048ca <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800471a:	1e5a      	subs	r2, r3, #1
 800471c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800471e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004720:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004724:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004728:	d112      	bne.n	8004750 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800472a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800472c:	691b      	ldr	r3, [r3, #16]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d016      	beq.n	8004760 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004734:	3310      	adds	r3, #16
 8004736:	4618      	mov	r0, r3
 8004738:	f000 ff82 	bl	8005640 <xTaskRemoveFromEventList>
 800473c:	4603      	mov	r3, r0
 800473e:	2b00      	cmp	r3, #0
 8004740:	d00e      	beq.n	8004760 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d00b      	beq.n	8004760 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	601a      	str	r2, [r3, #0]
 800474e:	e007      	b.n	8004760 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004750:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004754:	3301      	adds	r3, #1
 8004756:	b2db      	uxtb	r3, r3
 8004758:	b25a      	sxtb	r2, r3
 800475a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800475c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004760:	2301      	movs	r3, #1
 8004762:	637b      	str	r3, [r7, #52]	; 0x34
 8004764:	e001      	b.n	800476a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8004766:	2300      	movs	r3, #0
 8004768:	637b      	str	r3, [r7, #52]	; 0x34
 800476a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800476c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	f383 8811 	msr	BASEPRI, r3
}
 8004774:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004776:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004778:	4618      	mov	r0, r3
 800477a:	3738      	adds	r7, #56	; 0x38
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}

08004780 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b084      	sub	sp, #16
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d10a      	bne.n	80047a8 <vQueueDelete+0x28>
	__asm volatile
 8004792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004796:	f383 8811 	msr	BASEPRI, r3
 800479a:	f3bf 8f6f 	isb	sy
 800479e:	f3bf 8f4f 	dsb	sy
 80047a2:	60bb      	str	r3, [r7, #8]
}
 80047a4:	bf00      	nop
 80047a6:	e7fe      	b.n	80047a6 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80047a8:	68f8      	ldr	r0, [r7, #12]
 80047aa:	f000 f95f 	bl	8004a6c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d102      	bne.n	80047be <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80047b8:	68f8      	ldr	r0, [r7, #12]
 80047ba:	f002 f949 	bl	8006a50 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80047be:	bf00      	nop
 80047c0:	3710      	adds	r7, #16
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}

080047c6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80047c6:	b480      	push	{r7}
 80047c8:	b085      	sub	sp, #20
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d006      	beq.n	80047e4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80047e0:	60fb      	str	r3, [r7, #12]
 80047e2:	e001      	b.n	80047e8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80047e4:	2300      	movs	r3, #0
 80047e6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80047e8:	68fb      	ldr	r3, [r7, #12]
	}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3714      	adds	r7, #20
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr

080047f6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80047f6:	b580      	push	{r7, lr}
 80047f8:	b086      	sub	sp, #24
 80047fa:	af00      	add	r7, sp, #0
 80047fc:	60f8      	str	r0, [r7, #12]
 80047fe:	60b9      	str	r1, [r7, #8]
 8004800:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004802:	2300      	movs	r3, #0
 8004804:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800480a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004810:	2b00      	cmp	r3, #0
 8004812:	d10d      	bne.n	8004830 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d14d      	bne.n	80048b8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	4618      	mov	r0, r3
 8004822:	f001 f955 	bl	8005ad0 <xTaskPriorityDisinherit>
 8004826:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2200      	movs	r2, #0
 800482c:	609a      	str	r2, [r3, #8]
 800482e:	e043      	b.n	80048b8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d119      	bne.n	800486a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	6858      	ldr	r0, [r3, #4]
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483e:	461a      	mov	r2, r3
 8004840:	68b9      	ldr	r1, [r7, #8]
 8004842:	f002 fa49 	bl	8006cd8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	685a      	ldr	r2, [r3, #4]
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484e:	441a      	add	r2, r3
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	685a      	ldr	r2, [r3, #4]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	429a      	cmp	r2, r3
 800485e:	d32b      	bcc.n	80048b8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	605a      	str	r2, [r3, #4]
 8004868:	e026      	b.n	80048b8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	68d8      	ldr	r0, [r3, #12]
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004872:	461a      	mov	r2, r3
 8004874:	68b9      	ldr	r1, [r7, #8]
 8004876:	f002 fa2f 	bl	8006cd8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	68da      	ldr	r2, [r3, #12]
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004882:	425b      	negs	r3, r3
 8004884:	441a      	add	r2, r3
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	68da      	ldr	r2, [r3, #12]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	429a      	cmp	r2, r3
 8004894:	d207      	bcs.n	80048a6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	689a      	ldr	r2, [r3, #8]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489e:	425b      	negs	r3, r3
 80048a0:	441a      	add	r2, r3
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2b02      	cmp	r3, #2
 80048aa:	d105      	bne.n	80048b8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d002      	beq.n	80048b8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	3b01      	subs	r3, #1
 80048b6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	1c5a      	adds	r2, r3, #1
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80048c0:	697b      	ldr	r3, [r7, #20]
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3718      	adds	r7, #24
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}

080048ca <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80048ca:	b580      	push	{r7, lr}
 80048cc:	b082      	sub	sp, #8
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	6078      	str	r0, [r7, #4]
 80048d2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d018      	beq.n	800490e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	68da      	ldr	r2, [r3, #12]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e4:	441a      	add	r2, r3
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	68da      	ldr	r2, [r3, #12]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	429a      	cmp	r2, r3
 80048f4:	d303      	bcc.n	80048fe <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	68d9      	ldr	r1, [r3, #12]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004906:	461a      	mov	r2, r3
 8004908:	6838      	ldr	r0, [r7, #0]
 800490a:	f002 f9e5 	bl	8006cd8 <memcpy>
	}
}
 800490e:	bf00      	nop
 8004910:	3708      	adds	r7, #8
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}

08004916 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004916:	b580      	push	{r7, lr}
 8004918:	b084      	sub	sp, #16
 800491a:	af00      	add	r7, sp, #0
 800491c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800491e:	f001 fea9 	bl	8006674 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004928:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800492a:	e011      	b.n	8004950 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004930:	2b00      	cmp	r3, #0
 8004932:	d012      	beq.n	800495a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	3324      	adds	r3, #36	; 0x24
 8004938:	4618      	mov	r0, r3
 800493a:	f000 fe81 	bl	8005640 <xTaskRemoveFromEventList>
 800493e:	4603      	mov	r3, r0
 8004940:	2b00      	cmp	r3, #0
 8004942:	d001      	beq.n	8004948 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004944:	f000 ff58 	bl	80057f8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004948:	7bfb      	ldrb	r3, [r7, #15]
 800494a:	3b01      	subs	r3, #1
 800494c:	b2db      	uxtb	r3, r3
 800494e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004950:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004954:	2b00      	cmp	r3, #0
 8004956:	dce9      	bgt.n	800492c <prvUnlockQueue+0x16>
 8004958:	e000      	b.n	800495c <prvUnlockQueue+0x46>
					break;
 800495a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	22ff      	movs	r2, #255	; 0xff
 8004960:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004964:	f001 feb6 	bl	80066d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004968:	f001 fe84 	bl	8006674 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004972:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004974:	e011      	b.n	800499a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	691b      	ldr	r3, [r3, #16]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d012      	beq.n	80049a4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	3310      	adds	r3, #16
 8004982:	4618      	mov	r0, r3
 8004984:	f000 fe5c 	bl	8005640 <xTaskRemoveFromEventList>
 8004988:	4603      	mov	r3, r0
 800498a:	2b00      	cmp	r3, #0
 800498c:	d001      	beq.n	8004992 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800498e:	f000 ff33 	bl	80057f8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004992:	7bbb      	ldrb	r3, [r7, #14]
 8004994:	3b01      	subs	r3, #1
 8004996:	b2db      	uxtb	r3, r3
 8004998:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800499a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	dce9      	bgt.n	8004976 <prvUnlockQueue+0x60>
 80049a2:	e000      	b.n	80049a6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80049a4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	22ff      	movs	r2, #255	; 0xff
 80049aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80049ae:	f001 fe91 	bl	80066d4 <vPortExitCritical>
}
 80049b2:	bf00      	nop
 80049b4:	3710      	adds	r7, #16
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}

080049ba <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80049ba:	b580      	push	{r7, lr}
 80049bc:	b084      	sub	sp, #16
 80049be:	af00      	add	r7, sp, #0
 80049c0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80049c2:	f001 fe57 	bl	8006674 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d102      	bne.n	80049d4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80049ce:	2301      	movs	r3, #1
 80049d0:	60fb      	str	r3, [r7, #12]
 80049d2:	e001      	b.n	80049d8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80049d4:	2300      	movs	r3, #0
 80049d6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80049d8:	f001 fe7c 	bl	80066d4 <vPortExitCritical>

	return xReturn;
 80049dc:	68fb      	ldr	r3, [r7, #12]
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3710      	adds	r7, #16
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}

080049e6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80049e6:	b580      	push	{r7, lr}
 80049e8:	b084      	sub	sp, #16
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80049ee:	f001 fe41 	bl	8006674 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d102      	bne.n	8004a04 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80049fe:	2301      	movs	r3, #1
 8004a00:	60fb      	str	r3, [r7, #12]
 8004a02:	e001      	b.n	8004a08 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004a04:	2300      	movs	r3, #0
 8004a06:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004a08:	f001 fe64 	bl	80066d4 <vPortExitCritical>

	return xReturn;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3710      	adds	r7, #16
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}
	...

08004a18 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004a18:	b480      	push	{r7}
 8004a1a:	b085      	sub	sp, #20
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004a22:	2300      	movs	r3, #0
 8004a24:	60fb      	str	r3, [r7, #12]
 8004a26:	e014      	b.n	8004a52 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004a28:	4a0f      	ldr	r2, [pc, #60]	; (8004a68 <vQueueAddToRegistry+0x50>)
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d10b      	bne.n	8004a4c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004a34:	490c      	ldr	r1, [pc, #48]	; (8004a68 <vQueueAddToRegistry+0x50>)
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	683a      	ldr	r2, [r7, #0]
 8004a3a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004a3e:	4a0a      	ldr	r2, [pc, #40]	; (8004a68 <vQueueAddToRegistry+0x50>)
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	00db      	lsls	r3, r3, #3
 8004a44:	4413      	add	r3, r2
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004a4a:	e006      	b.n	8004a5a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	3301      	adds	r3, #1
 8004a50:	60fb      	str	r3, [r7, #12]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2b07      	cmp	r3, #7
 8004a56:	d9e7      	bls.n	8004a28 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004a58:	bf00      	nop
 8004a5a:	bf00      	nop
 8004a5c:	3714      	adds	r7, #20
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a64:	4770      	bx	lr
 8004a66:	bf00      	nop
 8004a68:	20000900 	.word	0x20000900

08004a6c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b085      	sub	sp, #20
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004a74:	2300      	movs	r3, #0
 8004a76:	60fb      	str	r3, [r7, #12]
 8004a78:	e016      	b.n	8004aa8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8004a7a:	4a10      	ldr	r2, [pc, #64]	; (8004abc <vQueueUnregisterQueue+0x50>)
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	00db      	lsls	r3, r3, #3
 8004a80:	4413      	add	r3, r2
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	687a      	ldr	r2, [r7, #4]
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d10b      	bne.n	8004aa2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8004a8a:	4a0c      	ldr	r2, [pc, #48]	; (8004abc <vQueueUnregisterQueue+0x50>)
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2100      	movs	r1, #0
 8004a90:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8004a94:	4a09      	ldr	r2, [pc, #36]	; (8004abc <vQueueUnregisterQueue+0x50>)
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	00db      	lsls	r3, r3, #3
 8004a9a:	4413      	add	r3, r2
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	605a      	str	r2, [r3, #4]
				break;
 8004aa0:	e006      	b.n	8004ab0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	3301      	adds	r3, #1
 8004aa6:	60fb      	str	r3, [r7, #12]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2b07      	cmp	r3, #7
 8004aac:	d9e5      	bls.n	8004a7a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8004aae:	bf00      	nop
 8004ab0:	bf00      	nop
 8004ab2:	3714      	adds	r7, #20
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr
 8004abc:	20000900 	.word	0x20000900

08004ac0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b086      	sub	sp, #24
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	60f8      	str	r0, [r7, #12]
 8004ac8:	60b9      	str	r1, [r7, #8]
 8004aca:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004ad0:	f001 fdd0 	bl	8006674 <vPortEnterCritical>
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ada:	b25b      	sxtb	r3, r3
 8004adc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ae0:	d103      	bne.n	8004aea <vQueueWaitForMessageRestricted+0x2a>
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004af0:	b25b      	sxtb	r3, r3
 8004af2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004af6:	d103      	bne.n	8004b00 <vQueueWaitForMessageRestricted+0x40>
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	2200      	movs	r2, #0
 8004afc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b00:	f001 fde8 	bl	80066d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d106      	bne.n	8004b1a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	3324      	adds	r3, #36	; 0x24
 8004b10:	687a      	ldr	r2, [r7, #4]
 8004b12:	68b9      	ldr	r1, [r7, #8]
 8004b14:	4618      	mov	r0, r3
 8004b16:	f000 fd67 	bl	80055e8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004b1a:	6978      	ldr	r0, [r7, #20]
 8004b1c:	f7ff fefb 	bl	8004916 <prvUnlockQueue>
	}
 8004b20:	bf00      	nop
 8004b22:	3718      	adds	r7, #24
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}

08004b28 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b08e      	sub	sp, #56	; 0x38
 8004b2c:	af04      	add	r7, sp, #16
 8004b2e:	60f8      	str	r0, [r7, #12]
 8004b30:	60b9      	str	r1, [r7, #8]
 8004b32:	607a      	str	r2, [r7, #4]
 8004b34:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004b36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d10a      	bne.n	8004b52 <xTaskCreateStatic+0x2a>
	__asm volatile
 8004b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b40:	f383 8811 	msr	BASEPRI, r3
 8004b44:	f3bf 8f6f 	isb	sy
 8004b48:	f3bf 8f4f 	dsb	sy
 8004b4c:	623b      	str	r3, [r7, #32]
}
 8004b4e:	bf00      	nop
 8004b50:	e7fe      	b.n	8004b50 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d10a      	bne.n	8004b6e <xTaskCreateStatic+0x46>
	__asm volatile
 8004b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b5c:	f383 8811 	msr	BASEPRI, r3
 8004b60:	f3bf 8f6f 	isb	sy
 8004b64:	f3bf 8f4f 	dsb	sy
 8004b68:	61fb      	str	r3, [r7, #28]
}
 8004b6a:	bf00      	nop
 8004b6c:	e7fe      	b.n	8004b6c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004b6e:	23bc      	movs	r3, #188	; 0xbc
 8004b70:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	2bbc      	cmp	r3, #188	; 0xbc
 8004b76:	d00a      	beq.n	8004b8e <xTaskCreateStatic+0x66>
	__asm volatile
 8004b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b7c:	f383 8811 	msr	BASEPRI, r3
 8004b80:	f3bf 8f6f 	isb	sy
 8004b84:	f3bf 8f4f 	dsb	sy
 8004b88:	61bb      	str	r3, [r7, #24]
}
 8004b8a:	bf00      	nop
 8004b8c:	e7fe      	b.n	8004b8c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004b8e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d01e      	beq.n	8004bd4 <xTaskCreateStatic+0xac>
 8004b96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d01b      	beq.n	8004bd4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b9e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ba4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba8:	2202      	movs	r2, #2
 8004baa:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004bae:	2300      	movs	r3, #0
 8004bb0:	9303      	str	r3, [sp, #12]
 8004bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb4:	9302      	str	r3, [sp, #8]
 8004bb6:	f107 0314 	add.w	r3, r7, #20
 8004bba:	9301      	str	r3, [sp, #4]
 8004bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bbe:	9300      	str	r3, [sp, #0]
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	68b9      	ldr	r1, [r7, #8]
 8004bc6:	68f8      	ldr	r0, [r7, #12]
 8004bc8:	f000 f850 	bl	8004c6c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004bcc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004bce:	f000 f8f3 	bl	8004db8 <prvAddNewTaskToReadyList>
 8004bd2:	e001      	b.n	8004bd8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004bd8:	697b      	ldr	r3, [r7, #20]
	}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3728      	adds	r7, #40	; 0x28
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}

08004be2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004be2:	b580      	push	{r7, lr}
 8004be4:	b08c      	sub	sp, #48	; 0x30
 8004be6:	af04      	add	r7, sp, #16
 8004be8:	60f8      	str	r0, [r7, #12]
 8004bea:	60b9      	str	r1, [r7, #8]
 8004bec:	603b      	str	r3, [r7, #0]
 8004bee:	4613      	mov	r3, r2
 8004bf0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004bf2:	88fb      	ldrh	r3, [r7, #6]
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f001 fe5e 	bl	80068b8 <pvPortMalloc>
 8004bfc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d00e      	beq.n	8004c22 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004c04:	20bc      	movs	r0, #188	; 0xbc
 8004c06:	f001 fe57 	bl	80068b8 <pvPortMalloc>
 8004c0a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004c0c:	69fb      	ldr	r3, [r7, #28]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d003      	beq.n	8004c1a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004c12:	69fb      	ldr	r3, [r7, #28]
 8004c14:	697a      	ldr	r2, [r7, #20]
 8004c16:	631a      	str	r2, [r3, #48]	; 0x30
 8004c18:	e005      	b.n	8004c26 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004c1a:	6978      	ldr	r0, [r7, #20]
 8004c1c:	f001 ff18 	bl	8006a50 <vPortFree>
 8004c20:	e001      	b.n	8004c26 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004c22:	2300      	movs	r3, #0
 8004c24:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004c26:	69fb      	ldr	r3, [r7, #28]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d017      	beq.n	8004c5c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004c2c:	69fb      	ldr	r3, [r7, #28]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004c34:	88fa      	ldrh	r2, [r7, #6]
 8004c36:	2300      	movs	r3, #0
 8004c38:	9303      	str	r3, [sp, #12]
 8004c3a:	69fb      	ldr	r3, [r7, #28]
 8004c3c:	9302      	str	r3, [sp, #8]
 8004c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c40:	9301      	str	r3, [sp, #4]
 8004c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c44:	9300      	str	r3, [sp, #0]
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	68b9      	ldr	r1, [r7, #8]
 8004c4a:	68f8      	ldr	r0, [r7, #12]
 8004c4c:	f000 f80e 	bl	8004c6c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004c50:	69f8      	ldr	r0, [r7, #28]
 8004c52:	f000 f8b1 	bl	8004db8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004c56:	2301      	movs	r3, #1
 8004c58:	61bb      	str	r3, [r7, #24]
 8004c5a:	e002      	b.n	8004c62 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004c5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004c60:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004c62:	69bb      	ldr	r3, [r7, #24]
	}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3720      	adds	r7, #32
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}

08004c6c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b088      	sub	sp, #32
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	60f8      	str	r0, [r7, #12]
 8004c74:	60b9      	str	r1, [r7, #8]
 8004c76:	607a      	str	r2, [r7, #4]
 8004c78:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c7c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	009b      	lsls	r3, r3, #2
 8004c82:	461a      	mov	r2, r3
 8004c84:	21a5      	movs	r1, #165	; 0xa5
 8004c86:	f002 f835 	bl	8006cf4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004c94:	3b01      	subs	r3, #1
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	4413      	add	r3, r2
 8004c9a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004c9c:	69bb      	ldr	r3, [r7, #24]
 8004c9e:	f023 0307 	bic.w	r3, r3, #7
 8004ca2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004ca4:	69bb      	ldr	r3, [r7, #24]
 8004ca6:	f003 0307 	and.w	r3, r3, #7
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d00a      	beq.n	8004cc4 <prvInitialiseNewTask+0x58>
	__asm volatile
 8004cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cb2:	f383 8811 	msr	BASEPRI, r3
 8004cb6:	f3bf 8f6f 	isb	sy
 8004cba:	f3bf 8f4f 	dsb	sy
 8004cbe:	617b      	str	r3, [r7, #20]
}
 8004cc0:	bf00      	nop
 8004cc2:	e7fe      	b.n	8004cc2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d01f      	beq.n	8004d0a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004cca:	2300      	movs	r3, #0
 8004ccc:	61fb      	str	r3, [r7, #28]
 8004cce:	e012      	b.n	8004cf6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004cd0:	68ba      	ldr	r2, [r7, #8]
 8004cd2:	69fb      	ldr	r3, [r7, #28]
 8004cd4:	4413      	add	r3, r2
 8004cd6:	7819      	ldrb	r1, [r3, #0]
 8004cd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cda:	69fb      	ldr	r3, [r7, #28]
 8004cdc:	4413      	add	r3, r2
 8004cde:	3334      	adds	r3, #52	; 0x34
 8004ce0:	460a      	mov	r2, r1
 8004ce2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004ce4:	68ba      	ldr	r2, [r7, #8]
 8004ce6:	69fb      	ldr	r3, [r7, #28]
 8004ce8:	4413      	add	r3, r2
 8004cea:	781b      	ldrb	r3, [r3, #0]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d006      	beq.n	8004cfe <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004cf0:	69fb      	ldr	r3, [r7, #28]
 8004cf2:	3301      	adds	r3, #1
 8004cf4:	61fb      	str	r3, [r7, #28]
 8004cf6:	69fb      	ldr	r3, [r7, #28]
 8004cf8:	2b0f      	cmp	r3, #15
 8004cfa:	d9e9      	bls.n	8004cd0 <prvInitialiseNewTask+0x64>
 8004cfc:	e000      	b.n	8004d00 <prvInitialiseNewTask+0x94>
			{
				break;
 8004cfe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d02:	2200      	movs	r2, #0
 8004d04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d08:	e003      	b.n	8004d12 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d14:	2b37      	cmp	r3, #55	; 0x37
 8004d16:	d901      	bls.n	8004d1c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004d18:	2337      	movs	r3, #55	; 0x37
 8004d1a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d20:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d26:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d30:	3304      	adds	r3, #4
 8004d32:	4618      	mov	r0, r3
 8004d34:	f7fe fe0a 	bl	800394c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d3a:	3318      	adds	r3, #24
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f7fe fe05 	bl	800394c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d46:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d4a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d50:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d56:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d62:	2200      	movs	r2, #0
 8004d64:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d6a:	3354      	adds	r3, #84	; 0x54
 8004d6c:	2260      	movs	r2, #96	; 0x60
 8004d6e:	2100      	movs	r1, #0
 8004d70:	4618      	mov	r0, r3
 8004d72:	f001 ffbf 	bl	8006cf4 <memset>
 8004d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d78:	4a0c      	ldr	r2, [pc, #48]	; (8004dac <prvInitialiseNewTask+0x140>)
 8004d7a:	659a      	str	r2, [r3, #88]	; 0x58
 8004d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d7e:	4a0c      	ldr	r2, [pc, #48]	; (8004db0 <prvInitialiseNewTask+0x144>)
 8004d80:	65da      	str	r2, [r3, #92]	; 0x5c
 8004d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d84:	4a0b      	ldr	r2, [pc, #44]	; (8004db4 <prvInitialiseNewTask+0x148>)
 8004d86:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004d88:	683a      	ldr	r2, [r7, #0]
 8004d8a:	68f9      	ldr	r1, [r7, #12]
 8004d8c:	69b8      	ldr	r0, [r7, #24]
 8004d8e:	f001 fb45 	bl	800641c <pxPortInitialiseStack>
 8004d92:	4602      	mov	r2, r0
 8004d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d96:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d002      	beq.n	8004da4 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004da0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004da2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004da4:	bf00      	nop
 8004da6:	3720      	adds	r7, #32
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}
 8004dac:	0800706c 	.word	0x0800706c
 8004db0:	0800708c 	.word	0x0800708c
 8004db4:	0800704c 	.word	0x0800704c

08004db8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b082      	sub	sp, #8
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004dc0:	f001 fc58 	bl	8006674 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004dc4:	4b2d      	ldr	r3, [pc, #180]	; (8004e7c <prvAddNewTaskToReadyList+0xc4>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	3301      	adds	r3, #1
 8004dca:	4a2c      	ldr	r2, [pc, #176]	; (8004e7c <prvAddNewTaskToReadyList+0xc4>)
 8004dcc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004dce:	4b2c      	ldr	r3, [pc, #176]	; (8004e80 <prvAddNewTaskToReadyList+0xc8>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d109      	bne.n	8004dea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004dd6:	4a2a      	ldr	r2, [pc, #168]	; (8004e80 <prvAddNewTaskToReadyList+0xc8>)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004ddc:	4b27      	ldr	r3, [pc, #156]	; (8004e7c <prvAddNewTaskToReadyList+0xc4>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d110      	bne.n	8004e06 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004de4:	f000 fd2c 	bl	8005840 <prvInitialiseTaskLists>
 8004de8:	e00d      	b.n	8004e06 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004dea:	4b26      	ldr	r3, [pc, #152]	; (8004e84 <prvAddNewTaskToReadyList+0xcc>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d109      	bne.n	8004e06 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004df2:	4b23      	ldr	r3, [pc, #140]	; (8004e80 <prvAddNewTaskToReadyList+0xc8>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d802      	bhi.n	8004e06 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004e00:	4a1f      	ldr	r2, [pc, #124]	; (8004e80 <prvAddNewTaskToReadyList+0xc8>)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004e06:	4b20      	ldr	r3, [pc, #128]	; (8004e88 <prvAddNewTaskToReadyList+0xd0>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	3301      	adds	r3, #1
 8004e0c:	4a1e      	ldr	r2, [pc, #120]	; (8004e88 <prvAddNewTaskToReadyList+0xd0>)
 8004e0e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004e10:	4b1d      	ldr	r3, [pc, #116]	; (8004e88 <prvAddNewTaskToReadyList+0xd0>)
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e1c:	4b1b      	ldr	r3, [pc, #108]	; (8004e8c <prvAddNewTaskToReadyList+0xd4>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d903      	bls.n	8004e2c <prvAddNewTaskToReadyList+0x74>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e28:	4a18      	ldr	r2, [pc, #96]	; (8004e8c <prvAddNewTaskToReadyList+0xd4>)
 8004e2a:	6013      	str	r3, [r2, #0]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e30:	4613      	mov	r3, r2
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	4413      	add	r3, r2
 8004e36:	009b      	lsls	r3, r3, #2
 8004e38:	4a15      	ldr	r2, [pc, #84]	; (8004e90 <prvAddNewTaskToReadyList+0xd8>)
 8004e3a:	441a      	add	r2, r3
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	3304      	adds	r3, #4
 8004e40:	4619      	mov	r1, r3
 8004e42:	4610      	mov	r0, r2
 8004e44:	f7fe fd8f 	bl	8003966 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004e48:	f001 fc44 	bl	80066d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004e4c:	4b0d      	ldr	r3, [pc, #52]	; (8004e84 <prvAddNewTaskToReadyList+0xcc>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d00e      	beq.n	8004e72 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004e54:	4b0a      	ldr	r3, [pc, #40]	; (8004e80 <prvAddNewTaskToReadyList+0xc8>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	d207      	bcs.n	8004e72 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004e62:	4b0c      	ldr	r3, [pc, #48]	; (8004e94 <prvAddNewTaskToReadyList+0xdc>)
 8004e64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e68:	601a      	str	r2, [r3, #0]
 8004e6a:	f3bf 8f4f 	dsb	sy
 8004e6e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e72:	bf00      	nop
 8004e74:	3708      	adds	r7, #8
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}
 8004e7a:	bf00      	nop
 8004e7c:	20000e14 	.word	0x20000e14
 8004e80:	20000940 	.word	0x20000940
 8004e84:	20000e20 	.word	0x20000e20
 8004e88:	20000e30 	.word	0x20000e30
 8004e8c:	20000e1c 	.word	0x20000e1c
 8004e90:	20000944 	.word	0x20000944
 8004e94:	e000ed04 	.word	0xe000ed04

08004e98 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b084      	sub	sp, #16
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d017      	beq.n	8004eda <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004eaa:	4b13      	ldr	r3, [pc, #76]	; (8004ef8 <vTaskDelay+0x60>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d00a      	beq.n	8004ec8 <vTaskDelay+0x30>
	__asm volatile
 8004eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eb6:	f383 8811 	msr	BASEPRI, r3
 8004eba:	f3bf 8f6f 	isb	sy
 8004ebe:	f3bf 8f4f 	dsb	sy
 8004ec2:	60bb      	str	r3, [r7, #8]
}
 8004ec4:	bf00      	nop
 8004ec6:	e7fe      	b.n	8004ec6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004ec8:	f000 f990 	bl	80051ec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004ecc:	2100      	movs	r1, #0
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f000 ff02 	bl	8005cd8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004ed4:	f000 f998 	bl	8005208 <xTaskResumeAll>
 8004ed8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d107      	bne.n	8004ef0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004ee0:	4b06      	ldr	r3, [pc, #24]	; (8004efc <vTaskDelay+0x64>)
 8004ee2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ee6:	601a      	str	r2, [r3, #0]
 8004ee8:	f3bf 8f4f 	dsb	sy
 8004eec:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004ef0:	bf00      	nop
 8004ef2:	3710      	adds	r7, #16
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}
 8004ef8:	20000e3c 	.word	0x20000e3c
 8004efc:	e000ed04 	.word	0xe000ed04

08004f00 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b084      	sub	sp, #16
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8004f08:	f001 fbb4 	bl	8006674 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d102      	bne.n	8004f18 <vTaskSuspend+0x18>
 8004f12:	4b30      	ldr	r3, [pc, #192]	; (8004fd4 <vTaskSuspend+0xd4>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	e000      	b.n	8004f1a <vTaskSuspend+0x1a>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	3304      	adds	r3, #4
 8004f20:	4618      	mov	r0, r3
 8004f22:	f7fe fd7d 	bl	8003a20 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d004      	beq.n	8004f38 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	3318      	adds	r3, #24
 8004f32:	4618      	mov	r0, r3
 8004f34:	f7fe fd74 	bl	8003a20 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	3304      	adds	r3, #4
 8004f3c:	4619      	mov	r1, r3
 8004f3e:	4826      	ldr	r0, [pc, #152]	; (8004fd8 <vTaskSuspend+0xd8>)
 8004f40:	f7fe fd11 	bl	8003966 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8004f4a:	b2db      	uxtb	r3, r3
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d103      	bne.n	8004f58 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2200      	movs	r2, #0
 8004f54:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8004f58:	f001 fbbc 	bl	80066d4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8004f5c:	4b1f      	ldr	r3, [pc, #124]	; (8004fdc <vTaskSuspend+0xdc>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d005      	beq.n	8004f70 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8004f64:	f001 fb86 	bl	8006674 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8004f68:	f000 fd0c 	bl	8005984 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8004f6c:	f001 fbb2 	bl	80066d4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8004f70:	4b18      	ldr	r3, [pc, #96]	; (8004fd4 <vTaskSuspend+0xd4>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	68fa      	ldr	r2, [r7, #12]
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d127      	bne.n	8004fca <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 8004f7a:	4b18      	ldr	r3, [pc, #96]	; (8004fdc <vTaskSuspend+0xdc>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d017      	beq.n	8004fb2 <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8004f82:	4b17      	ldr	r3, [pc, #92]	; (8004fe0 <vTaskSuspend+0xe0>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d00a      	beq.n	8004fa0 <vTaskSuspend+0xa0>
	__asm volatile
 8004f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f8e:	f383 8811 	msr	BASEPRI, r3
 8004f92:	f3bf 8f6f 	isb	sy
 8004f96:	f3bf 8f4f 	dsb	sy
 8004f9a:	60bb      	str	r3, [r7, #8]
}
 8004f9c:	bf00      	nop
 8004f9e:	e7fe      	b.n	8004f9e <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 8004fa0:	4b10      	ldr	r3, [pc, #64]	; (8004fe4 <vTaskSuspend+0xe4>)
 8004fa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fa6:	601a      	str	r2, [r3, #0]
 8004fa8:	f3bf 8f4f 	dsb	sy
 8004fac:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004fb0:	e00b      	b.n	8004fca <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8004fb2:	4b09      	ldr	r3, [pc, #36]	; (8004fd8 <vTaskSuspend+0xd8>)
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	4b0c      	ldr	r3, [pc, #48]	; (8004fe8 <vTaskSuspend+0xe8>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d103      	bne.n	8004fc6 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 8004fbe:	4b05      	ldr	r3, [pc, #20]	; (8004fd4 <vTaskSuspend+0xd4>)
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	601a      	str	r2, [r3, #0]
	}
 8004fc4:	e001      	b.n	8004fca <vTaskSuspend+0xca>
					vTaskSwitchContext();
 8004fc6:	f000 fa87 	bl	80054d8 <vTaskSwitchContext>
	}
 8004fca:	bf00      	nop
 8004fcc:	3710      	adds	r7, #16
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}
 8004fd2:	bf00      	nop
 8004fd4:	20000940 	.word	0x20000940
 8004fd8:	20000e00 	.word	0x20000e00
 8004fdc:	20000e20 	.word	0x20000e20
 8004fe0:	20000e3c 	.word	0x20000e3c
 8004fe4:	e000ed04 	.word	0xe000ed04
 8004fe8:	20000e14 	.word	0x20000e14

08004fec <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8004fec:	b480      	push	{r7}
 8004fee:	b087      	sub	sp, #28
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d10a      	bne.n	8005018 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8005002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005006:	f383 8811 	msr	BASEPRI, r3
 800500a:	f3bf 8f6f 	isb	sy
 800500e:	f3bf 8f4f 	dsb	sy
 8005012:	60fb      	str	r3, [r7, #12]
}
 8005014:	bf00      	nop
 8005016:	e7fe      	b.n	8005016 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	695b      	ldr	r3, [r3, #20]
 800501c:	4a0a      	ldr	r2, [pc, #40]	; (8005048 <prvTaskIsTaskSuspended+0x5c>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d10a      	bne.n	8005038 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005026:	4a09      	ldr	r2, [pc, #36]	; (800504c <prvTaskIsTaskSuspended+0x60>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d005      	beq.n	8005038 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005030:	2b00      	cmp	r3, #0
 8005032:	d101      	bne.n	8005038 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8005034:	2301      	movs	r3, #1
 8005036:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005038:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800503a:	4618      	mov	r0, r3
 800503c:	371c      	adds	r7, #28
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr
 8005046:	bf00      	nop
 8005048:	20000e00 	.word	0x20000e00
 800504c:	20000dd4 	.word	0x20000dd4

08005050 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8005050:	b580      	push	{r7, lr}
 8005052:	b084      	sub	sp, #16
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d10a      	bne.n	8005078 <vTaskResume+0x28>
	__asm volatile
 8005062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005066:	f383 8811 	msr	BASEPRI, r3
 800506a:	f3bf 8f6f 	isb	sy
 800506e:	f3bf 8f4f 	dsb	sy
 8005072:	60bb      	str	r3, [r7, #8]
}
 8005074:	bf00      	nop
 8005076:	e7fe      	b.n	8005076 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8005078:	4b20      	ldr	r3, [pc, #128]	; (80050fc <vTaskResume+0xac>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	68fa      	ldr	r2, [r7, #12]
 800507e:	429a      	cmp	r2, r3
 8005080:	d038      	beq.n	80050f4 <vTaskResume+0xa4>
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d035      	beq.n	80050f4 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 8005088:	f001 faf4 	bl	8006674 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800508c:	68f8      	ldr	r0, [r7, #12]
 800508e:	f7ff ffad 	bl	8004fec <prvTaskIsTaskSuspended>
 8005092:	4603      	mov	r3, r0
 8005094:	2b00      	cmp	r3, #0
 8005096:	d02b      	beq.n	80050f0 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	3304      	adds	r3, #4
 800509c:	4618      	mov	r0, r3
 800509e:	f7fe fcbf 	bl	8003a20 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050a6:	4b16      	ldr	r3, [pc, #88]	; (8005100 <vTaskResume+0xb0>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d903      	bls.n	80050b6 <vTaskResume+0x66>
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b2:	4a13      	ldr	r2, [pc, #76]	; (8005100 <vTaskResume+0xb0>)
 80050b4:	6013      	str	r3, [r2, #0]
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050ba:	4613      	mov	r3, r2
 80050bc:	009b      	lsls	r3, r3, #2
 80050be:	4413      	add	r3, r2
 80050c0:	009b      	lsls	r3, r3, #2
 80050c2:	4a10      	ldr	r2, [pc, #64]	; (8005104 <vTaskResume+0xb4>)
 80050c4:	441a      	add	r2, r3
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	3304      	adds	r3, #4
 80050ca:	4619      	mov	r1, r3
 80050cc:	4610      	mov	r0, r2
 80050ce:	f7fe fc4a 	bl	8003966 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050d6:	4b09      	ldr	r3, [pc, #36]	; (80050fc <vTaskResume+0xac>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050dc:	429a      	cmp	r2, r3
 80050de:	d307      	bcc.n	80050f0 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 80050e0:	4b09      	ldr	r3, [pc, #36]	; (8005108 <vTaskResume+0xb8>)
 80050e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050e6:	601a      	str	r2, [r3, #0]
 80050e8:	f3bf 8f4f 	dsb	sy
 80050ec:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 80050f0:	f001 faf0 	bl	80066d4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80050f4:	bf00      	nop
 80050f6:	3710      	adds	r7, #16
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}
 80050fc:	20000940 	.word	0x20000940
 8005100:	20000e1c 	.word	0x20000e1c
 8005104:	20000944 	.word	0x20000944
 8005108:	e000ed04 	.word	0xe000ed04

0800510c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b08a      	sub	sp, #40	; 0x28
 8005110:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005112:	2300      	movs	r3, #0
 8005114:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005116:	2300      	movs	r3, #0
 8005118:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800511a:	463a      	mov	r2, r7
 800511c:	1d39      	adds	r1, r7, #4
 800511e:	f107 0308 	add.w	r3, r7, #8
 8005122:	4618      	mov	r0, r3
 8005124:	f7fe fbbe 	bl	80038a4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005128:	6839      	ldr	r1, [r7, #0]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	68ba      	ldr	r2, [r7, #8]
 800512e:	9202      	str	r2, [sp, #8]
 8005130:	9301      	str	r3, [sp, #4]
 8005132:	2300      	movs	r3, #0
 8005134:	9300      	str	r3, [sp, #0]
 8005136:	2300      	movs	r3, #0
 8005138:	460a      	mov	r2, r1
 800513a:	4924      	ldr	r1, [pc, #144]	; (80051cc <vTaskStartScheduler+0xc0>)
 800513c:	4824      	ldr	r0, [pc, #144]	; (80051d0 <vTaskStartScheduler+0xc4>)
 800513e:	f7ff fcf3 	bl	8004b28 <xTaskCreateStatic>
 8005142:	4603      	mov	r3, r0
 8005144:	4a23      	ldr	r2, [pc, #140]	; (80051d4 <vTaskStartScheduler+0xc8>)
 8005146:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005148:	4b22      	ldr	r3, [pc, #136]	; (80051d4 <vTaskStartScheduler+0xc8>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d002      	beq.n	8005156 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005150:	2301      	movs	r3, #1
 8005152:	617b      	str	r3, [r7, #20]
 8005154:	e001      	b.n	800515a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005156:	2300      	movs	r3, #0
 8005158:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	2b01      	cmp	r3, #1
 800515e:	d102      	bne.n	8005166 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005160:	f000 fe0e 	bl	8005d80 <xTimerCreateTimerTask>
 8005164:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	2b01      	cmp	r3, #1
 800516a:	d11b      	bne.n	80051a4 <vTaskStartScheduler+0x98>
	__asm volatile
 800516c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005170:	f383 8811 	msr	BASEPRI, r3
 8005174:	f3bf 8f6f 	isb	sy
 8005178:	f3bf 8f4f 	dsb	sy
 800517c:	613b      	str	r3, [r7, #16]
}
 800517e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005180:	4b15      	ldr	r3, [pc, #84]	; (80051d8 <vTaskStartScheduler+0xcc>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	3354      	adds	r3, #84	; 0x54
 8005186:	4a15      	ldr	r2, [pc, #84]	; (80051dc <vTaskStartScheduler+0xd0>)
 8005188:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800518a:	4b15      	ldr	r3, [pc, #84]	; (80051e0 <vTaskStartScheduler+0xd4>)
 800518c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005190:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005192:	4b14      	ldr	r3, [pc, #80]	; (80051e4 <vTaskStartScheduler+0xd8>)
 8005194:	2201      	movs	r2, #1
 8005196:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005198:	4b13      	ldr	r3, [pc, #76]	; (80051e8 <vTaskStartScheduler+0xdc>)
 800519a:	2200      	movs	r2, #0
 800519c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800519e:	f001 f9c7 	bl	8006530 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80051a2:	e00e      	b.n	80051c2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051aa:	d10a      	bne.n	80051c2 <vTaskStartScheduler+0xb6>
	__asm volatile
 80051ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b0:	f383 8811 	msr	BASEPRI, r3
 80051b4:	f3bf 8f6f 	isb	sy
 80051b8:	f3bf 8f4f 	dsb	sy
 80051bc:	60fb      	str	r3, [r7, #12]
}
 80051be:	bf00      	nop
 80051c0:	e7fe      	b.n	80051c0 <vTaskStartScheduler+0xb4>
}
 80051c2:	bf00      	nop
 80051c4:	3718      	adds	r7, #24
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}
 80051ca:	bf00      	nop
 80051cc:	08006f08 	.word	0x08006f08
 80051d0:	08005811 	.word	0x08005811
 80051d4:	20000e38 	.word	0x20000e38
 80051d8:	20000940 	.word	0x20000940
 80051dc:	20000028 	.word	0x20000028
 80051e0:	20000e34 	.word	0x20000e34
 80051e4:	20000e20 	.word	0x20000e20
 80051e8:	20000e18 	.word	0x20000e18

080051ec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80051ec:	b480      	push	{r7}
 80051ee:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80051f0:	4b04      	ldr	r3, [pc, #16]	; (8005204 <vTaskSuspendAll+0x18>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	3301      	adds	r3, #1
 80051f6:	4a03      	ldr	r2, [pc, #12]	; (8005204 <vTaskSuspendAll+0x18>)
 80051f8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80051fa:	bf00      	nop
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr
 8005204:	20000e3c 	.word	0x20000e3c

08005208 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b084      	sub	sp, #16
 800520c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800520e:	2300      	movs	r3, #0
 8005210:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005212:	2300      	movs	r3, #0
 8005214:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005216:	4b42      	ldr	r3, [pc, #264]	; (8005320 <xTaskResumeAll+0x118>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d10a      	bne.n	8005234 <xTaskResumeAll+0x2c>
	__asm volatile
 800521e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005222:	f383 8811 	msr	BASEPRI, r3
 8005226:	f3bf 8f6f 	isb	sy
 800522a:	f3bf 8f4f 	dsb	sy
 800522e:	603b      	str	r3, [r7, #0]
}
 8005230:	bf00      	nop
 8005232:	e7fe      	b.n	8005232 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005234:	f001 fa1e 	bl	8006674 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005238:	4b39      	ldr	r3, [pc, #228]	; (8005320 <xTaskResumeAll+0x118>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	3b01      	subs	r3, #1
 800523e:	4a38      	ldr	r2, [pc, #224]	; (8005320 <xTaskResumeAll+0x118>)
 8005240:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005242:	4b37      	ldr	r3, [pc, #220]	; (8005320 <xTaskResumeAll+0x118>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d162      	bne.n	8005310 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800524a:	4b36      	ldr	r3, [pc, #216]	; (8005324 <xTaskResumeAll+0x11c>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d05e      	beq.n	8005310 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005252:	e02f      	b.n	80052b4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005254:	4b34      	ldr	r3, [pc, #208]	; (8005328 <xTaskResumeAll+0x120>)
 8005256:	68db      	ldr	r3, [r3, #12]
 8005258:	68db      	ldr	r3, [r3, #12]
 800525a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	3318      	adds	r3, #24
 8005260:	4618      	mov	r0, r3
 8005262:	f7fe fbdd 	bl	8003a20 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	3304      	adds	r3, #4
 800526a:	4618      	mov	r0, r3
 800526c:	f7fe fbd8 	bl	8003a20 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005274:	4b2d      	ldr	r3, [pc, #180]	; (800532c <xTaskResumeAll+0x124>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	429a      	cmp	r2, r3
 800527a:	d903      	bls.n	8005284 <xTaskResumeAll+0x7c>
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005280:	4a2a      	ldr	r2, [pc, #168]	; (800532c <xTaskResumeAll+0x124>)
 8005282:	6013      	str	r3, [r2, #0]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005288:	4613      	mov	r3, r2
 800528a:	009b      	lsls	r3, r3, #2
 800528c:	4413      	add	r3, r2
 800528e:	009b      	lsls	r3, r3, #2
 8005290:	4a27      	ldr	r2, [pc, #156]	; (8005330 <xTaskResumeAll+0x128>)
 8005292:	441a      	add	r2, r3
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	3304      	adds	r3, #4
 8005298:	4619      	mov	r1, r3
 800529a:	4610      	mov	r0, r2
 800529c:	f7fe fb63 	bl	8003966 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052a4:	4b23      	ldr	r3, [pc, #140]	; (8005334 <xTaskResumeAll+0x12c>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d302      	bcc.n	80052b4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80052ae:	4b22      	ldr	r3, [pc, #136]	; (8005338 <xTaskResumeAll+0x130>)
 80052b0:	2201      	movs	r2, #1
 80052b2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80052b4:	4b1c      	ldr	r3, [pc, #112]	; (8005328 <xTaskResumeAll+0x120>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d1cb      	bne.n	8005254 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d001      	beq.n	80052c6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80052c2:	f000 fb5f 	bl	8005984 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80052c6:	4b1d      	ldr	r3, [pc, #116]	; (800533c <xTaskResumeAll+0x134>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d010      	beq.n	80052f4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80052d2:	f000 f847 	bl	8005364 <xTaskIncrementTick>
 80052d6:	4603      	mov	r3, r0
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d002      	beq.n	80052e2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80052dc:	4b16      	ldr	r3, [pc, #88]	; (8005338 <xTaskResumeAll+0x130>)
 80052de:	2201      	movs	r2, #1
 80052e0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	3b01      	subs	r3, #1
 80052e6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d1f1      	bne.n	80052d2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80052ee:	4b13      	ldr	r3, [pc, #76]	; (800533c <xTaskResumeAll+0x134>)
 80052f0:	2200      	movs	r2, #0
 80052f2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80052f4:	4b10      	ldr	r3, [pc, #64]	; (8005338 <xTaskResumeAll+0x130>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d009      	beq.n	8005310 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80052fc:	2301      	movs	r3, #1
 80052fe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005300:	4b0f      	ldr	r3, [pc, #60]	; (8005340 <xTaskResumeAll+0x138>)
 8005302:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005306:	601a      	str	r2, [r3, #0]
 8005308:	f3bf 8f4f 	dsb	sy
 800530c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005310:	f001 f9e0 	bl	80066d4 <vPortExitCritical>

	return xAlreadyYielded;
 8005314:	68bb      	ldr	r3, [r7, #8]
}
 8005316:	4618      	mov	r0, r3
 8005318:	3710      	adds	r7, #16
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}
 800531e:	bf00      	nop
 8005320:	20000e3c 	.word	0x20000e3c
 8005324:	20000e14 	.word	0x20000e14
 8005328:	20000dd4 	.word	0x20000dd4
 800532c:	20000e1c 	.word	0x20000e1c
 8005330:	20000944 	.word	0x20000944
 8005334:	20000940 	.word	0x20000940
 8005338:	20000e28 	.word	0x20000e28
 800533c:	20000e24 	.word	0x20000e24
 8005340:	e000ed04 	.word	0xe000ed04

08005344 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005344:	b480      	push	{r7}
 8005346:	b083      	sub	sp, #12
 8005348:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800534a:	4b05      	ldr	r3, [pc, #20]	; (8005360 <xTaskGetTickCount+0x1c>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005350:	687b      	ldr	r3, [r7, #4]
}
 8005352:	4618      	mov	r0, r3
 8005354:	370c      	adds	r7, #12
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr
 800535e:	bf00      	nop
 8005360:	20000e18 	.word	0x20000e18

08005364 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b086      	sub	sp, #24
 8005368:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800536a:	2300      	movs	r3, #0
 800536c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800536e:	4b4f      	ldr	r3, [pc, #316]	; (80054ac <xTaskIncrementTick+0x148>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	2b00      	cmp	r3, #0
 8005374:	f040 808f 	bne.w	8005496 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005378:	4b4d      	ldr	r3, [pc, #308]	; (80054b0 <xTaskIncrementTick+0x14c>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	3301      	adds	r3, #1
 800537e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005380:	4a4b      	ldr	r2, [pc, #300]	; (80054b0 <xTaskIncrementTick+0x14c>)
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d120      	bne.n	80053ce <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800538c:	4b49      	ldr	r3, [pc, #292]	; (80054b4 <xTaskIncrementTick+0x150>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d00a      	beq.n	80053ac <xTaskIncrementTick+0x48>
	__asm volatile
 8005396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800539a:	f383 8811 	msr	BASEPRI, r3
 800539e:	f3bf 8f6f 	isb	sy
 80053a2:	f3bf 8f4f 	dsb	sy
 80053a6:	603b      	str	r3, [r7, #0]
}
 80053a8:	bf00      	nop
 80053aa:	e7fe      	b.n	80053aa <xTaskIncrementTick+0x46>
 80053ac:	4b41      	ldr	r3, [pc, #260]	; (80054b4 <xTaskIncrementTick+0x150>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	60fb      	str	r3, [r7, #12]
 80053b2:	4b41      	ldr	r3, [pc, #260]	; (80054b8 <xTaskIncrementTick+0x154>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a3f      	ldr	r2, [pc, #252]	; (80054b4 <xTaskIncrementTick+0x150>)
 80053b8:	6013      	str	r3, [r2, #0]
 80053ba:	4a3f      	ldr	r2, [pc, #252]	; (80054b8 <xTaskIncrementTick+0x154>)
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	6013      	str	r3, [r2, #0]
 80053c0:	4b3e      	ldr	r3, [pc, #248]	; (80054bc <xTaskIncrementTick+0x158>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	3301      	adds	r3, #1
 80053c6:	4a3d      	ldr	r2, [pc, #244]	; (80054bc <xTaskIncrementTick+0x158>)
 80053c8:	6013      	str	r3, [r2, #0]
 80053ca:	f000 fadb 	bl	8005984 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80053ce:	4b3c      	ldr	r3, [pc, #240]	; (80054c0 <xTaskIncrementTick+0x15c>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	693a      	ldr	r2, [r7, #16]
 80053d4:	429a      	cmp	r2, r3
 80053d6:	d349      	bcc.n	800546c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80053d8:	4b36      	ldr	r3, [pc, #216]	; (80054b4 <xTaskIncrementTick+0x150>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d104      	bne.n	80053ec <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053e2:	4b37      	ldr	r3, [pc, #220]	; (80054c0 <xTaskIncrementTick+0x15c>)
 80053e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80053e8:	601a      	str	r2, [r3, #0]
					break;
 80053ea:	e03f      	b.n	800546c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053ec:	4b31      	ldr	r3, [pc, #196]	; (80054b4 <xTaskIncrementTick+0x150>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	68db      	ldr	r3, [r3, #12]
 80053f2:	68db      	ldr	r3, [r3, #12]
 80053f4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80053fc:	693a      	ldr	r2, [r7, #16]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	429a      	cmp	r2, r3
 8005402:	d203      	bcs.n	800540c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005404:	4a2e      	ldr	r2, [pc, #184]	; (80054c0 <xTaskIncrementTick+0x15c>)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800540a:	e02f      	b.n	800546c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	3304      	adds	r3, #4
 8005410:	4618      	mov	r0, r3
 8005412:	f7fe fb05 	bl	8003a20 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800541a:	2b00      	cmp	r3, #0
 800541c:	d004      	beq.n	8005428 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	3318      	adds	r3, #24
 8005422:	4618      	mov	r0, r3
 8005424:	f7fe fafc 	bl	8003a20 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800542c:	4b25      	ldr	r3, [pc, #148]	; (80054c4 <xTaskIncrementTick+0x160>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	429a      	cmp	r2, r3
 8005432:	d903      	bls.n	800543c <xTaskIncrementTick+0xd8>
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005438:	4a22      	ldr	r2, [pc, #136]	; (80054c4 <xTaskIncrementTick+0x160>)
 800543a:	6013      	str	r3, [r2, #0]
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005440:	4613      	mov	r3, r2
 8005442:	009b      	lsls	r3, r3, #2
 8005444:	4413      	add	r3, r2
 8005446:	009b      	lsls	r3, r3, #2
 8005448:	4a1f      	ldr	r2, [pc, #124]	; (80054c8 <xTaskIncrementTick+0x164>)
 800544a:	441a      	add	r2, r3
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	3304      	adds	r3, #4
 8005450:	4619      	mov	r1, r3
 8005452:	4610      	mov	r0, r2
 8005454:	f7fe fa87 	bl	8003966 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800545c:	4b1b      	ldr	r3, [pc, #108]	; (80054cc <xTaskIncrementTick+0x168>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005462:	429a      	cmp	r2, r3
 8005464:	d3b8      	bcc.n	80053d8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005466:	2301      	movs	r3, #1
 8005468:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800546a:	e7b5      	b.n	80053d8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800546c:	4b17      	ldr	r3, [pc, #92]	; (80054cc <xTaskIncrementTick+0x168>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005472:	4915      	ldr	r1, [pc, #84]	; (80054c8 <xTaskIncrementTick+0x164>)
 8005474:	4613      	mov	r3, r2
 8005476:	009b      	lsls	r3, r3, #2
 8005478:	4413      	add	r3, r2
 800547a:	009b      	lsls	r3, r3, #2
 800547c:	440b      	add	r3, r1
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	2b01      	cmp	r3, #1
 8005482:	d901      	bls.n	8005488 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005484:	2301      	movs	r3, #1
 8005486:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005488:	4b11      	ldr	r3, [pc, #68]	; (80054d0 <xTaskIncrementTick+0x16c>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d007      	beq.n	80054a0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005490:	2301      	movs	r3, #1
 8005492:	617b      	str	r3, [r7, #20]
 8005494:	e004      	b.n	80054a0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005496:	4b0f      	ldr	r3, [pc, #60]	; (80054d4 <xTaskIncrementTick+0x170>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	3301      	adds	r3, #1
 800549c:	4a0d      	ldr	r2, [pc, #52]	; (80054d4 <xTaskIncrementTick+0x170>)
 800549e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80054a0:	697b      	ldr	r3, [r7, #20]
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3718      	adds	r7, #24
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}
 80054aa:	bf00      	nop
 80054ac:	20000e3c 	.word	0x20000e3c
 80054b0:	20000e18 	.word	0x20000e18
 80054b4:	20000dcc 	.word	0x20000dcc
 80054b8:	20000dd0 	.word	0x20000dd0
 80054bc:	20000e2c 	.word	0x20000e2c
 80054c0:	20000e34 	.word	0x20000e34
 80054c4:	20000e1c 	.word	0x20000e1c
 80054c8:	20000944 	.word	0x20000944
 80054cc:	20000940 	.word	0x20000940
 80054d0:	20000e28 	.word	0x20000e28
 80054d4:	20000e24 	.word	0x20000e24

080054d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80054d8:	b480      	push	{r7}
 80054da:	b085      	sub	sp, #20
 80054dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80054de:	4b2a      	ldr	r3, [pc, #168]	; (8005588 <vTaskSwitchContext+0xb0>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d003      	beq.n	80054ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80054e6:	4b29      	ldr	r3, [pc, #164]	; (800558c <vTaskSwitchContext+0xb4>)
 80054e8:	2201      	movs	r2, #1
 80054ea:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80054ec:	e046      	b.n	800557c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80054ee:	4b27      	ldr	r3, [pc, #156]	; (800558c <vTaskSwitchContext+0xb4>)
 80054f0:	2200      	movs	r2, #0
 80054f2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054f4:	4b26      	ldr	r3, [pc, #152]	; (8005590 <vTaskSwitchContext+0xb8>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	60fb      	str	r3, [r7, #12]
 80054fa:	e010      	b.n	800551e <vTaskSwitchContext+0x46>
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d10a      	bne.n	8005518 <vTaskSwitchContext+0x40>
	__asm volatile
 8005502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005506:	f383 8811 	msr	BASEPRI, r3
 800550a:	f3bf 8f6f 	isb	sy
 800550e:	f3bf 8f4f 	dsb	sy
 8005512:	607b      	str	r3, [r7, #4]
}
 8005514:	bf00      	nop
 8005516:	e7fe      	b.n	8005516 <vTaskSwitchContext+0x3e>
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	3b01      	subs	r3, #1
 800551c:	60fb      	str	r3, [r7, #12]
 800551e:	491d      	ldr	r1, [pc, #116]	; (8005594 <vTaskSwitchContext+0xbc>)
 8005520:	68fa      	ldr	r2, [r7, #12]
 8005522:	4613      	mov	r3, r2
 8005524:	009b      	lsls	r3, r3, #2
 8005526:	4413      	add	r3, r2
 8005528:	009b      	lsls	r3, r3, #2
 800552a:	440b      	add	r3, r1
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d0e4      	beq.n	80054fc <vTaskSwitchContext+0x24>
 8005532:	68fa      	ldr	r2, [r7, #12]
 8005534:	4613      	mov	r3, r2
 8005536:	009b      	lsls	r3, r3, #2
 8005538:	4413      	add	r3, r2
 800553a:	009b      	lsls	r3, r3, #2
 800553c:	4a15      	ldr	r2, [pc, #84]	; (8005594 <vTaskSwitchContext+0xbc>)
 800553e:	4413      	add	r3, r2
 8005540:	60bb      	str	r3, [r7, #8]
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	685a      	ldr	r2, [r3, #4]
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	605a      	str	r2, [r3, #4]
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	685a      	ldr	r2, [r3, #4]
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	3308      	adds	r3, #8
 8005554:	429a      	cmp	r2, r3
 8005556:	d104      	bne.n	8005562 <vTaskSwitchContext+0x8a>
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	685a      	ldr	r2, [r3, #4]
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	605a      	str	r2, [r3, #4]
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	68db      	ldr	r3, [r3, #12]
 8005568:	4a0b      	ldr	r2, [pc, #44]	; (8005598 <vTaskSwitchContext+0xc0>)
 800556a:	6013      	str	r3, [r2, #0]
 800556c:	4a08      	ldr	r2, [pc, #32]	; (8005590 <vTaskSwitchContext+0xb8>)
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005572:	4b09      	ldr	r3, [pc, #36]	; (8005598 <vTaskSwitchContext+0xc0>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	3354      	adds	r3, #84	; 0x54
 8005578:	4a08      	ldr	r2, [pc, #32]	; (800559c <vTaskSwitchContext+0xc4>)
 800557a:	6013      	str	r3, [r2, #0]
}
 800557c:	bf00      	nop
 800557e:	3714      	adds	r7, #20
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr
 8005588:	20000e3c 	.word	0x20000e3c
 800558c:	20000e28 	.word	0x20000e28
 8005590:	20000e1c 	.word	0x20000e1c
 8005594:	20000944 	.word	0x20000944
 8005598:	20000940 	.word	0x20000940
 800559c:	20000028 	.word	0x20000028

080055a0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b084      	sub	sp, #16
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
 80055a8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d10a      	bne.n	80055c6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80055b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055b4:	f383 8811 	msr	BASEPRI, r3
 80055b8:	f3bf 8f6f 	isb	sy
 80055bc:	f3bf 8f4f 	dsb	sy
 80055c0:	60fb      	str	r3, [r7, #12]
}
 80055c2:	bf00      	nop
 80055c4:	e7fe      	b.n	80055c4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80055c6:	4b07      	ldr	r3, [pc, #28]	; (80055e4 <vTaskPlaceOnEventList+0x44>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	3318      	adds	r3, #24
 80055cc:	4619      	mov	r1, r3
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f7fe f9ed 	bl	80039ae <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80055d4:	2101      	movs	r1, #1
 80055d6:	6838      	ldr	r0, [r7, #0]
 80055d8:	f000 fb7e 	bl	8005cd8 <prvAddCurrentTaskToDelayedList>
}
 80055dc:	bf00      	nop
 80055de:	3710      	adds	r7, #16
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}
 80055e4:	20000940 	.word	0x20000940

080055e8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b086      	sub	sp, #24
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	60f8      	str	r0, [r7, #12]
 80055f0:	60b9      	str	r1, [r7, #8]
 80055f2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d10a      	bne.n	8005610 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80055fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055fe:	f383 8811 	msr	BASEPRI, r3
 8005602:	f3bf 8f6f 	isb	sy
 8005606:	f3bf 8f4f 	dsb	sy
 800560a:	617b      	str	r3, [r7, #20]
}
 800560c:	bf00      	nop
 800560e:	e7fe      	b.n	800560e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005610:	4b0a      	ldr	r3, [pc, #40]	; (800563c <vTaskPlaceOnEventListRestricted+0x54>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	3318      	adds	r3, #24
 8005616:	4619      	mov	r1, r3
 8005618:	68f8      	ldr	r0, [r7, #12]
 800561a:	f7fe f9a4 	bl	8003966 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d002      	beq.n	800562a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005624:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005628:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800562a:	6879      	ldr	r1, [r7, #4]
 800562c:	68b8      	ldr	r0, [r7, #8]
 800562e:	f000 fb53 	bl	8005cd8 <prvAddCurrentTaskToDelayedList>
	}
 8005632:	bf00      	nop
 8005634:	3718      	adds	r7, #24
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
 800563a:	bf00      	nop
 800563c:	20000940 	.word	0x20000940

08005640 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b086      	sub	sp, #24
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	68db      	ldr	r3, [r3, #12]
 800564c:	68db      	ldr	r3, [r3, #12]
 800564e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d10a      	bne.n	800566c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800565a:	f383 8811 	msr	BASEPRI, r3
 800565e:	f3bf 8f6f 	isb	sy
 8005662:	f3bf 8f4f 	dsb	sy
 8005666:	60fb      	str	r3, [r7, #12]
}
 8005668:	bf00      	nop
 800566a:	e7fe      	b.n	800566a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	3318      	adds	r3, #24
 8005670:	4618      	mov	r0, r3
 8005672:	f7fe f9d5 	bl	8003a20 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005676:	4b1e      	ldr	r3, [pc, #120]	; (80056f0 <xTaskRemoveFromEventList+0xb0>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d11d      	bne.n	80056ba <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	3304      	adds	r3, #4
 8005682:	4618      	mov	r0, r3
 8005684:	f7fe f9cc 	bl	8003a20 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800568c:	4b19      	ldr	r3, [pc, #100]	; (80056f4 <xTaskRemoveFromEventList+0xb4>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	429a      	cmp	r2, r3
 8005692:	d903      	bls.n	800569c <xTaskRemoveFromEventList+0x5c>
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005698:	4a16      	ldr	r2, [pc, #88]	; (80056f4 <xTaskRemoveFromEventList+0xb4>)
 800569a:	6013      	str	r3, [r2, #0]
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056a0:	4613      	mov	r3, r2
 80056a2:	009b      	lsls	r3, r3, #2
 80056a4:	4413      	add	r3, r2
 80056a6:	009b      	lsls	r3, r3, #2
 80056a8:	4a13      	ldr	r2, [pc, #76]	; (80056f8 <xTaskRemoveFromEventList+0xb8>)
 80056aa:	441a      	add	r2, r3
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	3304      	adds	r3, #4
 80056b0:	4619      	mov	r1, r3
 80056b2:	4610      	mov	r0, r2
 80056b4:	f7fe f957 	bl	8003966 <vListInsertEnd>
 80056b8:	e005      	b.n	80056c6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	3318      	adds	r3, #24
 80056be:	4619      	mov	r1, r3
 80056c0:	480e      	ldr	r0, [pc, #56]	; (80056fc <xTaskRemoveFromEventList+0xbc>)
 80056c2:	f7fe f950 	bl	8003966 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056ca:	4b0d      	ldr	r3, [pc, #52]	; (8005700 <xTaskRemoveFromEventList+0xc0>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d905      	bls.n	80056e0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80056d4:	2301      	movs	r3, #1
 80056d6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80056d8:	4b0a      	ldr	r3, [pc, #40]	; (8005704 <xTaskRemoveFromEventList+0xc4>)
 80056da:	2201      	movs	r2, #1
 80056dc:	601a      	str	r2, [r3, #0]
 80056de:	e001      	b.n	80056e4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80056e0:	2300      	movs	r3, #0
 80056e2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80056e4:	697b      	ldr	r3, [r7, #20]
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3718      	adds	r7, #24
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}
 80056ee:	bf00      	nop
 80056f0:	20000e3c 	.word	0x20000e3c
 80056f4:	20000e1c 	.word	0x20000e1c
 80056f8:	20000944 	.word	0x20000944
 80056fc:	20000dd4 	.word	0x20000dd4
 8005700:	20000940 	.word	0x20000940
 8005704:	20000e28 	.word	0x20000e28

08005708 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005708:	b480      	push	{r7}
 800570a:	b083      	sub	sp, #12
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005710:	4b06      	ldr	r3, [pc, #24]	; (800572c <vTaskInternalSetTimeOutState+0x24>)
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005718:	4b05      	ldr	r3, [pc, #20]	; (8005730 <vTaskInternalSetTimeOutState+0x28>)
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	605a      	str	r2, [r3, #4]
}
 8005720:	bf00      	nop
 8005722:	370c      	adds	r7, #12
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr
 800572c:	20000e2c 	.word	0x20000e2c
 8005730:	20000e18 	.word	0x20000e18

08005734 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b088      	sub	sp, #32
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d10a      	bne.n	800575a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005748:	f383 8811 	msr	BASEPRI, r3
 800574c:	f3bf 8f6f 	isb	sy
 8005750:	f3bf 8f4f 	dsb	sy
 8005754:	613b      	str	r3, [r7, #16]
}
 8005756:	bf00      	nop
 8005758:	e7fe      	b.n	8005758 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d10a      	bne.n	8005776 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005764:	f383 8811 	msr	BASEPRI, r3
 8005768:	f3bf 8f6f 	isb	sy
 800576c:	f3bf 8f4f 	dsb	sy
 8005770:	60fb      	str	r3, [r7, #12]
}
 8005772:	bf00      	nop
 8005774:	e7fe      	b.n	8005774 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005776:	f000 ff7d 	bl	8006674 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800577a:	4b1d      	ldr	r3, [pc, #116]	; (80057f0 <xTaskCheckForTimeOut+0xbc>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	69ba      	ldr	r2, [r7, #24]
 8005786:	1ad3      	subs	r3, r2, r3
 8005788:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005792:	d102      	bne.n	800579a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005794:	2300      	movs	r3, #0
 8005796:	61fb      	str	r3, [r7, #28]
 8005798:	e023      	b.n	80057e2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681a      	ldr	r2, [r3, #0]
 800579e:	4b15      	ldr	r3, [pc, #84]	; (80057f4 <xTaskCheckForTimeOut+0xc0>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	429a      	cmp	r2, r3
 80057a4:	d007      	beq.n	80057b6 <xTaskCheckForTimeOut+0x82>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	69ba      	ldr	r2, [r7, #24]
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d302      	bcc.n	80057b6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80057b0:	2301      	movs	r3, #1
 80057b2:	61fb      	str	r3, [r7, #28]
 80057b4:	e015      	b.n	80057e2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	697a      	ldr	r2, [r7, #20]
 80057bc:	429a      	cmp	r2, r3
 80057be:	d20b      	bcs.n	80057d8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	681a      	ldr	r2, [r3, #0]
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	1ad2      	subs	r2, r2, r3
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f7ff ff9b 	bl	8005708 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80057d2:	2300      	movs	r3, #0
 80057d4:	61fb      	str	r3, [r7, #28]
 80057d6:	e004      	b.n	80057e2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	2200      	movs	r2, #0
 80057dc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80057de:	2301      	movs	r3, #1
 80057e0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80057e2:	f000 ff77 	bl	80066d4 <vPortExitCritical>

	return xReturn;
 80057e6:	69fb      	ldr	r3, [r7, #28]
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3720      	adds	r7, #32
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}
 80057f0:	20000e18 	.word	0x20000e18
 80057f4:	20000e2c 	.word	0x20000e2c

080057f8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80057f8:	b480      	push	{r7}
 80057fa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80057fc:	4b03      	ldr	r3, [pc, #12]	; (800580c <vTaskMissedYield+0x14>)
 80057fe:	2201      	movs	r2, #1
 8005800:	601a      	str	r2, [r3, #0]
}
 8005802:	bf00      	nop
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr
 800580c:	20000e28 	.word	0x20000e28

08005810 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b082      	sub	sp, #8
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005818:	f000 f852 	bl	80058c0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800581c:	4b06      	ldr	r3, [pc, #24]	; (8005838 <prvIdleTask+0x28>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	2b01      	cmp	r3, #1
 8005822:	d9f9      	bls.n	8005818 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005824:	4b05      	ldr	r3, [pc, #20]	; (800583c <prvIdleTask+0x2c>)
 8005826:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800582a:	601a      	str	r2, [r3, #0]
 800582c:	f3bf 8f4f 	dsb	sy
 8005830:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005834:	e7f0      	b.n	8005818 <prvIdleTask+0x8>
 8005836:	bf00      	nop
 8005838:	20000944 	.word	0x20000944
 800583c:	e000ed04 	.word	0xe000ed04

08005840 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b082      	sub	sp, #8
 8005844:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005846:	2300      	movs	r3, #0
 8005848:	607b      	str	r3, [r7, #4]
 800584a:	e00c      	b.n	8005866 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800584c:	687a      	ldr	r2, [r7, #4]
 800584e:	4613      	mov	r3, r2
 8005850:	009b      	lsls	r3, r3, #2
 8005852:	4413      	add	r3, r2
 8005854:	009b      	lsls	r3, r3, #2
 8005856:	4a12      	ldr	r2, [pc, #72]	; (80058a0 <prvInitialiseTaskLists+0x60>)
 8005858:	4413      	add	r3, r2
 800585a:	4618      	mov	r0, r3
 800585c:	f7fe f856 	bl	800390c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	3301      	adds	r3, #1
 8005864:	607b      	str	r3, [r7, #4]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2b37      	cmp	r3, #55	; 0x37
 800586a:	d9ef      	bls.n	800584c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800586c:	480d      	ldr	r0, [pc, #52]	; (80058a4 <prvInitialiseTaskLists+0x64>)
 800586e:	f7fe f84d 	bl	800390c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005872:	480d      	ldr	r0, [pc, #52]	; (80058a8 <prvInitialiseTaskLists+0x68>)
 8005874:	f7fe f84a 	bl	800390c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005878:	480c      	ldr	r0, [pc, #48]	; (80058ac <prvInitialiseTaskLists+0x6c>)
 800587a:	f7fe f847 	bl	800390c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800587e:	480c      	ldr	r0, [pc, #48]	; (80058b0 <prvInitialiseTaskLists+0x70>)
 8005880:	f7fe f844 	bl	800390c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005884:	480b      	ldr	r0, [pc, #44]	; (80058b4 <prvInitialiseTaskLists+0x74>)
 8005886:	f7fe f841 	bl	800390c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800588a:	4b0b      	ldr	r3, [pc, #44]	; (80058b8 <prvInitialiseTaskLists+0x78>)
 800588c:	4a05      	ldr	r2, [pc, #20]	; (80058a4 <prvInitialiseTaskLists+0x64>)
 800588e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005890:	4b0a      	ldr	r3, [pc, #40]	; (80058bc <prvInitialiseTaskLists+0x7c>)
 8005892:	4a05      	ldr	r2, [pc, #20]	; (80058a8 <prvInitialiseTaskLists+0x68>)
 8005894:	601a      	str	r2, [r3, #0]
}
 8005896:	bf00      	nop
 8005898:	3708      	adds	r7, #8
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}
 800589e:	bf00      	nop
 80058a0:	20000944 	.word	0x20000944
 80058a4:	20000da4 	.word	0x20000da4
 80058a8:	20000db8 	.word	0x20000db8
 80058ac:	20000dd4 	.word	0x20000dd4
 80058b0:	20000de8 	.word	0x20000de8
 80058b4:	20000e00 	.word	0x20000e00
 80058b8:	20000dcc 	.word	0x20000dcc
 80058bc:	20000dd0 	.word	0x20000dd0

080058c0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b082      	sub	sp, #8
 80058c4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80058c6:	e019      	b.n	80058fc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80058c8:	f000 fed4 	bl	8006674 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058cc:	4b10      	ldr	r3, [pc, #64]	; (8005910 <prvCheckTasksWaitingTermination+0x50>)
 80058ce:	68db      	ldr	r3, [r3, #12]
 80058d0:	68db      	ldr	r3, [r3, #12]
 80058d2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	3304      	adds	r3, #4
 80058d8:	4618      	mov	r0, r3
 80058da:	f7fe f8a1 	bl	8003a20 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80058de:	4b0d      	ldr	r3, [pc, #52]	; (8005914 <prvCheckTasksWaitingTermination+0x54>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	3b01      	subs	r3, #1
 80058e4:	4a0b      	ldr	r2, [pc, #44]	; (8005914 <prvCheckTasksWaitingTermination+0x54>)
 80058e6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80058e8:	4b0b      	ldr	r3, [pc, #44]	; (8005918 <prvCheckTasksWaitingTermination+0x58>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	3b01      	subs	r3, #1
 80058ee:	4a0a      	ldr	r2, [pc, #40]	; (8005918 <prvCheckTasksWaitingTermination+0x58>)
 80058f0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80058f2:	f000 feef 	bl	80066d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f000 f810 	bl	800591c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80058fc:	4b06      	ldr	r3, [pc, #24]	; (8005918 <prvCheckTasksWaitingTermination+0x58>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d1e1      	bne.n	80058c8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005904:	bf00      	nop
 8005906:	bf00      	nop
 8005908:	3708      	adds	r7, #8
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}
 800590e:	bf00      	nop
 8005910:	20000de8 	.word	0x20000de8
 8005914:	20000e14 	.word	0x20000e14
 8005918:	20000dfc 	.word	0x20000dfc

0800591c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800591c:	b580      	push	{r7, lr}
 800591e:	b084      	sub	sp, #16
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	3354      	adds	r3, #84	; 0x54
 8005928:	4618      	mov	r0, r3
 800592a:	f001 f9f9 	bl	8006d20 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005934:	2b00      	cmp	r3, #0
 8005936:	d108      	bne.n	800594a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800593c:	4618      	mov	r0, r3
 800593e:	f001 f887 	bl	8006a50 <vPortFree>
				vPortFree( pxTCB );
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f001 f884 	bl	8006a50 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005948:	e018      	b.n	800597c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005950:	2b01      	cmp	r3, #1
 8005952:	d103      	bne.n	800595c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f001 f87b 	bl	8006a50 <vPortFree>
	}
 800595a:	e00f      	b.n	800597c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005962:	2b02      	cmp	r3, #2
 8005964:	d00a      	beq.n	800597c <prvDeleteTCB+0x60>
	__asm volatile
 8005966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800596a:	f383 8811 	msr	BASEPRI, r3
 800596e:	f3bf 8f6f 	isb	sy
 8005972:	f3bf 8f4f 	dsb	sy
 8005976:	60fb      	str	r3, [r7, #12]
}
 8005978:	bf00      	nop
 800597a:	e7fe      	b.n	800597a <prvDeleteTCB+0x5e>
	}
 800597c:	bf00      	nop
 800597e:	3710      	adds	r7, #16
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}

08005984 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005984:	b480      	push	{r7}
 8005986:	b083      	sub	sp, #12
 8005988:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800598a:	4b0c      	ldr	r3, [pc, #48]	; (80059bc <prvResetNextTaskUnblockTime+0x38>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d104      	bne.n	800599e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005994:	4b0a      	ldr	r3, [pc, #40]	; (80059c0 <prvResetNextTaskUnblockTime+0x3c>)
 8005996:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800599a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800599c:	e008      	b.n	80059b0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800599e:	4b07      	ldr	r3, [pc, #28]	; (80059bc <prvResetNextTaskUnblockTime+0x38>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	68db      	ldr	r3, [r3, #12]
 80059a4:	68db      	ldr	r3, [r3, #12]
 80059a6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	4a04      	ldr	r2, [pc, #16]	; (80059c0 <prvResetNextTaskUnblockTime+0x3c>)
 80059ae:	6013      	str	r3, [r2, #0]
}
 80059b0:	bf00      	nop
 80059b2:	370c      	adds	r7, #12
 80059b4:	46bd      	mov	sp, r7
 80059b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ba:	4770      	bx	lr
 80059bc:	20000dcc 	.word	0x20000dcc
 80059c0:	20000e34 	.word	0x20000e34

080059c4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80059c4:	b480      	push	{r7}
 80059c6:	b083      	sub	sp, #12
 80059c8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80059ca:	4b0b      	ldr	r3, [pc, #44]	; (80059f8 <xTaskGetSchedulerState+0x34>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d102      	bne.n	80059d8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80059d2:	2301      	movs	r3, #1
 80059d4:	607b      	str	r3, [r7, #4]
 80059d6:	e008      	b.n	80059ea <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80059d8:	4b08      	ldr	r3, [pc, #32]	; (80059fc <xTaskGetSchedulerState+0x38>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d102      	bne.n	80059e6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80059e0:	2302      	movs	r3, #2
 80059e2:	607b      	str	r3, [r7, #4]
 80059e4:	e001      	b.n	80059ea <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80059e6:	2300      	movs	r3, #0
 80059e8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80059ea:	687b      	ldr	r3, [r7, #4]
	}
 80059ec:	4618      	mov	r0, r3
 80059ee:	370c      	adds	r7, #12
 80059f0:	46bd      	mov	sp, r7
 80059f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f6:	4770      	bx	lr
 80059f8:	20000e20 	.word	0x20000e20
 80059fc:	20000e3c 	.word	0x20000e3c

08005a00 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b084      	sub	sp, #16
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d051      	beq.n	8005aba <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a1a:	4b2a      	ldr	r3, [pc, #168]	; (8005ac4 <xTaskPriorityInherit+0xc4>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a20:	429a      	cmp	r2, r3
 8005a22:	d241      	bcs.n	8005aa8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	699b      	ldr	r3, [r3, #24]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	db06      	blt.n	8005a3a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a2c:	4b25      	ldr	r3, [pc, #148]	; (8005ac4 <xTaskPriorityInherit+0xc4>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a32:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	6959      	ldr	r1, [r3, #20]
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a42:	4613      	mov	r3, r2
 8005a44:	009b      	lsls	r3, r3, #2
 8005a46:	4413      	add	r3, r2
 8005a48:	009b      	lsls	r3, r3, #2
 8005a4a:	4a1f      	ldr	r2, [pc, #124]	; (8005ac8 <xTaskPriorityInherit+0xc8>)
 8005a4c:	4413      	add	r3, r2
 8005a4e:	4299      	cmp	r1, r3
 8005a50:	d122      	bne.n	8005a98 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	3304      	adds	r3, #4
 8005a56:	4618      	mov	r0, r3
 8005a58:	f7fd ffe2 	bl	8003a20 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005a5c:	4b19      	ldr	r3, [pc, #100]	; (8005ac4 <xTaskPriorityInherit+0xc4>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a6a:	4b18      	ldr	r3, [pc, #96]	; (8005acc <xTaskPriorityInherit+0xcc>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	429a      	cmp	r2, r3
 8005a70:	d903      	bls.n	8005a7a <xTaskPriorityInherit+0x7a>
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a76:	4a15      	ldr	r2, [pc, #84]	; (8005acc <xTaskPriorityInherit+0xcc>)
 8005a78:	6013      	str	r3, [r2, #0]
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a7e:	4613      	mov	r3, r2
 8005a80:	009b      	lsls	r3, r3, #2
 8005a82:	4413      	add	r3, r2
 8005a84:	009b      	lsls	r3, r3, #2
 8005a86:	4a10      	ldr	r2, [pc, #64]	; (8005ac8 <xTaskPriorityInherit+0xc8>)
 8005a88:	441a      	add	r2, r3
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	3304      	adds	r3, #4
 8005a8e:	4619      	mov	r1, r3
 8005a90:	4610      	mov	r0, r2
 8005a92:	f7fd ff68 	bl	8003966 <vListInsertEnd>
 8005a96:	e004      	b.n	8005aa2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005a98:	4b0a      	ldr	r3, [pc, #40]	; (8005ac4 <xTaskPriorityInherit+0xc4>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	60fb      	str	r3, [r7, #12]
 8005aa6:	e008      	b.n	8005aba <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005aac:	4b05      	ldr	r3, [pc, #20]	; (8005ac4 <xTaskPriorityInherit+0xc4>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab2:	429a      	cmp	r2, r3
 8005ab4:	d201      	bcs.n	8005aba <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005aba:	68fb      	ldr	r3, [r7, #12]
	}
 8005abc:	4618      	mov	r0, r3
 8005abe:	3710      	adds	r7, #16
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}
 8005ac4:	20000940 	.word	0x20000940
 8005ac8:	20000944 	.word	0x20000944
 8005acc:	20000e1c 	.word	0x20000e1c

08005ad0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b086      	sub	sp, #24
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005adc:	2300      	movs	r3, #0
 8005ade:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d056      	beq.n	8005b94 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005ae6:	4b2e      	ldr	r3, [pc, #184]	; (8005ba0 <xTaskPriorityDisinherit+0xd0>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	693a      	ldr	r2, [r7, #16]
 8005aec:	429a      	cmp	r2, r3
 8005aee:	d00a      	beq.n	8005b06 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005af4:	f383 8811 	msr	BASEPRI, r3
 8005af8:	f3bf 8f6f 	isb	sy
 8005afc:	f3bf 8f4f 	dsb	sy
 8005b00:	60fb      	str	r3, [r7, #12]
}
 8005b02:	bf00      	nop
 8005b04:	e7fe      	b.n	8005b04 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d10a      	bne.n	8005b24 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b12:	f383 8811 	msr	BASEPRI, r3
 8005b16:	f3bf 8f6f 	isb	sy
 8005b1a:	f3bf 8f4f 	dsb	sy
 8005b1e:	60bb      	str	r3, [r7, #8]
}
 8005b20:	bf00      	nop
 8005b22:	e7fe      	b.n	8005b22 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b28:	1e5a      	subs	r2, r3, #1
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b36:	429a      	cmp	r2, r3
 8005b38:	d02c      	beq.n	8005b94 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d128      	bne.n	8005b94 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	3304      	adds	r3, #4
 8005b46:	4618      	mov	r0, r3
 8005b48:	f7fd ff6a 	bl	8003a20 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b58:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b64:	4b0f      	ldr	r3, [pc, #60]	; (8005ba4 <xTaskPriorityDisinherit+0xd4>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	d903      	bls.n	8005b74 <xTaskPriorityDisinherit+0xa4>
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b70:	4a0c      	ldr	r2, [pc, #48]	; (8005ba4 <xTaskPriorityDisinherit+0xd4>)
 8005b72:	6013      	str	r3, [r2, #0]
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b78:	4613      	mov	r3, r2
 8005b7a:	009b      	lsls	r3, r3, #2
 8005b7c:	4413      	add	r3, r2
 8005b7e:	009b      	lsls	r3, r3, #2
 8005b80:	4a09      	ldr	r2, [pc, #36]	; (8005ba8 <xTaskPriorityDisinherit+0xd8>)
 8005b82:	441a      	add	r2, r3
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	3304      	adds	r3, #4
 8005b88:	4619      	mov	r1, r3
 8005b8a:	4610      	mov	r0, r2
 8005b8c:	f7fd feeb 	bl	8003966 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005b90:	2301      	movs	r3, #1
 8005b92:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005b94:	697b      	ldr	r3, [r7, #20]
	}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3718      	adds	r7, #24
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}
 8005b9e:	bf00      	nop
 8005ba0:	20000940 	.word	0x20000940
 8005ba4:	20000e1c 	.word	0x20000e1c
 8005ba8:	20000944 	.word	0x20000944

08005bac <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b088      	sub	sp, #32
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
 8005bb4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d06a      	beq.n	8005c9a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005bc4:	69bb      	ldr	r3, [r7, #24]
 8005bc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d10a      	bne.n	8005be2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8005bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd0:	f383 8811 	msr	BASEPRI, r3
 8005bd4:	f3bf 8f6f 	isb	sy
 8005bd8:	f3bf 8f4f 	dsb	sy
 8005bdc:	60fb      	str	r3, [r7, #12]
}
 8005bde:	bf00      	nop
 8005be0:	e7fe      	b.n	8005be0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005be2:	69bb      	ldr	r3, [r7, #24]
 8005be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005be6:	683a      	ldr	r2, [r7, #0]
 8005be8:	429a      	cmp	r2, r3
 8005bea:	d902      	bls.n	8005bf2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	61fb      	str	r3, [r7, #28]
 8005bf0:	e002      	b.n	8005bf8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005bf2:	69bb      	ldr	r3, [r7, #24]
 8005bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bf6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005bf8:	69bb      	ldr	r3, [r7, #24]
 8005bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bfc:	69fa      	ldr	r2, [r7, #28]
 8005bfe:	429a      	cmp	r2, r3
 8005c00:	d04b      	beq.n	8005c9a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005c02:	69bb      	ldr	r3, [r7, #24]
 8005c04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c06:	697a      	ldr	r2, [r7, #20]
 8005c08:	429a      	cmp	r2, r3
 8005c0a:	d146      	bne.n	8005c9a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005c0c:	4b25      	ldr	r3, [pc, #148]	; (8005ca4 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	69ba      	ldr	r2, [r7, #24]
 8005c12:	429a      	cmp	r2, r3
 8005c14:	d10a      	bne.n	8005c2c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8005c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c1a:	f383 8811 	msr	BASEPRI, r3
 8005c1e:	f3bf 8f6f 	isb	sy
 8005c22:	f3bf 8f4f 	dsb	sy
 8005c26:	60bb      	str	r3, [r7, #8]
}
 8005c28:	bf00      	nop
 8005c2a:	e7fe      	b.n	8005c2a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005c2c:	69bb      	ldr	r3, [r7, #24]
 8005c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c30:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005c32:	69bb      	ldr	r3, [r7, #24]
 8005c34:	69fa      	ldr	r2, [r7, #28]
 8005c36:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005c38:	69bb      	ldr	r3, [r7, #24]
 8005c3a:	699b      	ldr	r3, [r3, #24]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	db04      	blt.n	8005c4a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c40:	69fb      	ldr	r3, [r7, #28]
 8005c42:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005c46:	69bb      	ldr	r3, [r7, #24]
 8005c48:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005c4a:	69bb      	ldr	r3, [r7, #24]
 8005c4c:	6959      	ldr	r1, [r3, #20]
 8005c4e:	693a      	ldr	r2, [r7, #16]
 8005c50:	4613      	mov	r3, r2
 8005c52:	009b      	lsls	r3, r3, #2
 8005c54:	4413      	add	r3, r2
 8005c56:	009b      	lsls	r3, r3, #2
 8005c58:	4a13      	ldr	r2, [pc, #76]	; (8005ca8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8005c5a:	4413      	add	r3, r2
 8005c5c:	4299      	cmp	r1, r3
 8005c5e:	d11c      	bne.n	8005c9a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005c60:	69bb      	ldr	r3, [r7, #24]
 8005c62:	3304      	adds	r3, #4
 8005c64:	4618      	mov	r0, r3
 8005c66:	f7fd fedb 	bl	8003a20 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005c6a:	69bb      	ldr	r3, [r7, #24]
 8005c6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c6e:	4b0f      	ldr	r3, [pc, #60]	; (8005cac <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	429a      	cmp	r2, r3
 8005c74:	d903      	bls.n	8005c7e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8005c76:	69bb      	ldr	r3, [r7, #24]
 8005c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c7a:	4a0c      	ldr	r2, [pc, #48]	; (8005cac <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005c7c:	6013      	str	r3, [r2, #0]
 8005c7e:	69bb      	ldr	r3, [r7, #24]
 8005c80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c82:	4613      	mov	r3, r2
 8005c84:	009b      	lsls	r3, r3, #2
 8005c86:	4413      	add	r3, r2
 8005c88:	009b      	lsls	r3, r3, #2
 8005c8a:	4a07      	ldr	r2, [pc, #28]	; (8005ca8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8005c8c:	441a      	add	r2, r3
 8005c8e:	69bb      	ldr	r3, [r7, #24]
 8005c90:	3304      	adds	r3, #4
 8005c92:	4619      	mov	r1, r3
 8005c94:	4610      	mov	r0, r2
 8005c96:	f7fd fe66 	bl	8003966 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005c9a:	bf00      	nop
 8005c9c:	3720      	adds	r7, #32
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}
 8005ca2:	bf00      	nop
 8005ca4:	20000940 	.word	0x20000940
 8005ca8:	20000944 	.word	0x20000944
 8005cac:	20000e1c 	.word	0x20000e1c

08005cb0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005cb0:	b480      	push	{r7}
 8005cb2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005cb4:	4b07      	ldr	r3, [pc, #28]	; (8005cd4 <pvTaskIncrementMutexHeldCount+0x24>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d004      	beq.n	8005cc6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005cbc:	4b05      	ldr	r3, [pc, #20]	; (8005cd4 <pvTaskIncrementMutexHeldCount+0x24>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005cc2:	3201      	adds	r2, #1
 8005cc4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8005cc6:	4b03      	ldr	r3, [pc, #12]	; (8005cd4 <pvTaskIncrementMutexHeldCount+0x24>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
	}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr
 8005cd4:	20000940 	.word	0x20000940

08005cd8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b084      	sub	sp, #16
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
 8005ce0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005ce2:	4b21      	ldr	r3, [pc, #132]	; (8005d68 <prvAddCurrentTaskToDelayedList+0x90>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ce8:	4b20      	ldr	r3, [pc, #128]	; (8005d6c <prvAddCurrentTaskToDelayedList+0x94>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	3304      	adds	r3, #4
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f7fd fe96 	bl	8003a20 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005cfa:	d10a      	bne.n	8005d12 <prvAddCurrentTaskToDelayedList+0x3a>
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d007      	beq.n	8005d12 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d02:	4b1a      	ldr	r3, [pc, #104]	; (8005d6c <prvAddCurrentTaskToDelayedList+0x94>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	3304      	adds	r3, #4
 8005d08:	4619      	mov	r1, r3
 8005d0a:	4819      	ldr	r0, [pc, #100]	; (8005d70 <prvAddCurrentTaskToDelayedList+0x98>)
 8005d0c:	f7fd fe2b 	bl	8003966 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005d10:	e026      	b.n	8005d60 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005d12:	68fa      	ldr	r2, [r7, #12]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	4413      	add	r3, r2
 8005d18:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005d1a:	4b14      	ldr	r3, [pc, #80]	; (8005d6c <prvAddCurrentTaskToDelayedList+0x94>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	68ba      	ldr	r2, [r7, #8]
 8005d20:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005d22:	68ba      	ldr	r2, [r7, #8]
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d209      	bcs.n	8005d3e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d2a:	4b12      	ldr	r3, [pc, #72]	; (8005d74 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005d2c:	681a      	ldr	r2, [r3, #0]
 8005d2e:	4b0f      	ldr	r3, [pc, #60]	; (8005d6c <prvAddCurrentTaskToDelayedList+0x94>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	3304      	adds	r3, #4
 8005d34:	4619      	mov	r1, r3
 8005d36:	4610      	mov	r0, r2
 8005d38:	f7fd fe39 	bl	80039ae <vListInsert>
}
 8005d3c:	e010      	b.n	8005d60 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d3e:	4b0e      	ldr	r3, [pc, #56]	; (8005d78 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005d40:	681a      	ldr	r2, [r3, #0]
 8005d42:	4b0a      	ldr	r3, [pc, #40]	; (8005d6c <prvAddCurrentTaskToDelayedList+0x94>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	3304      	adds	r3, #4
 8005d48:	4619      	mov	r1, r3
 8005d4a:	4610      	mov	r0, r2
 8005d4c:	f7fd fe2f 	bl	80039ae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005d50:	4b0a      	ldr	r3, [pc, #40]	; (8005d7c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	68ba      	ldr	r2, [r7, #8]
 8005d56:	429a      	cmp	r2, r3
 8005d58:	d202      	bcs.n	8005d60 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005d5a:	4a08      	ldr	r2, [pc, #32]	; (8005d7c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	6013      	str	r3, [r2, #0]
}
 8005d60:	bf00      	nop
 8005d62:	3710      	adds	r7, #16
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}
 8005d68:	20000e18 	.word	0x20000e18
 8005d6c:	20000940 	.word	0x20000940
 8005d70:	20000e00 	.word	0x20000e00
 8005d74:	20000dd0 	.word	0x20000dd0
 8005d78:	20000dcc 	.word	0x20000dcc
 8005d7c:	20000e34 	.word	0x20000e34

08005d80 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b08a      	sub	sp, #40	; 0x28
 8005d84:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005d86:	2300      	movs	r3, #0
 8005d88:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005d8a:	f000 fb07 	bl	800639c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005d8e:	4b1c      	ldr	r3, [pc, #112]	; (8005e00 <xTimerCreateTimerTask+0x80>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d021      	beq.n	8005dda <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005d96:	2300      	movs	r3, #0
 8005d98:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005d9e:	1d3a      	adds	r2, r7, #4
 8005da0:	f107 0108 	add.w	r1, r7, #8
 8005da4:	f107 030c 	add.w	r3, r7, #12
 8005da8:	4618      	mov	r0, r3
 8005daa:	f7fd fd95 	bl	80038d8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005dae:	6879      	ldr	r1, [r7, #4]
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	68fa      	ldr	r2, [r7, #12]
 8005db4:	9202      	str	r2, [sp, #8]
 8005db6:	9301      	str	r3, [sp, #4]
 8005db8:	2302      	movs	r3, #2
 8005dba:	9300      	str	r3, [sp, #0]
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	460a      	mov	r2, r1
 8005dc0:	4910      	ldr	r1, [pc, #64]	; (8005e04 <xTimerCreateTimerTask+0x84>)
 8005dc2:	4811      	ldr	r0, [pc, #68]	; (8005e08 <xTimerCreateTimerTask+0x88>)
 8005dc4:	f7fe feb0 	bl	8004b28 <xTaskCreateStatic>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	4a10      	ldr	r2, [pc, #64]	; (8005e0c <xTimerCreateTimerTask+0x8c>)
 8005dcc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005dce:	4b0f      	ldr	r3, [pc, #60]	; (8005e0c <xTimerCreateTimerTask+0x8c>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d001      	beq.n	8005dda <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d10a      	bne.n	8005df6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005de4:	f383 8811 	msr	BASEPRI, r3
 8005de8:	f3bf 8f6f 	isb	sy
 8005dec:	f3bf 8f4f 	dsb	sy
 8005df0:	613b      	str	r3, [r7, #16]
}
 8005df2:	bf00      	nop
 8005df4:	e7fe      	b.n	8005df4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005df6:	697b      	ldr	r3, [r7, #20]
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3718      	adds	r7, #24
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}
 8005e00:	20000e70 	.word	0x20000e70
 8005e04:	08006f10 	.word	0x08006f10
 8005e08:	08005f45 	.word	0x08005f45
 8005e0c:	20000e74 	.word	0x20000e74

08005e10 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b08a      	sub	sp, #40	; 0x28
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	60f8      	str	r0, [r7, #12]
 8005e18:	60b9      	str	r1, [r7, #8]
 8005e1a:	607a      	str	r2, [r7, #4]
 8005e1c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d10a      	bne.n	8005e3e <xTimerGenericCommand+0x2e>
	__asm volatile
 8005e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e2c:	f383 8811 	msr	BASEPRI, r3
 8005e30:	f3bf 8f6f 	isb	sy
 8005e34:	f3bf 8f4f 	dsb	sy
 8005e38:	623b      	str	r3, [r7, #32]
}
 8005e3a:	bf00      	nop
 8005e3c:	e7fe      	b.n	8005e3c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005e3e:	4b1a      	ldr	r3, [pc, #104]	; (8005ea8 <xTimerGenericCommand+0x98>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d02a      	beq.n	8005e9c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	2b05      	cmp	r3, #5
 8005e56:	dc18      	bgt.n	8005e8a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005e58:	f7ff fdb4 	bl	80059c4 <xTaskGetSchedulerState>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	2b02      	cmp	r3, #2
 8005e60:	d109      	bne.n	8005e76 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005e62:	4b11      	ldr	r3, [pc, #68]	; (8005ea8 <xTimerGenericCommand+0x98>)
 8005e64:	6818      	ldr	r0, [r3, #0]
 8005e66:	f107 0110 	add.w	r1, r7, #16
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e6e:	f7fd fff5 	bl	8003e5c <xQueueGenericSend>
 8005e72:	6278      	str	r0, [r7, #36]	; 0x24
 8005e74:	e012      	b.n	8005e9c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005e76:	4b0c      	ldr	r3, [pc, #48]	; (8005ea8 <xTimerGenericCommand+0x98>)
 8005e78:	6818      	ldr	r0, [r3, #0]
 8005e7a:	f107 0110 	add.w	r1, r7, #16
 8005e7e:	2300      	movs	r3, #0
 8005e80:	2200      	movs	r2, #0
 8005e82:	f7fd ffeb 	bl	8003e5c <xQueueGenericSend>
 8005e86:	6278      	str	r0, [r7, #36]	; 0x24
 8005e88:	e008      	b.n	8005e9c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005e8a:	4b07      	ldr	r3, [pc, #28]	; (8005ea8 <xTimerGenericCommand+0x98>)
 8005e8c:	6818      	ldr	r0, [r3, #0]
 8005e8e:	f107 0110 	add.w	r1, r7, #16
 8005e92:	2300      	movs	r3, #0
 8005e94:	683a      	ldr	r2, [r7, #0]
 8005e96:	f7fe f8df 	bl	8004058 <xQueueGenericSendFromISR>
 8005e9a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3728      	adds	r7, #40	; 0x28
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}
 8005ea6:	bf00      	nop
 8005ea8:	20000e70 	.word	0x20000e70

08005eac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b088      	sub	sp, #32
 8005eb0:	af02      	add	r7, sp, #8
 8005eb2:	6078      	str	r0, [r7, #4]
 8005eb4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005eb6:	4b22      	ldr	r3, [pc, #136]	; (8005f40 <prvProcessExpiredTimer+0x94>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	68db      	ldr	r3, [r3, #12]
 8005ebc:	68db      	ldr	r3, [r3, #12]
 8005ebe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	3304      	adds	r3, #4
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f7fd fdab 	bl	8003a20 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ed0:	f003 0304 	and.w	r3, r3, #4
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d022      	beq.n	8005f1e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	699a      	ldr	r2, [r3, #24]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	18d1      	adds	r1, r2, r3
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	683a      	ldr	r2, [r7, #0]
 8005ee4:	6978      	ldr	r0, [r7, #20]
 8005ee6:	f000 f8d1 	bl	800608c <prvInsertTimerInActiveList>
 8005eea:	4603      	mov	r3, r0
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d01f      	beq.n	8005f30 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	9300      	str	r3, [sp, #0]
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	687a      	ldr	r2, [r7, #4]
 8005ef8:	2100      	movs	r1, #0
 8005efa:	6978      	ldr	r0, [r7, #20]
 8005efc:	f7ff ff88 	bl	8005e10 <xTimerGenericCommand>
 8005f00:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d113      	bne.n	8005f30 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f0c:	f383 8811 	msr	BASEPRI, r3
 8005f10:	f3bf 8f6f 	isb	sy
 8005f14:	f3bf 8f4f 	dsb	sy
 8005f18:	60fb      	str	r3, [r7, #12]
}
 8005f1a:	bf00      	nop
 8005f1c:	e7fe      	b.n	8005f1c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f24:	f023 0301 	bic.w	r3, r3, #1
 8005f28:	b2da      	uxtb	r2, r3
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	6a1b      	ldr	r3, [r3, #32]
 8005f34:	6978      	ldr	r0, [r7, #20]
 8005f36:	4798      	blx	r3
}
 8005f38:	bf00      	nop
 8005f3a:	3718      	adds	r7, #24
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}
 8005f40:	20000e68 	.word	0x20000e68

08005f44 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b084      	sub	sp, #16
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005f4c:	f107 0308 	add.w	r3, r7, #8
 8005f50:	4618      	mov	r0, r3
 8005f52:	f000 f857 	bl	8006004 <prvGetNextExpireTime>
 8005f56:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	4619      	mov	r1, r3
 8005f5c:	68f8      	ldr	r0, [r7, #12]
 8005f5e:	f000 f803 	bl	8005f68 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005f62:	f000 f8d5 	bl	8006110 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005f66:	e7f1      	b.n	8005f4c <prvTimerTask+0x8>

08005f68 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b084      	sub	sp, #16
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005f72:	f7ff f93b 	bl	80051ec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005f76:	f107 0308 	add.w	r3, r7, #8
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f000 f866 	bl	800604c <prvSampleTimeNow>
 8005f80:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d130      	bne.n	8005fea <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d10a      	bne.n	8005fa4 <prvProcessTimerOrBlockTask+0x3c>
 8005f8e:	687a      	ldr	r2, [r7, #4]
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	429a      	cmp	r2, r3
 8005f94:	d806      	bhi.n	8005fa4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005f96:	f7ff f937 	bl	8005208 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005f9a:	68f9      	ldr	r1, [r7, #12]
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f7ff ff85 	bl	8005eac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005fa2:	e024      	b.n	8005fee <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d008      	beq.n	8005fbc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005faa:	4b13      	ldr	r3, [pc, #76]	; (8005ff8 <prvProcessTimerOrBlockTask+0x90>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d101      	bne.n	8005fb8 <prvProcessTimerOrBlockTask+0x50>
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	e000      	b.n	8005fba <prvProcessTimerOrBlockTask+0x52>
 8005fb8:	2300      	movs	r3, #0
 8005fba:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005fbc:	4b0f      	ldr	r3, [pc, #60]	; (8005ffc <prvProcessTimerOrBlockTask+0x94>)
 8005fbe:	6818      	ldr	r0, [r3, #0]
 8005fc0:	687a      	ldr	r2, [r7, #4]
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	1ad3      	subs	r3, r2, r3
 8005fc6:	683a      	ldr	r2, [r7, #0]
 8005fc8:	4619      	mov	r1, r3
 8005fca:	f7fe fd79 	bl	8004ac0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005fce:	f7ff f91b 	bl	8005208 <xTaskResumeAll>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d10a      	bne.n	8005fee <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005fd8:	4b09      	ldr	r3, [pc, #36]	; (8006000 <prvProcessTimerOrBlockTask+0x98>)
 8005fda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fde:	601a      	str	r2, [r3, #0]
 8005fe0:	f3bf 8f4f 	dsb	sy
 8005fe4:	f3bf 8f6f 	isb	sy
}
 8005fe8:	e001      	b.n	8005fee <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005fea:	f7ff f90d 	bl	8005208 <xTaskResumeAll>
}
 8005fee:	bf00      	nop
 8005ff0:	3710      	adds	r7, #16
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}
 8005ff6:	bf00      	nop
 8005ff8:	20000e6c 	.word	0x20000e6c
 8005ffc:	20000e70 	.word	0x20000e70
 8006000:	e000ed04 	.word	0xe000ed04

08006004 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006004:	b480      	push	{r7}
 8006006:	b085      	sub	sp, #20
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800600c:	4b0e      	ldr	r3, [pc, #56]	; (8006048 <prvGetNextExpireTime+0x44>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d101      	bne.n	800601a <prvGetNextExpireTime+0x16>
 8006016:	2201      	movs	r2, #1
 8006018:	e000      	b.n	800601c <prvGetNextExpireTime+0x18>
 800601a:	2200      	movs	r2, #0
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d105      	bne.n	8006034 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006028:	4b07      	ldr	r3, [pc, #28]	; (8006048 <prvGetNextExpireTime+0x44>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	68db      	ldr	r3, [r3, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	60fb      	str	r3, [r7, #12]
 8006032:	e001      	b.n	8006038 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006034:	2300      	movs	r3, #0
 8006036:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006038:	68fb      	ldr	r3, [r7, #12]
}
 800603a:	4618      	mov	r0, r3
 800603c:	3714      	adds	r7, #20
 800603e:	46bd      	mov	sp, r7
 8006040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006044:	4770      	bx	lr
 8006046:	bf00      	nop
 8006048:	20000e68 	.word	0x20000e68

0800604c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b084      	sub	sp, #16
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006054:	f7ff f976 	bl	8005344 <xTaskGetTickCount>
 8006058:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800605a:	4b0b      	ldr	r3, [pc, #44]	; (8006088 <prvSampleTimeNow+0x3c>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	68fa      	ldr	r2, [r7, #12]
 8006060:	429a      	cmp	r2, r3
 8006062:	d205      	bcs.n	8006070 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006064:	f000 f936 	bl	80062d4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2201      	movs	r2, #1
 800606c:	601a      	str	r2, [r3, #0]
 800606e:	e002      	b.n	8006076 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2200      	movs	r2, #0
 8006074:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006076:	4a04      	ldr	r2, [pc, #16]	; (8006088 <prvSampleTimeNow+0x3c>)
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800607c:	68fb      	ldr	r3, [r7, #12]
}
 800607e:	4618      	mov	r0, r3
 8006080:	3710      	adds	r7, #16
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}
 8006086:	bf00      	nop
 8006088:	20000e78 	.word	0x20000e78

0800608c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b086      	sub	sp, #24
 8006090:	af00      	add	r7, sp, #0
 8006092:	60f8      	str	r0, [r7, #12]
 8006094:	60b9      	str	r1, [r7, #8]
 8006096:	607a      	str	r2, [r7, #4]
 8006098:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800609a:	2300      	movs	r3, #0
 800609c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	68ba      	ldr	r2, [r7, #8]
 80060a2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	68fa      	ldr	r2, [r7, #12]
 80060a8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80060aa:	68ba      	ldr	r2, [r7, #8]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	429a      	cmp	r2, r3
 80060b0:	d812      	bhi.n	80060d8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060b2:	687a      	ldr	r2, [r7, #4]
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	1ad2      	subs	r2, r2, r3
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	699b      	ldr	r3, [r3, #24]
 80060bc:	429a      	cmp	r2, r3
 80060be:	d302      	bcc.n	80060c6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80060c0:	2301      	movs	r3, #1
 80060c2:	617b      	str	r3, [r7, #20]
 80060c4:	e01b      	b.n	80060fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80060c6:	4b10      	ldr	r3, [pc, #64]	; (8006108 <prvInsertTimerInActiveList+0x7c>)
 80060c8:	681a      	ldr	r2, [r3, #0]
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	3304      	adds	r3, #4
 80060ce:	4619      	mov	r1, r3
 80060d0:	4610      	mov	r0, r2
 80060d2:	f7fd fc6c 	bl	80039ae <vListInsert>
 80060d6:	e012      	b.n	80060fe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80060d8:	687a      	ldr	r2, [r7, #4]
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	429a      	cmp	r2, r3
 80060de:	d206      	bcs.n	80060ee <prvInsertTimerInActiveList+0x62>
 80060e0:	68ba      	ldr	r2, [r7, #8]
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d302      	bcc.n	80060ee <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80060e8:	2301      	movs	r3, #1
 80060ea:	617b      	str	r3, [r7, #20]
 80060ec:	e007      	b.n	80060fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80060ee:	4b07      	ldr	r3, [pc, #28]	; (800610c <prvInsertTimerInActiveList+0x80>)
 80060f0:	681a      	ldr	r2, [r3, #0]
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	3304      	adds	r3, #4
 80060f6:	4619      	mov	r1, r3
 80060f8:	4610      	mov	r0, r2
 80060fa:	f7fd fc58 	bl	80039ae <vListInsert>
		}
	}

	return xProcessTimerNow;
 80060fe:	697b      	ldr	r3, [r7, #20]
}
 8006100:	4618      	mov	r0, r3
 8006102:	3718      	adds	r7, #24
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}
 8006108:	20000e6c 	.word	0x20000e6c
 800610c:	20000e68 	.word	0x20000e68

08006110 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b08e      	sub	sp, #56	; 0x38
 8006114:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006116:	e0ca      	b.n	80062ae <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2b00      	cmp	r3, #0
 800611c:	da18      	bge.n	8006150 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800611e:	1d3b      	adds	r3, r7, #4
 8006120:	3304      	adds	r3, #4
 8006122:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006126:	2b00      	cmp	r3, #0
 8006128:	d10a      	bne.n	8006140 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800612a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800612e:	f383 8811 	msr	BASEPRI, r3
 8006132:	f3bf 8f6f 	isb	sy
 8006136:	f3bf 8f4f 	dsb	sy
 800613a:	61fb      	str	r3, [r7, #28]
}
 800613c:	bf00      	nop
 800613e:	e7fe      	b.n	800613e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006146:	6850      	ldr	r0, [r2, #4]
 8006148:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800614a:	6892      	ldr	r2, [r2, #8]
 800614c:	4611      	mov	r1, r2
 800614e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2b00      	cmp	r3, #0
 8006154:	f2c0 80aa 	blt.w	80062ac <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800615c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800615e:	695b      	ldr	r3, [r3, #20]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d004      	beq.n	800616e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006166:	3304      	adds	r3, #4
 8006168:	4618      	mov	r0, r3
 800616a:	f7fd fc59 	bl	8003a20 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800616e:	463b      	mov	r3, r7
 8006170:	4618      	mov	r0, r3
 8006172:	f7ff ff6b 	bl	800604c <prvSampleTimeNow>
 8006176:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2b09      	cmp	r3, #9
 800617c:	f200 8097 	bhi.w	80062ae <prvProcessReceivedCommands+0x19e>
 8006180:	a201      	add	r2, pc, #4	; (adr r2, 8006188 <prvProcessReceivedCommands+0x78>)
 8006182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006186:	bf00      	nop
 8006188:	080061b1 	.word	0x080061b1
 800618c:	080061b1 	.word	0x080061b1
 8006190:	080061b1 	.word	0x080061b1
 8006194:	08006225 	.word	0x08006225
 8006198:	08006239 	.word	0x08006239
 800619c:	08006283 	.word	0x08006283
 80061a0:	080061b1 	.word	0x080061b1
 80061a4:	080061b1 	.word	0x080061b1
 80061a8:	08006225 	.word	0x08006225
 80061ac:	08006239 	.word	0x08006239
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80061b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80061b6:	f043 0301 	orr.w	r3, r3, #1
 80061ba:	b2da      	uxtb	r2, r3
 80061bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80061c2:	68ba      	ldr	r2, [r7, #8]
 80061c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061c6:	699b      	ldr	r3, [r3, #24]
 80061c8:	18d1      	adds	r1, r2, r3
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061d0:	f7ff ff5c 	bl	800608c <prvInsertTimerInActiveList>
 80061d4:	4603      	mov	r3, r0
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d069      	beq.n	80062ae <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80061da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061dc:	6a1b      	ldr	r3, [r3, #32]
 80061de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061e0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80061e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80061e8:	f003 0304 	and.w	r3, r3, #4
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d05e      	beq.n	80062ae <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80061f0:	68ba      	ldr	r2, [r7, #8]
 80061f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061f4:	699b      	ldr	r3, [r3, #24]
 80061f6:	441a      	add	r2, r3
 80061f8:	2300      	movs	r3, #0
 80061fa:	9300      	str	r3, [sp, #0]
 80061fc:	2300      	movs	r3, #0
 80061fe:	2100      	movs	r1, #0
 8006200:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006202:	f7ff fe05 	bl	8005e10 <xTimerGenericCommand>
 8006206:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006208:	6a3b      	ldr	r3, [r7, #32]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d14f      	bne.n	80062ae <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800620e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006212:	f383 8811 	msr	BASEPRI, r3
 8006216:	f3bf 8f6f 	isb	sy
 800621a:	f3bf 8f4f 	dsb	sy
 800621e:	61bb      	str	r3, [r7, #24]
}
 8006220:	bf00      	nop
 8006222:	e7fe      	b.n	8006222 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006226:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800622a:	f023 0301 	bic.w	r3, r3, #1
 800622e:	b2da      	uxtb	r2, r3
 8006230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006232:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006236:	e03a      	b.n	80062ae <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800623a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800623e:	f043 0301 	orr.w	r3, r3, #1
 8006242:	b2da      	uxtb	r2, r3
 8006244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006246:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800624a:	68ba      	ldr	r2, [r7, #8]
 800624c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800624e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006252:	699b      	ldr	r3, [r3, #24]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d10a      	bne.n	800626e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800625c:	f383 8811 	msr	BASEPRI, r3
 8006260:	f3bf 8f6f 	isb	sy
 8006264:	f3bf 8f4f 	dsb	sy
 8006268:	617b      	str	r3, [r7, #20]
}
 800626a:	bf00      	nop
 800626c:	e7fe      	b.n	800626c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800626e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006270:	699a      	ldr	r2, [r3, #24]
 8006272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006274:	18d1      	adds	r1, r2, r3
 8006276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006278:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800627a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800627c:	f7ff ff06 	bl	800608c <prvInsertTimerInActiveList>
					break;
 8006280:	e015      	b.n	80062ae <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006284:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006288:	f003 0302 	and.w	r3, r3, #2
 800628c:	2b00      	cmp	r3, #0
 800628e:	d103      	bne.n	8006298 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006290:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006292:	f000 fbdd 	bl	8006a50 <vPortFree>
 8006296:	e00a      	b.n	80062ae <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800629a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800629e:	f023 0301 	bic.w	r3, r3, #1
 80062a2:	b2da      	uxtb	r2, r3
 80062a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80062aa:	e000      	b.n	80062ae <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80062ac:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80062ae:	4b08      	ldr	r3, [pc, #32]	; (80062d0 <prvProcessReceivedCommands+0x1c0>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	1d39      	adds	r1, r7, #4
 80062b4:	2200      	movs	r2, #0
 80062b6:	4618      	mov	r0, r3
 80062b8:	f7fd fff6 	bl	80042a8 <xQueueReceive>
 80062bc:	4603      	mov	r3, r0
 80062be:	2b00      	cmp	r3, #0
 80062c0:	f47f af2a 	bne.w	8006118 <prvProcessReceivedCommands+0x8>
	}
}
 80062c4:	bf00      	nop
 80062c6:	bf00      	nop
 80062c8:	3730      	adds	r7, #48	; 0x30
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}
 80062ce:	bf00      	nop
 80062d0:	20000e70 	.word	0x20000e70

080062d4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b088      	sub	sp, #32
 80062d8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80062da:	e048      	b.n	800636e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80062dc:	4b2d      	ldr	r3, [pc, #180]	; (8006394 <prvSwitchTimerLists+0xc0>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	68db      	ldr	r3, [r3, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062e6:	4b2b      	ldr	r3, [pc, #172]	; (8006394 <prvSwitchTimerLists+0xc0>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	68db      	ldr	r3, [r3, #12]
 80062ec:	68db      	ldr	r3, [r3, #12]
 80062ee:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	3304      	adds	r3, #4
 80062f4:	4618      	mov	r0, r3
 80062f6:	f7fd fb93 	bl	8003a20 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	6a1b      	ldr	r3, [r3, #32]
 80062fe:	68f8      	ldr	r0, [r7, #12]
 8006300:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006308:	f003 0304 	and.w	r3, r3, #4
 800630c:	2b00      	cmp	r3, #0
 800630e:	d02e      	beq.n	800636e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	699b      	ldr	r3, [r3, #24]
 8006314:	693a      	ldr	r2, [r7, #16]
 8006316:	4413      	add	r3, r2
 8006318:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800631a:	68ba      	ldr	r2, [r7, #8]
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	429a      	cmp	r2, r3
 8006320:	d90e      	bls.n	8006340 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	68ba      	ldr	r2, [r7, #8]
 8006326:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	68fa      	ldr	r2, [r7, #12]
 800632c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800632e:	4b19      	ldr	r3, [pc, #100]	; (8006394 <prvSwitchTimerLists+0xc0>)
 8006330:	681a      	ldr	r2, [r3, #0]
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	3304      	adds	r3, #4
 8006336:	4619      	mov	r1, r3
 8006338:	4610      	mov	r0, r2
 800633a:	f7fd fb38 	bl	80039ae <vListInsert>
 800633e:	e016      	b.n	800636e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006340:	2300      	movs	r3, #0
 8006342:	9300      	str	r3, [sp, #0]
 8006344:	2300      	movs	r3, #0
 8006346:	693a      	ldr	r2, [r7, #16]
 8006348:	2100      	movs	r1, #0
 800634a:	68f8      	ldr	r0, [r7, #12]
 800634c:	f7ff fd60 	bl	8005e10 <xTimerGenericCommand>
 8006350:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d10a      	bne.n	800636e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800635c:	f383 8811 	msr	BASEPRI, r3
 8006360:	f3bf 8f6f 	isb	sy
 8006364:	f3bf 8f4f 	dsb	sy
 8006368:	603b      	str	r3, [r7, #0]
}
 800636a:	bf00      	nop
 800636c:	e7fe      	b.n	800636c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800636e:	4b09      	ldr	r3, [pc, #36]	; (8006394 <prvSwitchTimerLists+0xc0>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d1b1      	bne.n	80062dc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006378:	4b06      	ldr	r3, [pc, #24]	; (8006394 <prvSwitchTimerLists+0xc0>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800637e:	4b06      	ldr	r3, [pc, #24]	; (8006398 <prvSwitchTimerLists+0xc4>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a04      	ldr	r2, [pc, #16]	; (8006394 <prvSwitchTimerLists+0xc0>)
 8006384:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006386:	4a04      	ldr	r2, [pc, #16]	; (8006398 <prvSwitchTimerLists+0xc4>)
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	6013      	str	r3, [r2, #0]
}
 800638c:	bf00      	nop
 800638e:	3718      	adds	r7, #24
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}
 8006394:	20000e68 	.word	0x20000e68
 8006398:	20000e6c 	.word	0x20000e6c

0800639c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b082      	sub	sp, #8
 80063a0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80063a2:	f000 f967 	bl	8006674 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80063a6:	4b15      	ldr	r3, [pc, #84]	; (80063fc <prvCheckForValidListAndQueue+0x60>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d120      	bne.n	80063f0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80063ae:	4814      	ldr	r0, [pc, #80]	; (8006400 <prvCheckForValidListAndQueue+0x64>)
 80063b0:	f7fd faac 	bl	800390c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80063b4:	4813      	ldr	r0, [pc, #76]	; (8006404 <prvCheckForValidListAndQueue+0x68>)
 80063b6:	f7fd faa9 	bl	800390c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80063ba:	4b13      	ldr	r3, [pc, #76]	; (8006408 <prvCheckForValidListAndQueue+0x6c>)
 80063bc:	4a10      	ldr	r2, [pc, #64]	; (8006400 <prvCheckForValidListAndQueue+0x64>)
 80063be:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80063c0:	4b12      	ldr	r3, [pc, #72]	; (800640c <prvCheckForValidListAndQueue+0x70>)
 80063c2:	4a10      	ldr	r2, [pc, #64]	; (8006404 <prvCheckForValidListAndQueue+0x68>)
 80063c4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80063c6:	2300      	movs	r3, #0
 80063c8:	9300      	str	r3, [sp, #0]
 80063ca:	4b11      	ldr	r3, [pc, #68]	; (8006410 <prvCheckForValidListAndQueue+0x74>)
 80063cc:	4a11      	ldr	r2, [pc, #68]	; (8006414 <prvCheckForValidListAndQueue+0x78>)
 80063ce:	2110      	movs	r1, #16
 80063d0:	200a      	movs	r0, #10
 80063d2:	f7fd fbb7 	bl	8003b44 <xQueueGenericCreateStatic>
 80063d6:	4603      	mov	r3, r0
 80063d8:	4a08      	ldr	r2, [pc, #32]	; (80063fc <prvCheckForValidListAndQueue+0x60>)
 80063da:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80063dc:	4b07      	ldr	r3, [pc, #28]	; (80063fc <prvCheckForValidListAndQueue+0x60>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d005      	beq.n	80063f0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80063e4:	4b05      	ldr	r3, [pc, #20]	; (80063fc <prvCheckForValidListAndQueue+0x60>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	490b      	ldr	r1, [pc, #44]	; (8006418 <prvCheckForValidListAndQueue+0x7c>)
 80063ea:	4618      	mov	r0, r3
 80063ec:	f7fe fb14 	bl	8004a18 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80063f0:	f000 f970 	bl	80066d4 <vPortExitCritical>
}
 80063f4:	bf00      	nop
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}
 80063fa:	bf00      	nop
 80063fc:	20000e70 	.word	0x20000e70
 8006400:	20000e40 	.word	0x20000e40
 8006404:	20000e54 	.word	0x20000e54
 8006408:	20000e68 	.word	0x20000e68
 800640c:	20000e6c 	.word	0x20000e6c
 8006410:	20000f1c 	.word	0x20000f1c
 8006414:	20000e7c 	.word	0x20000e7c
 8006418:	08006f18 	.word	0x08006f18

0800641c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800641c:	b480      	push	{r7}
 800641e:	b085      	sub	sp, #20
 8006420:	af00      	add	r7, sp, #0
 8006422:	60f8      	str	r0, [r7, #12]
 8006424:	60b9      	str	r1, [r7, #8]
 8006426:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	3b04      	subs	r3, #4
 800642c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006434:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	3b04      	subs	r3, #4
 800643a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	f023 0201 	bic.w	r2, r3, #1
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	3b04      	subs	r3, #4
 800644a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800644c:	4a0c      	ldr	r2, [pc, #48]	; (8006480 <pxPortInitialiseStack+0x64>)
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	3b14      	subs	r3, #20
 8006456:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006458:	687a      	ldr	r2, [r7, #4]
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	3b04      	subs	r3, #4
 8006462:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f06f 0202 	mvn.w	r2, #2
 800646a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	3b20      	subs	r3, #32
 8006470:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006472:	68fb      	ldr	r3, [r7, #12]
}
 8006474:	4618      	mov	r0, r3
 8006476:	3714      	adds	r7, #20
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr
 8006480:	08006485 	.word	0x08006485

08006484 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006484:	b480      	push	{r7}
 8006486:	b085      	sub	sp, #20
 8006488:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800648a:	2300      	movs	r3, #0
 800648c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800648e:	4b12      	ldr	r3, [pc, #72]	; (80064d8 <prvTaskExitError+0x54>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006496:	d00a      	beq.n	80064ae <prvTaskExitError+0x2a>
	__asm volatile
 8006498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800649c:	f383 8811 	msr	BASEPRI, r3
 80064a0:	f3bf 8f6f 	isb	sy
 80064a4:	f3bf 8f4f 	dsb	sy
 80064a8:	60fb      	str	r3, [r7, #12]
}
 80064aa:	bf00      	nop
 80064ac:	e7fe      	b.n	80064ac <prvTaskExitError+0x28>
	__asm volatile
 80064ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064b2:	f383 8811 	msr	BASEPRI, r3
 80064b6:	f3bf 8f6f 	isb	sy
 80064ba:	f3bf 8f4f 	dsb	sy
 80064be:	60bb      	str	r3, [r7, #8]
}
 80064c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80064c2:	bf00      	nop
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d0fc      	beq.n	80064c4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80064ca:	bf00      	nop
 80064cc:	bf00      	nop
 80064ce:	3714      	adds	r7, #20
 80064d0:	46bd      	mov	sp, r7
 80064d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d6:	4770      	bx	lr
 80064d8:	20000024 	.word	0x20000024
 80064dc:	00000000 	.word	0x00000000

080064e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80064e0:	4b07      	ldr	r3, [pc, #28]	; (8006500 <pxCurrentTCBConst2>)
 80064e2:	6819      	ldr	r1, [r3, #0]
 80064e4:	6808      	ldr	r0, [r1, #0]
 80064e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064ea:	f380 8809 	msr	PSP, r0
 80064ee:	f3bf 8f6f 	isb	sy
 80064f2:	f04f 0000 	mov.w	r0, #0
 80064f6:	f380 8811 	msr	BASEPRI, r0
 80064fa:	4770      	bx	lr
 80064fc:	f3af 8000 	nop.w

08006500 <pxCurrentTCBConst2>:
 8006500:	20000940 	.word	0x20000940
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006504:	bf00      	nop
 8006506:	bf00      	nop

08006508 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006508:	4808      	ldr	r0, [pc, #32]	; (800652c <prvPortStartFirstTask+0x24>)
 800650a:	6800      	ldr	r0, [r0, #0]
 800650c:	6800      	ldr	r0, [r0, #0]
 800650e:	f380 8808 	msr	MSP, r0
 8006512:	f04f 0000 	mov.w	r0, #0
 8006516:	f380 8814 	msr	CONTROL, r0
 800651a:	b662      	cpsie	i
 800651c:	b661      	cpsie	f
 800651e:	f3bf 8f4f 	dsb	sy
 8006522:	f3bf 8f6f 	isb	sy
 8006526:	df00      	svc	0
 8006528:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800652a:	bf00      	nop
 800652c:	e000ed08 	.word	0xe000ed08

08006530 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b086      	sub	sp, #24
 8006534:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006536:	4b46      	ldr	r3, [pc, #280]	; (8006650 <xPortStartScheduler+0x120>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a46      	ldr	r2, [pc, #280]	; (8006654 <xPortStartScheduler+0x124>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d10a      	bne.n	8006556 <xPortStartScheduler+0x26>
	__asm volatile
 8006540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006544:	f383 8811 	msr	BASEPRI, r3
 8006548:	f3bf 8f6f 	isb	sy
 800654c:	f3bf 8f4f 	dsb	sy
 8006550:	613b      	str	r3, [r7, #16]
}
 8006552:	bf00      	nop
 8006554:	e7fe      	b.n	8006554 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006556:	4b3e      	ldr	r3, [pc, #248]	; (8006650 <xPortStartScheduler+0x120>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a3f      	ldr	r2, [pc, #252]	; (8006658 <xPortStartScheduler+0x128>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d10a      	bne.n	8006576 <xPortStartScheduler+0x46>
	__asm volatile
 8006560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006564:	f383 8811 	msr	BASEPRI, r3
 8006568:	f3bf 8f6f 	isb	sy
 800656c:	f3bf 8f4f 	dsb	sy
 8006570:	60fb      	str	r3, [r7, #12]
}
 8006572:	bf00      	nop
 8006574:	e7fe      	b.n	8006574 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006576:	4b39      	ldr	r3, [pc, #228]	; (800665c <xPortStartScheduler+0x12c>)
 8006578:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	781b      	ldrb	r3, [r3, #0]
 800657e:	b2db      	uxtb	r3, r3
 8006580:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	22ff      	movs	r2, #255	; 0xff
 8006586:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	781b      	ldrb	r3, [r3, #0]
 800658c:	b2db      	uxtb	r3, r3
 800658e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006590:	78fb      	ldrb	r3, [r7, #3]
 8006592:	b2db      	uxtb	r3, r3
 8006594:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006598:	b2da      	uxtb	r2, r3
 800659a:	4b31      	ldr	r3, [pc, #196]	; (8006660 <xPortStartScheduler+0x130>)
 800659c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800659e:	4b31      	ldr	r3, [pc, #196]	; (8006664 <xPortStartScheduler+0x134>)
 80065a0:	2207      	movs	r2, #7
 80065a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80065a4:	e009      	b.n	80065ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80065a6:	4b2f      	ldr	r3, [pc, #188]	; (8006664 <xPortStartScheduler+0x134>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	3b01      	subs	r3, #1
 80065ac:	4a2d      	ldr	r2, [pc, #180]	; (8006664 <xPortStartScheduler+0x134>)
 80065ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80065b0:	78fb      	ldrb	r3, [r7, #3]
 80065b2:	b2db      	uxtb	r3, r3
 80065b4:	005b      	lsls	r3, r3, #1
 80065b6:	b2db      	uxtb	r3, r3
 80065b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80065ba:	78fb      	ldrb	r3, [r7, #3]
 80065bc:	b2db      	uxtb	r3, r3
 80065be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065c2:	2b80      	cmp	r3, #128	; 0x80
 80065c4:	d0ef      	beq.n	80065a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80065c6:	4b27      	ldr	r3, [pc, #156]	; (8006664 <xPortStartScheduler+0x134>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f1c3 0307 	rsb	r3, r3, #7
 80065ce:	2b04      	cmp	r3, #4
 80065d0:	d00a      	beq.n	80065e8 <xPortStartScheduler+0xb8>
	__asm volatile
 80065d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065d6:	f383 8811 	msr	BASEPRI, r3
 80065da:	f3bf 8f6f 	isb	sy
 80065de:	f3bf 8f4f 	dsb	sy
 80065e2:	60bb      	str	r3, [r7, #8]
}
 80065e4:	bf00      	nop
 80065e6:	e7fe      	b.n	80065e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80065e8:	4b1e      	ldr	r3, [pc, #120]	; (8006664 <xPortStartScheduler+0x134>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	021b      	lsls	r3, r3, #8
 80065ee:	4a1d      	ldr	r2, [pc, #116]	; (8006664 <xPortStartScheduler+0x134>)
 80065f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80065f2:	4b1c      	ldr	r3, [pc, #112]	; (8006664 <xPortStartScheduler+0x134>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80065fa:	4a1a      	ldr	r2, [pc, #104]	; (8006664 <xPortStartScheduler+0x134>)
 80065fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	b2da      	uxtb	r2, r3
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006606:	4b18      	ldr	r3, [pc, #96]	; (8006668 <xPortStartScheduler+0x138>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a17      	ldr	r2, [pc, #92]	; (8006668 <xPortStartScheduler+0x138>)
 800660c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006610:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006612:	4b15      	ldr	r3, [pc, #84]	; (8006668 <xPortStartScheduler+0x138>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a14      	ldr	r2, [pc, #80]	; (8006668 <xPortStartScheduler+0x138>)
 8006618:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800661c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800661e:	f000 f8dd 	bl	80067dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006622:	4b12      	ldr	r3, [pc, #72]	; (800666c <xPortStartScheduler+0x13c>)
 8006624:	2200      	movs	r2, #0
 8006626:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006628:	f000 f8fc 	bl	8006824 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800662c:	4b10      	ldr	r3, [pc, #64]	; (8006670 <xPortStartScheduler+0x140>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a0f      	ldr	r2, [pc, #60]	; (8006670 <xPortStartScheduler+0x140>)
 8006632:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006636:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006638:	f7ff ff66 	bl	8006508 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800663c:	f7fe ff4c 	bl	80054d8 <vTaskSwitchContext>
	prvTaskExitError();
 8006640:	f7ff ff20 	bl	8006484 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006644:	2300      	movs	r3, #0
}
 8006646:	4618      	mov	r0, r3
 8006648:	3718      	adds	r7, #24
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}
 800664e:	bf00      	nop
 8006650:	e000ed00 	.word	0xe000ed00
 8006654:	410fc271 	.word	0x410fc271
 8006658:	410fc270 	.word	0x410fc270
 800665c:	e000e400 	.word	0xe000e400
 8006660:	20000f6c 	.word	0x20000f6c
 8006664:	20000f70 	.word	0x20000f70
 8006668:	e000ed20 	.word	0xe000ed20
 800666c:	20000024 	.word	0x20000024
 8006670:	e000ef34 	.word	0xe000ef34

08006674 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006674:	b480      	push	{r7}
 8006676:	b083      	sub	sp, #12
 8006678:	af00      	add	r7, sp, #0
	__asm volatile
 800667a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800667e:	f383 8811 	msr	BASEPRI, r3
 8006682:	f3bf 8f6f 	isb	sy
 8006686:	f3bf 8f4f 	dsb	sy
 800668a:	607b      	str	r3, [r7, #4]
}
 800668c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800668e:	4b0f      	ldr	r3, [pc, #60]	; (80066cc <vPortEnterCritical+0x58>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	3301      	adds	r3, #1
 8006694:	4a0d      	ldr	r2, [pc, #52]	; (80066cc <vPortEnterCritical+0x58>)
 8006696:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006698:	4b0c      	ldr	r3, [pc, #48]	; (80066cc <vPortEnterCritical+0x58>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	2b01      	cmp	r3, #1
 800669e:	d10f      	bne.n	80066c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80066a0:	4b0b      	ldr	r3, [pc, #44]	; (80066d0 <vPortEnterCritical+0x5c>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	b2db      	uxtb	r3, r3
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d00a      	beq.n	80066c0 <vPortEnterCritical+0x4c>
	__asm volatile
 80066aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ae:	f383 8811 	msr	BASEPRI, r3
 80066b2:	f3bf 8f6f 	isb	sy
 80066b6:	f3bf 8f4f 	dsb	sy
 80066ba:	603b      	str	r3, [r7, #0]
}
 80066bc:	bf00      	nop
 80066be:	e7fe      	b.n	80066be <vPortEnterCritical+0x4a>
	}
}
 80066c0:	bf00      	nop
 80066c2:	370c      	adds	r7, #12
 80066c4:	46bd      	mov	sp, r7
 80066c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ca:	4770      	bx	lr
 80066cc:	20000024 	.word	0x20000024
 80066d0:	e000ed04 	.word	0xe000ed04

080066d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80066d4:	b480      	push	{r7}
 80066d6:	b083      	sub	sp, #12
 80066d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80066da:	4b12      	ldr	r3, [pc, #72]	; (8006724 <vPortExitCritical+0x50>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d10a      	bne.n	80066f8 <vPortExitCritical+0x24>
	__asm volatile
 80066e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e6:	f383 8811 	msr	BASEPRI, r3
 80066ea:	f3bf 8f6f 	isb	sy
 80066ee:	f3bf 8f4f 	dsb	sy
 80066f2:	607b      	str	r3, [r7, #4]
}
 80066f4:	bf00      	nop
 80066f6:	e7fe      	b.n	80066f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80066f8:	4b0a      	ldr	r3, [pc, #40]	; (8006724 <vPortExitCritical+0x50>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	3b01      	subs	r3, #1
 80066fe:	4a09      	ldr	r2, [pc, #36]	; (8006724 <vPortExitCritical+0x50>)
 8006700:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006702:	4b08      	ldr	r3, [pc, #32]	; (8006724 <vPortExitCritical+0x50>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d105      	bne.n	8006716 <vPortExitCritical+0x42>
 800670a:	2300      	movs	r3, #0
 800670c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	f383 8811 	msr	BASEPRI, r3
}
 8006714:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006716:	bf00      	nop
 8006718:	370c      	adds	r7, #12
 800671a:	46bd      	mov	sp, r7
 800671c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006720:	4770      	bx	lr
 8006722:	bf00      	nop
 8006724:	20000024 	.word	0x20000024
	...

08006730 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006730:	f3ef 8009 	mrs	r0, PSP
 8006734:	f3bf 8f6f 	isb	sy
 8006738:	4b15      	ldr	r3, [pc, #84]	; (8006790 <pxCurrentTCBConst>)
 800673a:	681a      	ldr	r2, [r3, #0]
 800673c:	f01e 0f10 	tst.w	lr, #16
 8006740:	bf08      	it	eq
 8006742:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006746:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800674a:	6010      	str	r0, [r2, #0]
 800674c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006750:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006754:	f380 8811 	msr	BASEPRI, r0
 8006758:	f3bf 8f4f 	dsb	sy
 800675c:	f3bf 8f6f 	isb	sy
 8006760:	f7fe feba 	bl	80054d8 <vTaskSwitchContext>
 8006764:	f04f 0000 	mov.w	r0, #0
 8006768:	f380 8811 	msr	BASEPRI, r0
 800676c:	bc09      	pop	{r0, r3}
 800676e:	6819      	ldr	r1, [r3, #0]
 8006770:	6808      	ldr	r0, [r1, #0]
 8006772:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006776:	f01e 0f10 	tst.w	lr, #16
 800677a:	bf08      	it	eq
 800677c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006780:	f380 8809 	msr	PSP, r0
 8006784:	f3bf 8f6f 	isb	sy
 8006788:	4770      	bx	lr
 800678a:	bf00      	nop
 800678c:	f3af 8000 	nop.w

08006790 <pxCurrentTCBConst>:
 8006790:	20000940 	.word	0x20000940
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006794:	bf00      	nop
 8006796:	bf00      	nop

08006798 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b082      	sub	sp, #8
 800679c:	af00      	add	r7, sp, #0
	__asm volatile
 800679e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067a2:	f383 8811 	msr	BASEPRI, r3
 80067a6:	f3bf 8f6f 	isb	sy
 80067aa:	f3bf 8f4f 	dsb	sy
 80067ae:	607b      	str	r3, [r7, #4]
}
 80067b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80067b2:	f7fe fdd7 	bl	8005364 <xTaskIncrementTick>
 80067b6:	4603      	mov	r3, r0
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d003      	beq.n	80067c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80067bc:	4b06      	ldr	r3, [pc, #24]	; (80067d8 <xPortSysTickHandler+0x40>)
 80067be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067c2:	601a      	str	r2, [r3, #0]
 80067c4:	2300      	movs	r3, #0
 80067c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	f383 8811 	msr	BASEPRI, r3
}
 80067ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80067d0:	bf00      	nop
 80067d2:	3708      	adds	r7, #8
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}
 80067d8:	e000ed04 	.word	0xe000ed04

080067dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80067dc:	b480      	push	{r7}
 80067de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80067e0:	4b0b      	ldr	r3, [pc, #44]	; (8006810 <vPortSetupTimerInterrupt+0x34>)
 80067e2:	2200      	movs	r2, #0
 80067e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80067e6:	4b0b      	ldr	r3, [pc, #44]	; (8006814 <vPortSetupTimerInterrupt+0x38>)
 80067e8:	2200      	movs	r2, #0
 80067ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80067ec:	4b0a      	ldr	r3, [pc, #40]	; (8006818 <vPortSetupTimerInterrupt+0x3c>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a0a      	ldr	r2, [pc, #40]	; (800681c <vPortSetupTimerInterrupt+0x40>)
 80067f2:	fba2 2303 	umull	r2, r3, r2, r3
 80067f6:	099b      	lsrs	r3, r3, #6
 80067f8:	4a09      	ldr	r2, [pc, #36]	; (8006820 <vPortSetupTimerInterrupt+0x44>)
 80067fa:	3b01      	subs	r3, #1
 80067fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80067fe:	4b04      	ldr	r3, [pc, #16]	; (8006810 <vPortSetupTimerInterrupt+0x34>)
 8006800:	2207      	movs	r2, #7
 8006802:	601a      	str	r2, [r3, #0]
}
 8006804:	bf00      	nop
 8006806:	46bd      	mov	sp, r7
 8006808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680c:	4770      	bx	lr
 800680e:	bf00      	nop
 8006810:	e000e010 	.word	0xe000e010
 8006814:	e000e018 	.word	0xe000e018
 8006818:	20000018 	.word	0x20000018
 800681c:	10624dd3 	.word	0x10624dd3
 8006820:	e000e014 	.word	0xe000e014

08006824 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006824:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006834 <vPortEnableVFP+0x10>
 8006828:	6801      	ldr	r1, [r0, #0]
 800682a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800682e:	6001      	str	r1, [r0, #0]
 8006830:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006832:	bf00      	nop
 8006834:	e000ed88 	.word	0xe000ed88

08006838 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006838:	b480      	push	{r7}
 800683a:	b085      	sub	sp, #20
 800683c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800683e:	f3ef 8305 	mrs	r3, IPSR
 8006842:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	2b0f      	cmp	r3, #15
 8006848:	d914      	bls.n	8006874 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800684a:	4a17      	ldr	r2, [pc, #92]	; (80068a8 <vPortValidateInterruptPriority+0x70>)
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	4413      	add	r3, r2
 8006850:	781b      	ldrb	r3, [r3, #0]
 8006852:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006854:	4b15      	ldr	r3, [pc, #84]	; (80068ac <vPortValidateInterruptPriority+0x74>)
 8006856:	781b      	ldrb	r3, [r3, #0]
 8006858:	7afa      	ldrb	r2, [r7, #11]
 800685a:	429a      	cmp	r2, r3
 800685c:	d20a      	bcs.n	8006874 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800685e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006862:	f383 8811 	msr	BASEPRI, r3
 8006866:	f3bf 8f6f 	isb	sy
 800686a:	f3bf 8f4f 	dsb	sy
 800686e:	607b      	str	r3, [r7, #4]
}
 8006870:	bf00      	nop
 8006872:	e7fe      	b.n	8006872 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006874:	4b0e      	ldr	r3, [pc, #56]	; (80068b0 <vPortValidateInterruptPriority+0x78>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800687c:	4b0d      	ldr	r3, [pc, #52]	; (80068b4 <vPortValidateInterruptPriority+0x7c>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	429a      	cmp	r2, r3
 8006882:	d90a      	bls.n	800689a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006888:	f383 8811 	msr	BASEPRI, r3
 800688c:	f3bf 8f6f 	isb	sy
 8006890:	f3bf 8f4f 	dsb	sy
 8006894:	603b      	str	r3, [r7, #0]
}
 8006896:	bf00      	nop
 8006898:	e7fe      	b.n	8006898 <vPortValidateInterruptPriority+0x60>
	}
 800689a:	bf00      	nop
 800689c:	3714      	adds	r7, #20
 800689e:	46bd      	mov	sp, r7
 80068a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a4:	4770      	bx	lr
 80068a6:	bf00      	nop
 80068a8:	e000e3f0 	.word	0xe000e3f0
 80068ac:	20000f6c 	.word	0x20000f6c
 80068b0:	e000ed0c 	.word	0xe000ed0c
 80068b4:	20000f70 	.word	0x20000f70

080068b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b08a      	sub	sp, #40	; 0x28
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80068c0:	2300      	movs	r3, #0
 80068c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80068c4:	f7fe fc92 	bl	80051ec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80068c8:	4b5b      	ldr	r3, [pc, #364]	; (8006a38 <pvPortMalloc+0x180>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d101      	bne.n	80068d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80068d0:	f000 f920 	bl	8006b14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80068d4:	4b59      	ldr	r3, [pc, #356]	; (8006a3c <pvPortMalloc+0x184>)
 80068d6:	681a      	ldr	r2, [r3, #0]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	4013      	ands	r3, r2
 80068dc:	2b00      	cmp	r3, #0
 80068de:	f040 8093 	bne.w	8006a08 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d01d      	beq.n	8006924 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80068e8:	2208      	movs	r2, #8
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	4413      	add	r3, r2
 80068ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f003 0307 	and.w	r3, r3, #7
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d014      	beq.n	8006924 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	f023 0307 	bic.w	r3, r3, #7
 8006900:	3308      	adds	r3, #8
 8006902:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f003 0307 	and.w	r3, r3, #7
 800690a:	2b00      	cmp	r3, #0
 800690c:	d00a      	beq.n	8006924 <pvPortMalloc+0x6c>
	__asm volatile
 800690e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006912:	f383 8811 	msr	BASEPRI, r3
 8006916:	f3bf 8f6f 	isb	sy
 800691a:	f3bf 8f4f 	dsb	sy
 800691e:	617b      	str	r3, [r7, #20]
}
 8006920:	bf00      	nop
 8006922:	e7fe      	b.n	8006922 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d06e      	beq.n	8006a08 <pvPortMalloc+0x150>
 800692a:	4b45      	ldr	r3, [pc, #276]	; (8006a40 <pvPortMalloc+0x188>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	687a      	ldr	r2, [r7, #4]
 8006930:	429a      	cmp	r2, r3
 8006932:	d869      	bhi.n	8006a08 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006934:	4b43      	ldr	r3, [pc, #268]	; (8006a44 <pvPortMalloc+0x18c>)
 8006936:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006938:	4b42      	ldr	r3, [pc, #264]	; (8006a44 <pvPortMalloc+0x18c>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800693e:	e004      	b.n	800694a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006942:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800694a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800694c:	685b      	ldr	r3, [r3, #4]
 800694e:	687a      	ldr	r2, [r7, #4]
 8006950:	429a      	cmp	r2, r3
 8006952:	d903      	bls.n	800695c <pvPortMalloc+0xa4>
 8006954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d1f1      	bne.n	8006940 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800695c:	4b36      	ldr	r3, [pc, #216]	; (8006a38 <pvPortMalloc+0x180>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006962:	429a      	cmp	r2, r3
 8006964:	d050      	beq.n	8006a08 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006966:	6a3b      	ldr	r3, [r7, #32]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	2208      	movs	r2, #8
 800696c:	4413      	add	r3, r2
 800696e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006972:	681a      	ldr	r2, [r3, #0]
 8006974:	6a3b      	ldr	r3, [r7, #32]
 8006976:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800697a:	685a      	ldr	r2, [r3, #4]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	1ad2      	subs	r2, r2, r3
 8006980:	2308      	movs	r3, #8
 8006982:	005b      	lsls	r3, r3, #1
 8006984:	429a      	cmp	r2, r3
 8006986:	d91f      	bls.n	80069c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006988:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	4413      	add	r3, r2
 800698e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006990:	69bb      	ldr	r3, [r7, #24]
 8006992:	f003 0307 	and.w	r3, r3, #7
 8006996:	2b00      	cmp	r3, #0
 8006998:	d00a      	beq.n	80069b0 <pvPortMalloc+0xf8>
	__asm volatile
 800699a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800699e:	f383 8811 	msr	BASEPRI, r3
 80069a2:	f3bf 8f6f 	isb	sy
 80069a6:	f3bf 8f4f 	dsb	sy
 80069aa:	613b      	str	r3, [r7, #16]
}
 80069ac:	bf00      	nop
 80069ae:	e7fe      	b.n	80069ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80069b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b2:	685a      	ldr	r2, [r3, #4]
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	1ad2      	subs	r2, r2, r3
 80069b8:	69bb      	ldr	r3, [r7, #24]
 80069ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80069bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069be:	687a      	ldr	r2, [r7, #4]
 80069c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80069c2:	69b8      	ldr	r0, [r7, #24]
 80069c4:	f000 f908 	bl	8006bd8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80069c8:	4b1d      	ldr	r3, [pc, #116]	; (8006a40 <pvPortMalloc+0x188>)
 80069ca:	681a      	ldr	r2, [r3, #0]
 80069cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	1ad3      	subs	r3, r2, r3
 80069d2:	4a1b      	ldr	r2, [pc, #108]	; (8006a40 <pvPortMalloc+0x188>)
 80069d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80069d6:	4b1a      	ldr	r3, [pc, #104]	; (8006a40 <pvPortMalloc+0x188>)
 80069d8:	681a      	ldr	r2, [r3, #0]
 80069da:	4b1b      	ldr	r3, [pc, #108]	; (8006a48 <pvPortMalloc+0x190>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	429a      	cmp	r2, r3
 80069e0:	d203      	bcs.n	80069ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80069e2:	4b17      	ldr	r3, [pc, #92]	; (8006a40 <pvPortMalloc+0x188>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a18      	ldr	r2, [pc, #96]	; (8006a48 <pvPortMalloc+0x190>)
 80069e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80069ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ec:	685a      	ldr	r2, [r3, #4]
 80069ee:	4b13      	ldr	r3, [pc, #76]	; (8006a3c <pvPortMalloc+0x184>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	431a      	orrs	r2, r3
 80069f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80069f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069fa:	2200      	movs	r2, #0
 80069fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80069fe:	4b13      	ldr	r3, [pc, #76]	; (8006a4c <pvPortMalloc+0x194>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	3301      	adds	r3, #1
 8006a04:	4a11      	ldr	r2, [pc, #68]	; (8006a4c <pvPortMalloc+0x194>)
 8006a06:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006a08:	f7fe fbfe 	bl	8005208 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a0c:	69fb      	ldr	r3, [r7, #28]
 8006a0e:	f003 0307 	and.w	r3, r3, #7
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d00a      	beq.n	8006a2c <pvPortMalloc+0x174>
	__asm volatile
 8006a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a1a:	f383 8811 	msr	BASEPRI, r3
 8006a1e:	f3bf 8f6f 	isb	sy
 8006a22:	f3bf 8f4f 	dsb	sy
 8006a26:	60fb      	str	r3, [r7, #12]
}
 8006a28:	bf00      	nop
 8006a2a:	e7fe      	b.n	8006a2a <pvPortMalloc+0x172>
	return pvReturn;
 8006a2c:	69fb      	ldr	r3, [r7, #28]
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3728      	adds	r7, #40	; 0x28
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}
 8006a36:	bf00      	nop
 8006a38:	20001f1c 	.word	0x20001f1c
 8006a3c:	20001f30 	.word	0x20001f30
 8006a40:	20001f20 	.word	0x20001f20
 8006a44:	20001f14 	.word	0x20001f14
 8006a48:	20001f24 	.word	0x20001f24
 8006a4c:	20001f28 	.word	0x20001f28

08006a50 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b086      	sub	sp, #24
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d04d      	beq.n	8006afe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006a62:	2308      	movs	r3, #8
 8006a64:	425b      	negs	r3, r3
 8006a66:	697a      	ldr	r2, [r7, #20]
 8006a68:	4413      	add	r3, r2
 8006a6a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	685a      	ldr	r2, [r3, #4]
 8006a74:	4b24      	ldr	r3, [pc, #144]	; (8006b08 <vPortFree+0xb8>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4013      	ands	r3, r2
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d10a      	bne.n	8006a94 <vPortFree+0x44>
	__asm volatile
 8006a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a82:	f383 8811 	msr	BASEPRI, r3
 8006a86:	f3bf 8f6f 	isb	sy
 8006a8a:	f3bf 8f4f 	dsb	sy
 8006a8e:	60fb      	str	r3, [r7, #12]
}
 8006a90:	bf00      	nop
 8006a92:	e7fe      	b.n	8006a92 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006a94:	693b      	ldr	r3, [r7, #16]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d00a      	beq.n	8006ab2 <vPortFree+0x62>
	__asm volatile
 8006a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa0:	f383 8811 	msr	BASEPRI, r3
 8006aa4:	f3bf 8f6f 	isb	sy
 8006aa8:	f3bf 8f4f 	dsb	sy
 8006aac:	60bb      	str	r3, [r7, #8]
}
 8006aae:	bf00      	nop
 8006ab0:	e7fe      	b.n	8006ab0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	685a      	ldr	r2, [r3, #4]
 8006ab6:	4b14      	ldr	r3, [pc, #80]	; (8006b08 <vPortFree+0xb8>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4013      	ands	r3, r2
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d01e      	beq.n	8006afe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d11a      	bne.n	8006afe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	685a      	ldr	r2, [r3, #4]
 8006acc:	4b0e      	ldr	r3, [pc, #56]	; (8006b08 <vPortFree+0xb8>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	43db      	mvns	r3, r3
 8006ad2:	401a      	ands	r2, r3
 8006ad4:	693b      	ldr	r3, [r7, #16]
 8006ad6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006ad8:	f7fe fb88 	bl	80051ec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	685a      	ldr	r2, [r3, #4]
 8006ae0:	4b0a      	ldr	r3, [pc, #40]	; (8006b0c <vPortFree+0xbc>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4413      	add	r3, r2
 8006ae6:	4a09      	ldr	r2, [pc, #36]	; (8006b0c <vPortFree+0xbc>)
 8006ae8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006aea:	6938      	ldr	r0, [r7, #16]
 8006aec:	f000 f874 	bl	8006bd8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006af0:	4b07      	ldr	r3, [pc, #28]	; (8006b10 <vPortFree+0xc0>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	3301      	adds	r3, #1
 8006af6:	4a06      	ldr	r2, [pc, #24]	; (8006b10 <vPortFree+0xc0>)
 8006af8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006afa:	f7fe fb85 	bl	8005208 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006afe:	bf00      	nop
 8006b00:	3718      	adds	r7, #24
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}
 8006b06:	bf00      	nop
 8006b08:	20001f30 	.word	0x20001f30
 8006b0c:	20001f20 	.word	0x20001f20
 8006b10:	20001f2c 	.word	0x20001f2c

08006b14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006b14:	b480      	push	{r7}
 8006b16:	b085      	sub	sp, #20
 8006b18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006b1a:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8006b1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006b20:	4b27      	ldr	r3, [pc, #156]	; (8006bc0 <prvHeapInit+0xac>)
 8006b22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	f003 0307 	and.w	r3, r3, #7
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d00c      	beq.n	8006b48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	3307      	adds	r3, #7
 8006b32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	f023 0307 	bic.w	r3, r3, #7
 8006b3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006b3c:	68ba      	ldr	r2, [r7, #8]
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	1ad3      	subs	r3, r2, r3
 8006b42:	4a1f      	ldr	r2, [pc, #124]	; (8006bc0 <prvHeapInit+0xac>)
 8006b44:	4413      	add	r3, r2
 8006b46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006b4c:	4a1d      	ldr	r2, [pc, #116]	; (8006bc4 <prvHeapInit+0xb0>)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006b52:	4b1c      	ldr	r3, [pc, #112]	; (8006bc4 <prvHeapInit+0xb0>)
 8006b54:	2200      	movs	r2, #0
 8006b56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	68ba      	ldr	r2, [r7, #8]
 8006b5c:	4413      	add	r3, r2
 8006b5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006b60:	2208      	movs	r2, #8
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	1a9b      	subs	r3, r3, r2
 8006b66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	f023 0307 	bic.w	r3, r3, #7
 8006b6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	4a15      	ldr	r2, [pc, #84]	; (8006bc8 <prvHeapInit+0xb4>)
 8006b74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006b76:	4b14      	ldr	r3, [pc, #80]	; (8006bc8 <prvHeapInit+0xb4>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006b7e:	4b12      	ldr	r3, [pc, #72]	; (8006bc8 <prvHeapInit+0xb4>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	2200      	movs	r2, #0
 8006b84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	68fa      	ldr	r2, [r7, #12]
 8006b8e:	1ad2      	subs	r2, r2, r3
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006b94:	4b0c      	ldr	r3, [pc, #48]	; (8006bc8 <prvHeapInit+0xb4>)
 8006b96:	681a      	ldr	r2, [r3, #0]
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	685b      	ldr	r3, [r3, #4]
 8006ba0:	4a0a      	ldr	r2, [pc, #40]	; (8006bcc <prvHeapInit+0xb8>)
 8006ba2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	685b      	ldr	r3, [r3, #4]
 8006ba8:	4a09      	ldr	r2, [pc, #36]	; (8006bd0 <prvHeapInit+0xbc>)
 8006baa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006bac:	4b09      	ldr	r3, [pc, #36]	; (8006bd4 <prvHeapInit+0xc0>)
 8006bae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006bb2:	601a      	str	r2, [r3, #0]
}
 8006bb4:	bf00      	nop
 8006bb6:	3714      	adds	r7, #20
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbe:	4770      	bx	lr
 8006bc0:	20000f74 	.word	0x20000f74
 8006bc4:	20001f14 	.word	0x20001f14
 8006bc8:	20001f1c 	.word	0x20001f1c
 8006bcc:	20001f24 	.word	0x20001f24
 8006bd0:	20001f20 	.word	0x20001f20
 8006bd4:	20001f30 	.word	0x20001f30

08006bd8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b085      	sub	sp, #20
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006be0:	4b28      	ldr	r3, [pc, #160]	; (8006c84 <prvInsertBlockIntoFreeList+0xac>)
 8006be2:	60fb      	str	r3, [r7, #12]
 8006be4:	e002      	b.n	8006bec <prvInsertBlockIntoFreeList+0x14>
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	60fb      	str	r3, [r7, #12]
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	687a      	ldr	r2, [r7, #4]
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	d8f7      	bhi.n	8006be6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	685b      	ldr	r3, [r3, #4]
 8006bfe:	68ba      	ldr	r2, [r7, #8]
 8006c00:	4413      	add	r3, r2
 8006c02:	687a      	ldr	r2, [r7, #4]
 8006c04:	429a      	cmp	r2, r3
 8006c06:	d108      	bne.n	8006c1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	685a      	ldr	r2, [r3, #4]
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	441a      	add	r2, r3
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	68ba      	ldr	r2, [r7, #8]
 8006c24:	441a      	add	r2, r3
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	429a      	cmp	r2, r3
 8006c2c:	d118      	bne.n	8006c60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681a      	ldr	r2, [r3, #0]
 8006c32:	4b15      	ldr	r3, [pc, #84]	; (8006c88 <prvInsertBlockIntoFreeList+0xb0>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	429a      	cmp	r2, r3
 8006c38:	d00d      	beq.n	8006c56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	685a      	ldr	r2, [r3, #4]
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	441a      	add	r2, r3
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	681a      	ldr	r2, [r3, #0]
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	601a      	str	r2, [r3, #0]
 8006c54:	e008      	b.n	8006c68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006c56:	4b0c      	ldr	r3, [pc, #48]	; (8006c88 <prvInsertBlockIntoFreeList+0xb0>)
 8006c58:	681a      	ldr	r2, [r3, #0]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	601a      	str	r2, [r3, #0]
 8006c5e:	e003      	b.n	8006c68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681a      	ldr	r2, [r3, #0]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006c68:	68fa      	ldr	r2, [r7, #12]
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	d002      	beq.n	8006c76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	687a      	ldr	r2, [r7, #4]
 8006c74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c76:	bf00      	nop
 8006c78:	3714      	adds	r7, #20
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c80:	4770      	bx	lr
 8006c82:	bf00      	nop
 8006c84:	20001f14 	.word	0x20001f14
 8006c88:	20001f1c 	.word	0x20001f1c

08006c8c <__libc_init_array>:
 8006c8c:	b570      	push	{r4, r5, r6, lr}
 8006c8e:	4d0d      	ldr	r5, [pc, #52]	; (8006cc4 <__libc_init_array+0x38>)
 8006c90:	4c0d      	ldr	r4, [pc, #52]	; (8006cc8 <__libc_init_array+0x3c>)
 8006c92:	1b64      	subs	r4, r4, r5
 8006c94:	10a4      	asrs	r4, r4, #2
 8006c96:	2600      	movs	r6, #0
 8006c98:	42a6      	cmp	r6, r4
 8006c9a:	d109      	bne.n	8006cb0 <__libc_init_array+0x24>
 8006c9c:	4d0b      	ldr	r5, [pc, #44]	; (8006ccc <__libc_init_array+0x40>)
 8006c9e:	4c0c      	ldr	r4, [pc, #48]	; (8006cd0 <__libc_init_array+0x44>)
 8006ca0:	f000 f8f2 	bl	8006e88 <_init>
 8006ca4:	1b64      	subs	r4, r4, r5
 8006ca6:	10a4      	asrs	r4, r4, #2
 8006ca8:	2600      	movs	r6, #0
 8006caa:	42a6      	cmp	r6, r4
 8006cac:	d105      	bne.n	8006cba <__libc_init_array+0x2e>
 8006cae:	bd70      	pop	{r4, r5, r6, pc}
 8006cb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cb4:	4798      	blx	r3
 8006cb6:	3601      	adds	r6, #1
 8006cb8:	e7ee      	b.n	8006c98 <__libc_init_array+0xc>
 8006cba:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cbe:	4798      	blx	r3
 8006cc0:	3601      	adds	r6, #1
 8006cc2:	e7f2      	b.n	8006caa <__libc_init_array+0x1e>
 8006cc4:	080070ac 	.word	0x080070ac
 8006cc8:	080070ac 	.word	0x080070ac
 8006ccc:	080070ac 	.word	0x080070ac
 8006cd0:	080070b0 	.word	0x080070b0

08006cd4 <__retarget_lock_acquire_recursive>:
 8006cd4:	4770      	bx	lr

08006cd6 <__retarget_lock_release_recursive>:
 8006cd6:	4770      	bx	lr

08006cd8 <memcpy>:
 8006cd8:	440a      	add	r2, r1
 8006cda:	4291      	cmp	r1, r2
 8006cdc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006ce0:	d100      	bne.n	8006ce4 <memcpy+0xc>
 8006ce2:	4770      	bx	lr
 8006ce4:	b510      	push	{r4, lr}
 8006ce6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006cea:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006cee:	4291      	cmp	r1, r2
 8006cf0:	d1f9      	bne.n	8006ce6 <memcpy+0xe>
 8006cf2:	bd10      	pop	{r4, pc}

08006cf4 <memset>:
 8006cf4:	4402      	add	r2, r0
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d100      	bne.n	8006cfe <memset+0xa>
 8006cfc:	4770      	bx	lr
 8006cfe:	f803 1b01 	strb.w	r1, [r3], #1
 8006d02:	e7f9      	b.n	8006cf8 <memset+0x4>

08006d04 <cleanup_glue>:
 8006d04:	b538      	push	{r3, r4, r5, lr}
 8006d06:	460c      	mov	r4, r1
 8006d08:	6809      	ldr	r1, [r1, #0]
 8006d0a:	4605      	mov	r5, r0
 8006d0c:	b109      	cbz	r1, 8006d12 <cleanup_glue+0xe>
 8006d0e:	f7ff fff9 	bl	8006d04 <cleanup_glue>
 8006d12:	4621      	mov	r1, r4
 8006d14:	4628      	mov	r0, r5
 8006d16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d1a:	f000 b869 	b.w	8006df0 <_free_r>
	...

08006d20 <_reclaim_reent>:
 8006d20:	4b2c      	ldr	r3, [pc, #176]	; (8006dd4 <_reclaim_reent+0xb4>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4283      	cmp	r3, r0
 8006d26:	b570      	push	{r4, r5, r6, lr}
 8006d28:	4604      	mov	r4, r0
 8006d2a:	d051      	beq.n	8006dd0 <_reclaim_reent+0xb0>
 8006d2c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006d2e:	b143      	cbz	r3, 8006d42 <_reclaim_reent+0x22>
 8006d30:	68db      	ldr	r3, [r3, #12]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d14a      	bne.n	8006dcc <_reclaim_reent+0xac>
 8006d36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d38:	6819      	ldr	r1, [r3, #0]
 8006d3a:	b111      	cbz	r1, 8006d42 <_reclaim_reent+0x22>
 8006d3c:	4620      	mov	r0, r4
 8006d3e:	f000 f857 	bl	8006df0 <_free_r>
 8006d42:	6961      	ldr	r1, [r4, #20]
 8006d44:	b111      	cbz	r1, 8006d4c <_reclaim_reent+0x2c>
 8006d46:	4620      	mov	r0, r4
 8006d48:	f000 f852 	bl	8006df0 <_free_r>
 8006d4c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006d4e:	b111      	cbz	r1, 8006d56 <_reclaim_reent+0x36>
 8006d50:	4620      	mov	r0, r4
 8006d52:	f000 f84d 	bl	8006df0 <_free_r>
 8006d56:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006d58:	b111      	cbz	r1, 8006d60 <_reclaim_reent+0x40>
 8006d5a:	4620      	mov	r0, r4
 8006d5c:	f000 f848 	bl	8006df0 <_free_r>
 8006d60:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006d62:	b111      	cbz	r1, 8006d6a <_reclaim_reent+0x4a>
 8006d64:	4620      	mov	r0, r4
 8006d66:	f000 f843 	bl	8006df0 <_free_r>
 8006d6a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006d6c:	b111      	cbz	r1, 8006d74 <_reclaim_reent+0x54>
 8006d6e:	4620      	mov	r0, r4
 8006d70:	f000 f83e 	bl	8006df0 <_free_r>
 8006d74:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006d76:	b111      	cbz	r1, 8006d7e <_reclaim_reent+0x5e>
 8006d78:	4620      	mov	r0, r4
 8006d7a:	f000 f839 	bl	8006df0 <_free_r>
 8006d7e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006d80:	b111      	cbz	r1, 8006d88 <_reclaim_reent+0x68>
 8006d82:	4620      	mov	r0, r4
 8006d84:	f000 f834 	bl	8006df0 <_free_r>
 8006d88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d8a:	b111      	cbz	r1, 8006d92 <_reclaim_reent+0x72>
 8006d8c:	4620      	mov	r0, r4
 8006d8e:	f000 f82f 	bl	8006df0 <_free_r>
 8006d92:	69a3      	ldr	r3, [r4, #24]
 8006d94:	b1e3      	cbz	r3, 8006dd0 <_reclaim_reent+0xb0>
 8006d96:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006d98:	4620      	mov	r0, r4
 8006d9a:	4798      	blx	r3
 8006d9c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006d9e:	b1b9      	cbz	r1, 8006dd0 <_reclaim_reent+0xb0>
 8006da0:	4620      	mov	r0, r4
 8006da2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006da6:	f7ff bfad 	b.w	8006d04 <cleanup_glue>
 8006daa:	5949      	ldr	r1, [r1, r5]
 8006dac:	b941      	cbnz	r1, 8006dc0 <_reclaim_reent+0xa0>
 8006dae:	3504      	adds	r5, #4
 8006db0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006db2:	2d80      	cmp	r5, #128	; 0x80
 8006db4:	68d9      	ldr	r1, [r3, #12]
 8006db6:	d1f8      	bne.n	8006daa <_reclaim_reent+0x8a>
 8006db8:	4620      	mov	r0, r4
 8006dba:	f000 f819 	bl	8006df0 <_free_r>
 8006dbe:	e7ba      	b.n	8006d36 <_reclaim_reent+0x16>
 8006dc0:	680e      	ldr	r6, [r1, #0]
 8006dc2:	4620      	mov	r0, r4
 8006dc4:	f000 f814 	bl	8006df0 <_free_r>
 8006dc8:	4631      	mov	r1, r6
 8006dca:	e7ef      	b.n	8006dac <_reclaim_reent+0x8c>
 8006dcc:	2500      	movs	r5, #0
 8006dce:	e7ef      	b.n	8006db0 <_reclaim_reent+0x90>
 8006dd0:	bd70      	pop	{r4, r5, r6, pc}
 8006dd2:	bf00      	nop
 8006dd4:	20000028 	.word	0x20000028

08006dd8 <__malloc_lock>:
 8006dd8:	4801      	ldr	r0, [pc, #4]	; (8006de0 <__malloc_lock+0x8>)
 8006dda:	f7ff bf7b 	b.w	8006cd4 <__retarget_lock_acquire_recursive>
 8006dde:	bf00      	nop
 8006de0:	20001f34 	.word	0x20001f34

08006de4 <__malloc_unlock>:
 8006de4:	4801      	ldr	r0, [pc, #4]	; (8006dec <__malloc_unlock+0x8>)
 8006de6:	f7ff bf76 	b.w	8006cd6 <__retarget_lock_release_recursive>
 8006dea:	bf00      	nop
 8006dec:	20001f34 	.word	0x20001f34

08006df0 <_free_r>:
 8006df0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006df2:	2900      	cmp	r1, #0
 8006df4:	d044      	beq.n	8006e80 <_free_r+0x90>
 8006df6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006dfa:	9001      	str	r0, [sp, #4]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	f1a1 0404 	sub.w	r4, r1, #4
 8006e02:	bfb8      	it	lt
 8006e04:	18e4      	addlt	r4, r4, r3
 8006e06:	f7ff ffe7 	bl	8006dd8 <__malloc_lock>
 8006e0a:	4a1e      	ldr	r2, [pc, #120]	; (8006e84 <_free_r+0x94>)
 8006e0c:	9801      	ldr	r0, [sp, #4]
 8006e0e:	6813      	ldr	r3, [r2, #0]
 8006e10:	b933      	cbnz	r3, 8006e20 <_free_r+0x30>
 8006e12:	6063      	str	r3, [r4, #4]
 8006e14:	6014      	str	r4, [r2, #0]
 8006e16:	b003      	add	sp, #12
 8006e18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006e1c:	f7ff bfe2 	b.w	8006de4 <__malloc_unlock>
 8006e20:	42a3      	cmp	r3, r4
 8006e22:	d908      	bls.n	8006e36 <_free_r+0x46>
 8006e24:	6825      	ldr	r5, [r4, #0]
 8006e26:	1961      	adds	r1, r4, r5
 8006e28:	428b      	cmp	r3, r1
 8006e2a:	bf01      	itttt	eq
 8006e2c:	6819      	ldreq	r1, [r3, #0]
 8006e2e:	685b      	ldreq	r3, [r3, #4]
 8006e30:	1949      	addeq	r1, r1, r5
 8006e32:	6021      	streq	r1, [r4, #0]
 8006e34:	e7ed      	b.n	8006e12 <_free_r+0x22>
 8006e36:	461a      	mov	r2, r3
 8006e38:	685b      	ldr	r3, [r3, #4]
 8006e3a:	b10b      	cbz	r3, 8006e40 <_free_r+0x50>
 8006e3c:	42a3      	cmp	r3, r4
 8006e3e:	d9fa      	bls.n	8006e36 <_free_r+0x46>
 8006e40:	6811      	ldr	r1, [r2, #0]
 8006e42:	1855      	adds	r5, r2, r1
 8006e44:	42a5      	cmp	r5, r4
 8006e46:	d10b      	bne.n	8006e60 <_free_r+0x70>
 8006e48:	6824      	ldr	r4, [r4, #0]
 8006e4a:	4421      	add	r1, r4
 8006e4c:	1854      	adds	r4, r2, r1
 8006e4e:	42a3      	cmp	r3, r4
 8006e50:	6011      	str	r1, [r2, #0]
 8006e52:	d1e0      	bne.n	8006e16 <_free_r+0x26>
 8006e54:	681c      	ldr	r4, [r3, #0]
 8006e56:	685b      	ldr	r3, [r3, #4]
 8006e58:	6053      	str	r3, [r2, #4]
 8006e5a:	4421      	add	r1, r4
 8006e5c:	6011      	str	r1, [r2, #0]
 8006e5e:	e7da      	b.n	8006e16 <_free_r+0x26>
 8006e60:	d902      	bls.n	8006e68 <_free_r+0x78>
 8006e62:	230c      	movs	r3, #12
 8006e64:	6003      	str	r3, [r0, #0]
 8006e66:	e7d6      	b.n	8006e16 <_free_r+0x26>
 8006e68:	6825      	ldr	r5, [r4, #0]
 8006e6a:	1961      	adds	r1, r4, r5
 8006e6c:	428b      	cmp	r3, r1
 8006e6e:	bf04      	itt	eq
 8006e70:	6819      	ldreq	r1, [r3, #0]
 8006e72:	685b      	ldreq	r3, [r3, #4]
 8006e74:	6063      	str	r3, [r4, #4]
 8006e76:	bf04      	itt	eq
 8006e78:	1949      	addeq	r1, r1, r5
 8006e7a:	6021      	streq	r1, [r4, #0]
 8006e7c:	6054      	str	r4, [r2, #4]
 8006e7e:	e7ca      	b.n	8006e16 <_free_r+0x26>
 8006e80:	b003      	add	sp, #12
 8006e82:	bd30      	pop	{r4, r5, pc}
 8006e84:	20001f38 	.word	0x20001f38

08006e88 <_init>:
 8006e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e8a:	bf00      	nop
 8006e8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e8e:	bc08      	pop	{r3}
 8006e90:	469e      	mov	lr, r3
 8006e92:	4770      	bx	lr

08006e94 <_fini>:
 8006e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e96:	bf00      	nop
 8006e98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e9a:	bc08      	pop	{r3}
 8006e9c:	469e      	mov	lr, r3
 8006e9e:	4770      	bx	lr
