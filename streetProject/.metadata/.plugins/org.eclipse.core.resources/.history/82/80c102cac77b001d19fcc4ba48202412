/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * File Name          : freertos.c
  * Description        : Code for freertos applications
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2022 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */

/* Includes ------------------------------------------------------------------*/
#include "FreeRTOS.h"
#include "task.h"
#include "main.h"
#include "cmsis_os.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */
/* Definitions for defaultTask */
osThreadId_t defaultTaskHandle;
const osThreadAttr_t defaultTask_attributes = {
  .name = "defaultTask",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityRealtime2,
};
/* Definitions for GPIO_Button1 */
osThreadId_t GPIO_Button1Handle;
const osThreadAttr_t GPIO_Button1_attributes = {
  .name = "GPIO_Button1",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityHigh,
};
/* Definitions for GPIO_Switches */
osThreadId_t GPIO_SwitchesHandle;
const osThreadAttr_t GPIO_Switches_attributes = {
  .name = "GPIO_Switches",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityHigh,
};
/* Definitions for Timer_Func */
osThreadId_t Timer_FuncHandle;
const osThreadAttr_t Timer_Func_attributes = {
  .name = "Timer_Func",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityRealtime1,
};
/* Definitions for GPIO_Button2 */
osThreadId_t GPIO_Button2Handle;
const osThreadAttr_t GPIO_Button2_attributes = {
  .name = "GPIO_Button2",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityHigh,
};
/* Definitions for event */
osMutexId_t eventHandle;
const osMutexAttr_t event_attributes = {
  .name = "event"
};
/* Definitions for buttonsSem */
osSemaphoreId_t buttonsSemHandle;
const osSemaphoreAttr_t buttonsSem_attributes = {
  .name = "buttonsSem"
};
/* Definitions for switchesSem */
osSemaphoreId_t switchesSemHandle;
const osSemaphoreAttr_t switchesSem_attributes = {
  .name = "switchesSem"
};

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */

/* USER CODE END FunctionPrototypes */

void StartDefaultTask(void *argument);
void Button_Task1(void *argument);
void Switches(void *argument);
void timer(void *argument);
void Button_Task2(void *argument);

void MX_FREERTOS_Init(void); /* (MISRA C 2004 rule 8.1) */

/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of event */
  eventHandle = osMutexNew(&event_attributes);

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of buttonsSem */
  buttonsSemHandle = osSemaphoreNew(1, 1, &buttonsSem_attributes);

  /* creation of switchesSem */
  switchesSemHandle = osSemaphoreNew(1, 1, &switchesSem_attributes);

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);

  /* creation of GPIO_Button1 */
  GPIO_Button1Handle = osThreadNew(Button_Task1, NULL, &GPIO_Button1_attributes);

  /* creation of GPIO_Switches */
  GPIO_SwitchesHandle = osThreadNew(Switches, NULL, &GPIO_Switches_attributes);

  /* creation of Timer_Func */
  Timer_FuncHandle = osThreadNew(timer, NULL, &Timer_Func_attributes);

  /* creation of GPIO_Button2 */
  GPIO_Button2Handle = osThreadNew(Button_Task2, NULL, &GPIO_Button2_attributes);

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}

/* USER CODE BEGIN Header_StartDefaultTask */
/**
  * @brief  Function implementing the defaultTask thread.
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
  }
  /* USER CODE END StartDefaultTask */
}

/* USER CODE BEGIN Header_Button_Task1 */
/**
* @brief Function implementing the GPIO_Button1 thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Button_Task1 */
void Button_Task1(void *argument)
{
  /* USER CODE BEGIN Button_Task1 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
  }
  /* USER CODE END Button_Task1 */
}

/* USER CODE BEGIN Header_Switches */
/**
* @brief Function implementing the GPIO_Switches thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Switches */
void Switches(void *argument)
{
  /* USER CODE BEGIN Switches */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
  }
  /* USER CODE END Switches */
}

/* USER CODE BEGIN Header_timer */
/**
* @brief Function implementing the Timer_Func thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_timer */
void timer(void *argument)
{
  /* USER CODE BEGIN timer */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
  }
  /* USER CODE END timer */
}

/* USER CODE BEGIN Header_Button_Task2 */
/**
* @brief Function implementing the GPIO_Button2 thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Button_Task2 */
void Button_Task2(void *argument)
{
  /* USER CODE BEGIN Button_Task2 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
  }
  /* USER CODE END Button_Task2 */
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

/* USER CODE END Application */

