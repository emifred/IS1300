.TH "Core/Inc/stm32l4xx_it.h" 3 "Thu Dec 15 2022" "street" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Core/Inc/stm32l4xx_it.h \- This file contains the headers of the interrupt handlers\&.  

.SH SYNOPSIS
.br
.PP
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBNMI_Handler\fP (void)"
.br
.RI "This function handles Non maskable interrupt\&. "
.ti -1c
.RI "void \fBHardFault_Handler\fP (void)"
.br
.RI "This function handles Hard fault interrupt\&. "
.ti -1c
.RI "void \fBMemManage_Handler\fP (void)"
.br
.RI "This function handles Memory management fault\&. "
.ti -1c
.RI "void \fBBusFault_Handler\fP (void)"
.br
.RI "This function handles Prefetch fault, memory access fault\&. "
.ti -1c
.RI "void \fBUsageFault_Handler\fP (void)"
.br
.RI "This function handles Undefined instruction or illegal state\&. "
.ti -1c
.RI "void \fBDebugMon_Handler\fP (void)"
.br
.RI "This function handles Debug monitor\&. "
.ti -1c
.RI "void \fBTIM1_UP_TIM16_IRQHandler\fP (void)"
.br
.RI "This function handles TIM1 update interrupt and TIM16 global interrupt\&. "
.in -1c
.SH "Detailed Description"
.PP 
This file contains the headers of the interrupt handlers\&. 


.PP
\fBAttention\fP
.RS 4

.RE
.PP
Copyright (c) 2022 STMicroelectronics\&. All rights reserved\&.
.PP
This software is licensed under terms that can be found in the LICENSE file in the root directory of this software component\&. If no LICENSE file comes with this software, it is provided AS-IS\&. 
.PP
Definition in file \fBstm32l4xx_it\&.h\fP\&.
.SH "Function Documentation"
.PP 
.SS "void BusFault_Handler (void)"

.PP
This function handles Prefetch fault, memory access fault\&. 
.PP
Definition at line \fB115\fP of file \fBstm32l4xx_it\&.c\fP\&.
.PP
.nf
116 {
117   /* USER CODE BEGIN BusFault_IRQn 0 */
118 
119   /* USER CODE END BusFault_IRQn 0 */
120   while (1)
121   {
122     /* USER CODE BEGIN W1_BusFault_IRQn 0 */
123     /* USER CODE END W1_BusFault_IRQn 0 */
124   }
125 }
.fi
.SS "void DebugMon_Handler (void)"

.PP
This function handles Debug monitor\&. 
.PP
Definition at line \fB145\fP of file \fBstm32l4xx_it\&.c\fP\&.
.PP
.nf
146 {
147   /* USER CODE BEGIN DebugMonitor_IRQn 0 */
148 
149   /* USER CODE END DebugMonitor_IRQn 0 */
150   /* USER CODE BEGIN DebugMonitor_IRQn 1 */
151 
152   /* USER CODE END DebugMonitor_IRQn 1 */
153 }
.fi
.SS "void HardFault_Handler (void)"

.PP
This function handles Hard fault interrupt\&. 
.PP
Definition at line \fB85\fP of file \fBstm32l4xx_it\&.c\fP\&.
.PP
.nf
86 {
87   /* USER CODE BEGIN HardFault_IRQn 0 */
88 
89   /* USER CODE END HardFault_IRQn 0 */
90   while (1)
91   {
92     /* USER CODE BEGIN W1_HardFault_IRQn 0 */
93     /* USER CODE END W1_HardFault_IRQn 0 */
94   }
95 }
.fi
.SS "void MemManage_Handler (void)"

.PP
This function handles Memory management fault\&. 
.PP
Definition at line \fB100\fP of file \fBstm32l4xx_it\&.c\fP\&.
.PP
.nf
101 {
102   /* USER CODE BEGIN MemoryManagement_IRQn 0 */
103 
104   /* USER CODE END MemoryManagement_IRQn 0 */
105   while (1)
106   {
107     /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
108     /* USER CODE END W1_MemoryManagement_IRQn 0 */
109   }
110 }
.fi
.SS "void NMI_Handler (void)"

.PP
This function handles Non maskable interrupt\&. 
.PP
Definition at line \fB70\fP of file \fBstm32l4xx_it\&.c\fP\&.
.PP
.nf
71 {
72   /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
73 
74   /* USER CODE END NonMaskableInt_IRQn 0 */
75   /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
76   while (1)
77   {
78   }
79   /* USER CODE END NonMaskableInt_IRQn 1 */
80 }
.fi
.SS "void TIM1_UP_TIM16_IRQHandler (void)"

.PP
This function handles TIM1 update interrupt and TIM16 global interrupt\&. 
.PP
Definition at line \fB165\fP of file \fBstm32l4xx_it\&.c\fP\&.
.PP
.nf
166 {
167   /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
168 
169   /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
170   HAL_TIM_IRQHandler(&htim1);
171   /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */
172 
173   /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
174 }
.fi
.SS "void UsageFault_Handler (void)"

.PP
This function handles Undefined instruction or illegal state\&. 
.PP
Definition at line \fB130\fP of file \fBstm32l4xx_it\&.c\fP\&.
.PP
.nf
131 {
132   /* USER CODE BEGIN UsageFault_IRQn 0 */
133 
134   /* USER CODE END UsageFault_IRQn 0 */
135   while (1)
136   {
137     /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
138     /* USER CODE END W1_UsageFault_IRQn 0 */
139   }
140 }
.fi
.SH "Author"
.PP 
Generated automatically by Doxygen for street from the source code\&.
