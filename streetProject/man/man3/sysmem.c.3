.TH "Core/Src/sysmem.c" 3 "Thu Dec 15 2022" "street" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Core/Src/sysmem.c \- STM32CubeIDE System Memory calls file\&.  

.SH SYNOPSIS
.br
.PP
\fC#include <errno\&.h>\fP
.br
\fC#include <stdint\&.h>\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "void * \fB_sbrk\fP (ptrdiff_t incr)"
.br
.RI "\fB_sbrk()\fP allocates memory to the newlib heap and is used by malloc and others from the C library "
.in -1c
.SH "Detailed Description"
.PP 
STM32CubeIDE System Memory calls file\&. 


.PP
\fBAuthor\fP
.RS 4
Generated by STM32CubeIDE 
.PP
.nf
       For more information about which C functions
       need which of these lowlevel functions
       please consult the newlib libc manual

.fi
.PP
 
.RE
.PP
\fBAttention\fP
.RS 4
.RE
.PP
Copyright (c) 2022 STMicroelectronics\&. All rights reserved\&.
.PP
This software is licensed under terms that can be found in the LICENSE file in the root directory of this software component\&. If no LICENSE file comes with this software, it is provided AS-IS\&. 
.PP
Definition in file \fBsysmem\&.c\fP\&.
.SH "Function Documentation"
.PP 
.SS "void * _sbrk (ptrdiff_t incr)"

.PP
\fB_sbrk()\fP allocates memory to the newlib heap and is used by malloc and others from the C library 
.PP
.nf
* ############################################################################
* #  \&.data  #  \&.bss  #       newlib heap       #          MSP stack          #
* #         #        #                         # Reserved by _Min_Stack_Size #
* ############################################################################
* ^-- RAM start      ^-- _end                             _estack, RAM end --^
* 
.fi
.PP
.PP
This implementation starts allocating at the '_end' linker symbol The '_Min_Stack_Size' linker symbol reserves a memory for the MSP stack The implementation considers '_estack' linker symbol to be RAM end NOTE: If the MSP stack, at any point during execution, grows larger than the reserved size, please increase the '_Min_Stack_Size'\&.
.PP
\fBParameters\fP
.RS 4
\fIincr\fP Memory size 
.RE
.PP
\fBReturns\fP
.RS 4
Pointer to allocated memory 
.RE
.PP

.PP
Definition at line \fB53\fP of file \fBsysmem\&.c\fP\&.
.PP
.nf
54 {
55   extern uint8_t _end; /* Symbol defined in the linker script */
56   extern uint8_t _estack; /* Symbol defined in the linker script */
57   extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
58   const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
59   const uint8_t *max_heap = (uint8_t *)stack_limit;
60   uint8_t *prev_heap_end;
61 
62   /* Initialize heap end at first call */
63   if (NULL == __sbrk_heap_end)
64   {
65     __sbrk_heap_end = &_end;
66   }
67 
68   /* Protect heap from growing into the reserved MSP stack */
69   if (__sbrk_heap_end + incr > max_heap)
70   {
71     errno = ENOMEM;
72     return (void *)-1;
73   }
74 
75   prev_heap_end = __sbrk_heap_end;
76   __sbrk_heap_end += incr;
77 
78   return (void *)prev_heap_end;
79 }
.fi
.SH "Author"
.PP 
Generated automatically by Doxygen for street from the source code\&.
